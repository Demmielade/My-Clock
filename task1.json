[
    {
        "name": "plugins/sqlfluff-plugin-example/test/rules/rule_test_cases_test.py::test__rule_test_case[Example_L001_no_forbidden_col_used]",
        "status": "FAILED"
    },
    {
        "name": "plugins/sqlfluff-plugin-example/test/rules/rule_test_cases_test.py::test__rule_test_case[Example_L001_no_order_by_used]",
        "status": "FAILED"
    },
    {
        "name": "plugins/sqlfluff-plugin-example/test/rules/rule_test_cases_test.py::test__rule_test_case[Example_L001_forbidden_col_used]",
        "status": "FAILED"
    },
    {
        "name": "test/diff_quality_plugin_test.py::test_diff_quality_plugin[test/fixtures/linter/indentation_errors.sql-expected_violations_lines0]",
        "status": "PASSED"
    },
    {
        "name": "test/diff_quality_plugin_test.py::test_diff_quality_plugin[test/fixtures/linter/parse_error.sql-expected_violations_lines1]",
        "status": "PASSED"
    },
    {
        "name": "test/diff_quality_plugin_test.py::test_diff_quality_plugin[test/fixtures/linter/diffquality/parse_error.sql-expected_violations_lines2]",
        "status": "PASSED"
    },
    {
        "name": "test/test_testing.py::test_assert_rule_fail_in_sql_handle_parse_error",
        "status": "PASSED"
    },
    {
        "name": "test/test_testing.py::test_assert_rule_fail_in_sql_should_fail_queries_that_unexpectedly_pass",
        "status": "PASSED"
    },
    {
        "name": "test/test_testing.py::test_assert_rule_pass_in_sql_should_handle_parse_error",
        "status": "PASSED"
    },
    {
        "name": "test/test_testing.py::test_assert_rule_pass_in_sql_should_fail_when_there_are_violations",
        "status": "PASSED"
    },
    {
        "name": "test/test_testing.py::test_rules__test_helper_skipped_when_test_case_skipped",
        "status": "PASSED"
    },
    {
        "name": "test/test_testing.py::test_rules__test_helper_has_variable_introspection",
        "status": "PASSED"
    },
    {
        "name": "test/api/classes_test.py::test__api__lexer",
        "status": "PASSED"
    },
    {
        "name": "test/api/classes_test.py::test__api__parser",
        "status": "PASSED"
    },
    {
        "name": "test/api/classes_test.py::test__api__linter_lint",
        "status": "PASSED"
    },
    {
        "name": "test/api/classes_test.py::test__api__linter_fix",
        "status": "PASSED"
    },
    {
        "name": "test/api/info_test.py::test__api__info_dialects",
        "status": "PASSED"
    },
    {
        "name": "test/api/info_test.py::test__api__info_rules",
        "status": "PASSED"
    },
    {
        "name": "test/api/simple_test.py::test__api__lint_string_without_violations",
        "status": "PASSED"
    },
    {
        "name": "test/api/simple_test.py::test__api__lint_string",
        "status": "PASSED"
    },
    {
        "name": "test/api/simple_test.py::test__api__lint_file",
        "status": "PASSED"
    },
    {
        "name": "test/api/simple_test.py::test__api__lint_string_specific",
        "status": "PASSED"
    },
    {
        "name": "test/api/simple_test.py::test__api__fix_string",
        "status": "PASSED"
    },
    {
        "name": "test/api/simple_test.py::test__api__fix_string_specific",
        "status": "PASSED"
    },
    {
        "name": "test/api/simple_test.py::test__api__parse_string",
        "status": "PASSED"
    },
    {
        "name": "test/api/simple_test.py::test__api__parse_fail",
        "status": "PASSED"
    },
    {
        "name": "test/api/util_test.py::test__api__util_get_table_references[SeLEct  *, 1, blah as  fOO  from myTable-table_refs0-None]",
        "status": "PASSED"
    },
    {
        "name": "test/api/util_test.py::test__api__util_get_table_references[\\nWITH foo AS (SELECT * FROM bar.bar),\\nbaz AS (SELECT * FROM bap)\\nSELECT * FROM foo\\nINNER JOIN baz USING (user_id)\\nINNER JOIN ban USING (user_id)\\n-table_refs1-snowflake]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_directed",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_dialect",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_stdin[command0]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_stdin[command1]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_stdin[command2]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_stdin[command3]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command0]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command1]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command2]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command3]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command4]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command5]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command6]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command7]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command8]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command9]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command10]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command11]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command12]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command13]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command14]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command15]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command16]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command17]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command18]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command19]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command20]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command21]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse_with_retcode[command0-1]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse_with_retcode[command1-1]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse_with_retcode[command2-1]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_warning_explicit_file_ignored",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_skip_ignore_files",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_versioning",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_version",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_rules",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_dialects",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command__fix[L001-test/fixtures/linter/indentation_errors.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command__fix[L008-test/fixtures/linter/whitespace_errors.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command__fix[L008-test/fixtures/linter/indentation_errors.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command__fix[L003-test/fixtures/linter/indentation_error_hard.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_fix_stdin[select * from t-L003-select * from t]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_fix_stdin[ select * from t-L003-select * from t]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_fix_stdin[SELECT u.id, c.first_name, c.last_name, COUNT(o.user_id) FROM users as u JOIN customers as c on u.id = c.user_id JOIN orders as o on u.id = o.user_id;-L031-SELECT users.id, customers.first_name, customers.last_name, COUNT(orders.user_id) FROM users JOIN customers on users.id = customers.user_id JOIN orders on users.id = orders.user_id;]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_fix_stdin_logging_to_stderr",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_fix_stdin_safety",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_fix_stdin_error_exit_code[create TABLE {{ params.dsfsdfds }}.t (a int)-1--v-Fix aborted due to unparseable template variables.]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_fix_stdin_error_exit_code[create TABLE a.t (a int)-0--]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_fix_stdin_error_exit_code[create table a.t (a int)-0--]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_fix_stdin_error_exit_code[select col from a join b using (c)-1--v-Unfixable violations detected.]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command__fix_no_force[L001-test/fixtures/linter/indentation_errors.sql-y-0-0]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command__fix_no_force[L001-test/fixtures/linter/indentation_errors.sql-n-65-1]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_parse_serialize_from_stdin[yaml]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_parse_serialize_from_stdin[json]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_serialize_from_stdin[select * from tbl-expected0-0-yaml]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_serialize_from_stdin[select * from tbl-expected0-0-json]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_serialize_from_stdin[SElect * from tbl-expected1-65-yaml]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_serialize_from_stdin[SElect * from tbl-expected1-65-json]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_fail_nice_not_found[command0]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_fail_nice_not_found[command1]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_serialize_multiple_files[yaml]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_serialize_multiple_files[json]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_serialize_multiple_files[github-annotation]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_serialize_github_annotation",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test___main___help",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test_encoding[utf-8-ascii]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test_encoding[utf-8-sig-UTF-8-SIG]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test_encoding[utf-32-UTF-32]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/formatters_test.py::test__cli__formatters__filename_nocol",
        "status": "PASSED"
    },
    {
        "name": "test/cli/formatters_test.py::test__cli__formatters__violation",
        "status": "PASSED"
    },
    {
        "name": "test/cli/helpers_test.py::test__cli__helpers__colorize",
        "status": "PASSED"
    },
    {
        "name": "test/cli/helpers_test.py::test__cli__helpers__cli_table",
        "status": "PASSED"
    },
    {
        "name": "test/cli/helpers_test.py::test__cli__helpers__wrap_elem[abc-5-res0]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/helpers_test.py::test__cli__helpers__wrap_elem[how now brown cow-10-res1]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/helpers_test.py::test__cli__helpers__wrap_elem[A hippopotamus came for tea-10-res2]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/helpers_test.py::test__cli__helpers__wrap_elem[A hippopotamus\\ncame for tea-10-res3]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/helpers_test.py::test__cli__helpers__wrap_field_a",
        "status": "PASSED"
    },
    {
        "name": "test/cli/helpers_test.py::test__cli__helpers__wrap_field_b",
        "status": "PASSED"
    },
    {
        "name": "test/cli/helpers_test.py::test__cli__helpers__wrap_field_c",
        "status": "PASSED"
    },
    {
        "name": "test/cli/helpers_test.py::test__cli__helpers__pad_line",
        "status": "PASSED"
    },
    {
        "name": "test/core/config_test.py::test__config__nested_combine",
        "status": "PASSED"
    },
    {
        "name": "test/core/config_test.py::test__config__dict_diff",
        "status": "PASSED"
    },
    {
        "name": "test/core/config_test.py::test__config__load_file_dir",
        "status": "PASSED"
    },
    {
        "name": "test/core/config_test.py::test__config__load_file_f",
        "status": "PASSED"
    },
    {
        "name": "test/core/config_test.py::test__config__load_nested",
        "status": "PASSED"
    },
    {
        "name": "test/core/config_test.py::test__config__load_toml",
        "status": "PASSED"
    },
    {
        "name": "test/core/config_test.py::test__config__iter_config_paths_right_order",
        "status": "PASSED"
    },
    {
        "name": "test/core/config_test.py::test__config__find_sqlfluffignore_in_same_directory",
        "status": "PASSED"
    },
    {
        "name": "test/core/config_test.py::test__config__nested_config_tests",
        "status": "PASSED"
    },
    {
        "name": "test/core/config_test.py::test__config__load_user_appdir_config",
        "status": "PASSED"
    },
    {
        "name": "test/core/config_test.py::test__config___split_comma_separated_string[L011,L022,L031-expected0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/config_test.py::test__config___split_comma_separated_string[\\nL011,\\nL022,\\nL031,-expected1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/file_helpers_test.py::test__parser__helper_get_encoding[test/fixtures/linter/encoding-utf-8.sql-autodetect-ascii]",
        "status": "PASSED"
    },
    {
        "name": "test/core/file_helpers_test.py::test__parser__helper_get_encoding[test/fixtures/linter/encoding-utf-8-sig.sql-autodetect-UTF-8-SIG]",
        "status": "PASSED"
    },
    {
        "name": "test/core/file_helpers_test.py::test__parser__helper_get_encoding[test/fixtures/linter/encoding-utf-8.sql-utf-8-utf-8]",
        "status": "PASSED"
    },
    {
        "name": "test/core/file_helpers_test.py::test__parser__helper_get_encoding[test/fixtures/linter/encoding-utf-8-sig.sql-utf-8-utf-8]",
        "status": "PASSED"
    },
    {
        "name": "test/core/file_helpers_test.py::test__parser__helper_get_encoding[test/fixtures/linter/encoding-utf-8.sql-utf-8-sig-utf-8-sig]",
        "status": "PASSED"
    },
    {
        "name": "test/core/file_helpers_test.py::test__parser__helper_get_encoding[test/fixtures/linter/encoding-utf-8-sig.sql-utf-8-sig-utf-8-sig]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test__linter__path_from_paths__dir",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test__linter__path_from_paths__default",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test__linter__path_from_paths__exts",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test__linter__path_from_paths__file",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test__linter__path_from_paths__not_exist",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test__linter__path_from_paths__not_exist_ignore",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test__linter__path_from_paths__explicit_ignore",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test__linter__path_from_paths__dot",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test__linter__path_from_paths__ignore[test/fixtures/linter/sqlfluffignore]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test__linter__path_from_paths__ignore[test/fixtures/linter/sqlfluffignore/]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test__linter__path_from_paths__ignore[test/fixtures/linter/sqlfluffignore/.]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test__linter__lint_string_vs_file[test/fixtures/linter/indentation_errors.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test__linter__lint_string_vs_file[test/fixtures/linter/whitespace_errors.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test__linter__get_violations_filter_rules[None-7]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test__linter__get_violations_filter_rules[L010-2]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test__linter__get_violations_filter_rules[rules2-2]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test__linter__linting_result__sum_dicts",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test__linter__linting_result__combine_dicts",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test__linter__linting_result_check_tuples_by_path[False-list]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test__linter__linting_result_check_tuples_by_path[True-dict]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test__linter__linting_result_get_violations[1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test__linter__linting_result_get_violations[2]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test__linter__linting_parallel_thread[False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test__linter__linting_parallel_thread[True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test_lint_path_parallel_wrapper_exception",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test__linter__linting_unexpected_error_handled_gracefully",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test__linter__raises_malformed_noqa",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test__linter__empty_file",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test__linter__mask_templated_violations[True-check_tuples0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test__linter__mask_templated_violations[False-check_tuples1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test__linter__encoding[test/fixtures/linter/encoding-utf-8.sql-autodetect-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test__linter__encoding[test/fixtures/linter/encoding-utf-8-sig.sql-autodetect-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test__linter__encoding[test/fixtures/linter/encoding-utf-8.sql-utf-8-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test__linter__encoding[test/fixtures/linter/encoding-utf-8-sig.sql-utf-8-True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test__linter__encoding[test/fixtures/linter/encoding-utf-8.sql-utf-8-sig-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test__linter__encoding[test/fixtures/linter/encoding-utf-8-sig.sql-utf-8-sig-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test_parse_noqa[-None]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test_parse_noqa[noqa-expected1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test_parse_noqa[noqa?-SQLParseError]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test_parse_noqa[noqa:-expected3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test_parse_noqa[noqa:L001,L002-expected4]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test_parse_noqa[noqa: enable=L005-expected5]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test_parse_noqa[noqa: disable=L010-expected6]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test_parse_noqa[noqa: disable=all-expected7]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test_parse_noqa[noqa: disable-SQLParseError]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test_linted_file_ignore_masked_violations[1_violation_no_ignore]",
        "status": "FAILED"
    },
    {
        "name": "test/core/linter_test.py::test_linted_file_ignore_masked_violations[1_violation_ignore_specific_line]",
        "status": "FAILED"
    },
    {
        "name": "test/core/linter_test.py::test_linted_file_ignore_masked_violations[1_violation_ignore_different_specific_line]",
        "status": "FAILED"
    },
    {
        "name": "test/core/linter_test.py::test_linted_file_ignore_masked_violations[1_violation_ignore_different_specific_rule]",
        "status": "FAILED"
    },
    {
        "name": "test/core/linter_test.py::test_linted_file_ignore_masked_violations[1_violation_ignore_enable_this_range]",
        "status": "FAILED"
    },
    {
        "name": "test/core/linter_test.py::test_linted_file_ignore_masked_violations[1_violation_ignore_disable_this_range]",
        "status": "FAILED"
    },
    {
        "name": "test/core/linter_test.py::test_linted_file_ignore_masked_violations[1_violation_line_1_ignore_disable_specific_2_3]",
        "status": "FAILED"
    },
    {
        "name": "test/core/linter_test.py::test_linted_file_ignore_masked_violations[1_violation_line_2_ignore_disable_specific_2_3]",
        "status": "FAILED"
    },
    {
        "name": "test/core/linter_test.py::test_linted_file_ignore_masked_violations[1_violation_line_3_ignore_disable_specific_2_3]",
        "status": "FAILED"
    },
    {
        "name": "test/core/linter_test.py::test_linted_file_ignore_masked_violations[1_violation_line_4_ignore_disable_specific_2_3]",
        "status": "FAILED"
    },
    {
        "name": "test/core/linter_test.py::test_linted_file_ignore_masked_violations[1_violation_line_1_ignore_disable_all_2_3]",
        "status": "FAILED"
    },
    {
        "name": "test/core/linter_test.py::test_linted_file_ignore_masked_violations[1_violation_line_2_ignore_disable_all_2_3]",
        "status": "FAILED"
    },
    {
        "name": "test/core/linter_test.py::test_linted_file_ignore_masked_violations[1_violation_line_3_ignore_disable_all_2_3]",
        "status": "FAILED"
    },
    {
        "name": "test/core/linter_test.py::test_linted_file_ignore_masked_violations[1_violation_line_4_ignore_disable_all_2_3]",
        "status": "FAILED"
    },
    {
        "name": "test/core/linter_test.py::test_linted_file_ignore_masked_violations[4_violations_two_types_disable_specific_enable_all]",
        "status": "FAILED"
    },
    {
        "name": "test/core/linter_test.py::test_linted_file_ignore_masked_violations[4_violations_two_types_disable_all_enable_specific]",
        "status": "FAILED"
    },
    {
        "name": "test/core/linter_test.py::test_linter_noqa",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test_linter_noqa_with_templating",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test__linter__skip_dbt_model_disabled",
        "status": "FAILED"
    },
    {
        "name": "test/core/linter_test.py::test_delayed_exception",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter_test.py::test__attempt_to_change_templater_warning",
        "status": "PASSED"
    },
    {
        "name": "test/core/plugin_test.py::test__plugin_manager_registers_example_plugin",
        "status": "FAILED"
    },
    {
        "name": "test/core/plugin_test.py::test__plugin_example_rules_returned",
        "status": "FAILED"
    },
    {
        "name": "test/core/plugin_test.py::test__plugin_default_config_read",
        "status": "FAILED"
    },
    {
        "name": "test/core/string_helpers_test.py::test__parser__helper_findall[--positions0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/string_helpers_test.py::test__parser__helper_findall[a-a-positions1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/string_helpers_test.py::test__parser__helper_findall[foobar-o-positions2]",
        "status": "PASSED"
    },
    {
        "name": "test/core/string_helpers_test.py::test__parser__helper_findall[bar bar bar bar-bar-positions3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar__base__longest_trimmed_match__basic[seg_list_slice0-matcher_keywords0-False-result_slice0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar__base__longest_trimmed_match__basic[seg_list_slice1-matcher_keywords1-True-result_slice1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar__base__longest_trimmed_match__basic[seg_list_slice2-matcher_keywords2-False-None]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar__base__longest_trimmed_match__basic[seg_list_slice3-matcher_keywords3-True-result_slice3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar__base__longest_trimmed_match__adv",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar__base__look_ahead_match[seg_list_slice0-matcher_keywords0-result_slice0-bar-None]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar__base__look_ahead_match[seg_list_slice1-matcher_keywords1-result_slice1-foo-pre_match_slice1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar__base__ephemeral_segment",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar__oneof__ephemeral_segment",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar__base__bracket_sensitive_look_ahead_match",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar__base__bracket_fail_with_open_paren_close_square_mismatch",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar__base__bracket_fail_with_unexpected_end_bracket",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar__ref_eq",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar__oneof__copy",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar_oneof[True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar_oneof[False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar_oneof_templated",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar_oneof_exclude",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar_oneof_take_longest_match",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar_oneof_take_first",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar_startswith_a[baar-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar_startswith_a[bar-True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar_startswith_b[False-3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar_startswith_b[True-4]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar_sequence",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar_sequence_nested",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar_sequence_indent",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar_sequence_indent_conditional",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar_delimited[token_list0-None-True-False-5]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar_delimited[token_list1-None-True-False-6]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar_delimited[token_list2-None-True-False-0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar_delimited[token_list3-None-True-True-3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar_delimited[token_list4-0-True-False-5]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar_delimited[token_list5-0-False-False-1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar_delimited[token_list6-1-True-False-5]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar_delimited[token_list7-1-False-False-0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar_delimited[token_list8-None-True-False-3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar_delimited[token_list9-None-False-False-3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar_delimited[token_list10-1-True-False-3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar_delimited[token_list11-1-False-False-3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar_delimited[token_list12-1-False-False-3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar_delimited[token_list13-2-True-False-0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar_greedyuntil[foo-False-1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar_greedyuntil[bar-False-0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar_greedyuntil[baar-False-3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar_greedyuntil[baar-True-6]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar_greedyuntil_bracketed",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar_anything",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar_nothing",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar_test.py::test__parser__grammar_noncode",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/helpers_test.py::test__parser__helper_trim_non_code_segments[token_list0-0-3-0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/helpers_test.py::test__parser__helper_trim_non_code_segments[token_list1-0-3-0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/helpers_test.py::test__parser__helper_trim_non_code_segments[token_list2-0-0-0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/helpers_test.py::test__parser__helper_trim_non_code_segments[token_list3-3-3-3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/helpers_test.py::test__parser__helper_iter_indices[seq0-1-indices0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/helpers_test.py::test__parser__helper_iter_indices[seq1-2-indices1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/helpers_test.py::test__parser__helper_iter_indices[seq2-1-indices2]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/helpers_test.py::test__parser__helper_iter_indices[seq3-0-indices3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_obj[a b-res0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_obj[b.c-res1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_obj[abc \\n \\t def  ;blah-res2]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_obj[abc'\\n \"\\t' \"de`f\"-res3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_obj[abc -- comment \\nblah-res4]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_obj[abc # comment \\nblah-res5]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_obj[abc /* comment \\nblah*/-res6]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_obj[abc /*\\n\\t\\n*/-res7]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_obj[*-+bd/-res8]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_obj[2+4 -5-res9]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_obj[when 'Spec\\\\'s 23' like-res10]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_obj[when \"Spec\\\\\"s 23\" like-res11]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_string[.fsaljk-.]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_string[fsaljk-None]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_regex[fsaljk-f-f0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_regex[fsaljk-f-f1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_regex[fsaljk-[fas]*-fsa]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_regex[   \\t   fsaljk-[\\\\t ]*-   \\t   ]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_regex[   \\t \\n  fsaljk-[\\\\t ]*-   \\t ]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_regex['something boring'   \\t \\n  fsaljk-'[^']*'-'something boring']",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_regex[' something exciting \\t\\n '   \\t \\n  fsaljk-'[^']*'-' something exciting \\t\\n ']",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_lex_match",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_fail",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_fail_via_parse",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/markers_test.py::test_markers__infer_next_position[fsaljk-start_pos0-end_pos0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/markers_test.py::test_markers__infer_next_position[-start_pos1-end_pos1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/markers_test.py::test_markers__infer_next_position[\\n-start_pos2-end_pos2]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/markers_test.py::test_markers__infer_next_position[boo\\n-start_pos3-end_pos3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/markers_test.py::test_markers__infer_next_position[boo\\nfoo-start_pos4-end_pos4]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/markers_test.py::test_markers__infer_next_position[\\nfoo-start_pos5-end_pos5]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/markers_test.py::test_markers__setting_position_raw",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/markers_test.py::test_markers__setting_position_working",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/parse_test.py::test__parser__parse_match",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/parse_test.py::test__parser__parse_parse",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/parse_test.py::test__parser__parse_expand",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/segments_base_test.py::test__parser__base_segments_type",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/segments_base_test.py::test__parser__base_segments_raw",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/segments_base_test.py::test__parser__base_segments_base",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/segments_base_test.py::test__parser__base_segments_raw_compare",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/segments_base_test.py::test__parser__base_segments_base_compare",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/segments_base_test.py::test__parser__base_segments_file",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/segments_common_test.py::test__parser__core_keyword",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/segments_common_test.py::test__parser__core_ephemeral_segment",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/config_test.py::test__rules__user_rules",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/config_test.py::test__rules__runaway_fail_catch",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/config_test.py::test_rules_cannot_be_instantiated_without_declared_configs",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/config_test.py::test_rules_configs_are_dynamically_documented",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/config_test.py::test_rule_exception_is_caught_to_validation",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/config_test.py::test_std_rule_import_fail_bad_naming",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/config_test.py::test_rule_set_return_informative_error_when_rule_not_registered",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/docstring_test.py::test_content_count[\\n    | **Anti-pattern**-1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/docstring_test.py::test_content_count[\\n    | **Best practice**-1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/docstring_test.py::test_content_count[\\n    .. code-block:: sql\\n-2]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/docstring_test.py::test_keyword_anti_before_best",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__indices_of_newlines[-positions0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__indices_of_newlines[foo-positions1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__indices_of_newlines[foo\\nbar-positions2]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__indices_of_newlines[\\nfoo\\n\\nbar\\nfoo\\n\\nbar\\n-positions3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__templater_selection",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__templater_raw",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__templated_file_get_line_pos_of_char_pos[01234\\n6789{{foo}}fo\\nbarss-01234\\n6789x\\nfo\\nbarfss-file_slices0-0-1-1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__templated_file_get_line_pos_of_char_pos[01234\\n6789{{foo}}fo\\nbarss-01234\\n6789x\\nfo\\nbarfss-file_slices1-20-3-1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__templated_file_get_line_pos_of_char_pos[01234\\n6789{{foo}}fo\\nbarss-01234\\n6789x\\nfo\\nbarfss-file_slices2-24-3-5]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__templated_file_find_slice_indices_of_templated_pos[100-True-file_slices0-10-11]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__templated_file_find_slice_indices_of_templated_pos[13-True-file_slices1-0-3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__templated_file_find_slice_indices_of_templated_pos[28-True-file_slices2-2-5]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__templated_file_find_slice_indices_of_templated_pos[12-True-file_slices3-1-3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__templated_file_find_slice_indices_of_templated_pos[20-True-file_slices4-2-3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__templated_file_find_slice_indices_of_templated_pos[13-False-file_slices5-0-1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__templated_file_templated_slice_to_source_slice[in_slice0-out_slice0-True-file_slices0-raw_slices0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__templated_file_templated_slice_to_source_slice[in_slice1-out_slice1-True-file_slices1-raw_slices1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__templated_file_templated_slice_to_source_slice[in_slice2-out_slice2-True-file_slices2-raw_slices2]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__templated_file_templated_slice_to_source_slice[in_slice3-out_slice3-False-file_slices3-raw_slices3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__templated_file_templated_slice_to_source_slice[in_slice4-out_slice4-False-file_slices4-raw_slices4]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__templated_file_templated_slice_to_source_slice[in_slice5-out_slice5-True-file_slices5-raw_slices5]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__templated_file_templated_slice_to_source_slice[in_slice6-out_slice6-True-file_slices6-raw_slices6]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__templated_file_templated_slice_to_source_slice[in_slice7-out_slice7-True-file_slices7-raw_slices7]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__templated_file_templated_slice_to_source_slice[in_slice8-out_slice8-True-file_slices8-raw_slices8]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__templated_file_templated_slice_to_source_slice[in_slice9-out_slice9-True-file_slices9-raw_slices9]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__templated_file_templated_slice_to_source_slice[in_slice10-out_slice10-True-file_slices10-raw_slices10]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__templated_file_templated_slice_to_source_slice[in_slice11-out_slice11-False-file_slices11-raw_slices11]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__templated_file_source_only_slices",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/dbt_test.py::test__templater_dbt_missing",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/dbt_test.py::test__templater_dbt_profiles_dir_expanded",
        "status": "FAILED"
    },
    {
        "name": "test/core/templaters/dbt_test.py::test__templater_dbt_templating_result[use_dbt_utils.sql]",
        "status": "FAILED"
    },
    {
        "name": "test/core/templaters/dbt_test.py::test__templater_dbt_templating_result[macro_in_macro.sql]",
        "status": "FAILED"
    },
    {
        "name": "test/core/templaters/dbt_test.py::test__templater_dbt_templating_result[use_headers.sql]",
        "status": "FAILED"
    },
    {
        "name": "test/core/templaters/dbt_test.py::test__templater_dbt_templating_result[use_var.sql]",
        "status": "FAILED"
    },
    {
        "name": "test/core/templaters/dbt_test.py::test__templater_dbt_slice_file_wrapped_test[select * from a-\\nwith dbt__CTE__INTERNAL_test as (\\nselect * from a\\n)select count(*) from dbt__CTE__INTERNAL_test\\n-result0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/dbt_test.py::test__templater_dbt_templating_test_lex[tests/test.sql]",
        "status": "FAILED"
    },
    {
        "name": "test/core/templaters/dbt_test.py::test__templater_dbt_templating_test_lex[models/my_new_project/single_trailing_newline.sql]",
        "status": "FAILED"
    },
    {
        "name": "test/core/templaters/dbt_test.py::test__templater_dbt_templating_test_lex[models/my_new_project/multiple_trailing_newline.sql]",
        "status": "FAILED"
    },
    {
        "name": "test/core/templaters/dbt_test.py::test__templater_dbt_skips_disabled_model",
        "status": "FAILED"
    },
    {
        "name": "test/core/templaters/dbt_test.py::test__dbt_templated_models_do_not_raise_lint_error[use_var.sql]",
        "status": "FAILED"
    },
    {
        "name": "test/core/templaters/dbt_test.py::test__dbt_templated_models_do_not_raise_lint_error[incremental.sql]",
        "status": "FAILED"
    },
    {
        "name": "test/core/templaters/dbt_test.py::test__dbt_templated_models_do_not_raise_lint_error[single_trailing_newline.sql]",
        "status": "FAILED"
    },
    {
        "name": "test/core/templaters/dbt_test.py::test__dbt_templated_models_do_not_raise_lint_error[multiple_trailing_newline.sql]",
        "status": "FAILED"
    },
    {
        "name": "test/core/templaters/dbt_test.py::test__dbt_templated_models_do_not_raise_lint_error[L034_test.sql]",
        "status": "FAILED"
    },
    {
        "name": "test/core/templaters/dbt_test.py::test__templater_dbt_templating_absolute_path",
        "status": "FAILED"
    },
    {
        "name": "test/core/templaters/dbt_test.py::test__templater_dbt_handle_exceptions[compiler_error.sql-dbt compilation error on file 'models/my_new_project/compiler_error.sql', Unexpected end of template. Jinja was looking for the following tags: 'endfor']",
        "status": "FAILED"
    },
    {
        "name": "test/core/templaters/dbt_test.py::test__templater_dbt_handle_exceptions[exception_connect_database.sql-dbt tried to connect to the database]",
        "status": "FAILED"
    },
    {
        "name": "test/core/templaters/dbt_test.py::test__project_dir_does_not_exist_error",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja[simple]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja[unboundlocal_bugfix]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_error_variable",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_error_syntax",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_error_catatrophic",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_a/jinja-True-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_b/jinja-False-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_c_dbt/dbt_builtins-True-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_c_dbt/var_default-True-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_e/jinja-True-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_f/jinja-True-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_g_macros/jinja-True-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_h_macros/jinja-True-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_i_raw/raw_tag-True-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_i_raw/raw_tag_2-True-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_j_libraries/jinja-True-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_k_config_override_path_macros/jinja-True-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_l_metas/001-False-True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_l_metas/002-False-True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_template[-result0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_template[foo-result1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_template[foo {{bar}} z -result2]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_template[SELECT {# A comment #} {{field}} {% for i in [1, 3]%}, fld_{{i}}{% endfor %} FROM my_schema.{{my_table}} -result3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_template[{% set thing %}FOO{% endset %} BAR-result4]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_file[--result0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_file[foo-foo-result1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_file[SELECT {{blah}}, boo {# comment #} from something-SELECT foobar, boo  from something-result2]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_file[SELECT {# A comment #} {{field}} {% for i in [1, 3, 7]%}, fld_{{i}}_x{% endfor %} FROM my_schema.{{my_table}} -SELECT  foobar , fld_1_x, fld_3_x, fld_7_x FROM my_schema.barfoo -result3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_file[SELECT {# A comment #} {{field}} {% for i in [1, 3, 7]%}, fld_{{i}}{% endfor %} FROM my_schema.{{my_table}} -SELECT  foobar , fld_1, fld_3, fld_7 FROM my_schema.barfoo -result4]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_file[{{ config(materialized='view') }}\\n\\nSELECT 1 FROM {{ source('finance', 'reconciled_cash_facts') }}\\n\\n-\\n\\nSELECT 1 FROM finance_reconciled_cash_facts\\n\\n-result5]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_file[SELECT\\n    {% for i in [1, 2, 3] %}\\n        , c_{{i}}+42 AS the_meaning_of_li{{ 'f' * i }}\\n    {% endfor %}\\nFROM my_table-SELECT\\n    \\n        , c_1+42 AS the_meaning_of_lif\\n    \\n        , c_2+42 AS the_meaning_of_liff\\n    \\n        , c_3+42 AS the_meaning_of_lifff\\n    \\nFROM my_table-result6]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_file[SELECT {{blah}} FROM something-WITH wrap AS (SELECT nothing FROM something) SELECT * FROM wrap-result7]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_file[{% set thing %}FOO{% endset %} SELECT 1- SELECT 1-result8]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_error",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_intermediate__trim[int_slice0-foo-head_test0-tail_test0-int_test0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_intermediate__trim[int_slice1-foo-head_test1-tail_test1-int_test1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_intermediate__trim[int_slice2-foo1bar-head_test2-tail_test2-int_test2]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_intermediate__trim[int_slice3-foofoofoobarfoofoobarbar-head_test3-tail_test3-int_test3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_substring_occurances[-substrings0-positions0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_substring_occurances[a-substrings1-positions1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_substring_occurances[foobar-substrings2-positions2]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_substring_occurances[bar foo bar foo-substrings3-positions3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_sorted_occurance_tuples[test0-result0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_sorted_occurance_tuples[test1-result1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_sorted_occurance_tuples[test2-result2]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_slice_template[-result0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_slice_template[foo-result1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_slice_template[foo {bar} z {{ y-result2]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_split_invariants[raw_sliced0-literals0-raw_occurances0-templated_occurances0-0-result0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_split_invariants[raw_sliced1-literals1-raw_occurances1-templated_occurances1-3-result1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_split_uniques_coalesce_rest[split_file0-raw_occurances0-templated_occurances0--result0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_split_uniques_coalesce_rest[split_file1-raw_occurances1-templated_occurances1-foo-result1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_split_uniques_coalesce_rest[split_file2-raw_occurances2-templated_occurances2-SELECT nothing, 435.24 as foo, spam, '{}' as convertable from something-result2]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_split_uniques_coalesce_rest[split_file3-raw_occurances3-templated_occurances3-foo , bar-result3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_slice_file[--True-result0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_slice_file[foo-foo-True-result1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_slice_file[SELECT {blah}, {foo:.2f} as foo, {bar}, '{{}}' as convertable from something-SELECT nothing, 435.24 as foo, spam, '{}' as convertable from something-True-result2]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_slice_file[SELECT {blah} FROM something-WITH wrap AS (SELECT nothing FROM something) SELECT * FROM wrap-True-result3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_slice_file[SELECT {blah} FROM something-WITH wrap AS (SELECT nothing FROM something) SELECT * FROM wrap-False-result4]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi__file_lex[a b-res0]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi__file_lex[b.c-res1]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi__file_lex[abc \\n \\t def  ;blah-res2]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectKeywordSegment-select]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[NakedIdentifierSegment-online_sales]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[BareFunctionSegment-current_timestamp]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[FunctionSegment-current_timestamp()]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[NumericLiteralSegment-1000.0]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ExpressionSegment-online_sales / 1000.0]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[IntervalExpressionSegment-INTERVAL 1 YEAR]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ExpressionSegment-CASE WHEN id = 1 THEN 'nothing' ELSE 'test' END]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ExpressionSegment-CASE WHEN id = 1 THEN CASE WHEN true THEN 'something' ELSE 'nothing' END ELSE 'test' END]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ExpressionSegment-CAST(ROUND(online_sales / 1000.0) AS varchar)]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ExpressionSegment-name NOT LIKE '%y']",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-MIN (test.id) AS min_test_id]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ExpressionSegment-DATE_ADD(CURRENT_DATE('America/New_York'), INTERVAL 1 year)]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ExpressionSegment-my_array[1]]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ExpressionSegment-my_array[OFFSET(1)]]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ExpressionSegment-my_array[5:8]]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ExpressionSegment-4 + my_array[OFFSET(1)]]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ExpressionSegment-bits[OFFSET(0)] + 7]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-(count_18_24 * bits[OFFSET(0)]) / audience_size AS relative_abundance]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ExpressionSegment-count_18_24 * bits[OFFSET(0)] + count_25_34]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-(count_18_24 * bits[OFFSET(0)] + count_25_34) / audience_size AS relative_abundance]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectStatementSegment-SELECT t.val/t.id FROM test WHERE id*1.0/id > 0.8]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-t.val/t.id]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-CAST(num AS INT64)]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-CAST(num AS numeric(8,4))]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-a.*]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-a.b.*]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-a.b.c.*]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ObjectReferenceSegment-a..c.*]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment--some_variable]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-- some_variable]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ExpressionSegment-concat(left(uaid, 2), '|', right(concat('0000000', SPLIT_PART(uaid, '|', 4)), 10), '|', '00000000')]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ExpressionSegment-c is null]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ExpressionSegment-c is not null]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-c is null as c_isnull]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-c is not null as c_notnull]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ExpressionSegment-NULL::INT]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-NULL::INT AS user_id]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[TruncateStatementSegment-TRUNCATE TABLE test]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[TruncateStatementSegment-TRUNCATE test]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_not_match[ObjectReferenceSegment-\\n     ]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_not_parse[SELECT 1 + (2 -err_locations0]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_not_parse[SELECT * FROM a ORDER BY 1 UNION SELECT * FROM b-err_locations1]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_not_parse[SELECT * FROM a LIMIT 1 UNION SELECT * FROM b-err_locations2]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_not_parse[SELECT * FROM a ORDER BY 1 LIMIT 1 UNION SELECT * FROM b-err_locations3]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_is_whitespace",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_parse_indented_joins[select field_1 from my_table as alias_1-True-meta_loc0]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_parse_indented_joins[select field_1 from my_table as alias_1-False-meta_loc1]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_parse_indented_joins[select field_1 from my_table as alias_1 join foo using (field_1)-True-meta_loc2]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_parse_indented_joins[select field_1 from my_table as alias_1 join foo using (field_1)-False-meta_loc3]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/bigquery_test.py::test_bigquery_relational_operator_parsing",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-update.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-truncate_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_where_in_unnest.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_table_a_pk_unique_fk_constraints.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_simple_j.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_union_distinct.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_h.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_p.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_named_window.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-arithmetic_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-rollback_work.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-transactions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_database_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-functions_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_with_b.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-set_order_by_complex.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_schema_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-commit_and_no_chain.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-double_dot.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_g.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_union.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_c.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_b.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-rollback_work_and_no_chain.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-set_order_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-bracket_in_comment.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_table_as.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_s.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_function_no_args.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-delete_from.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_with_offset_limit.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-drop_index_simple.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-grant_all_on_mytable_to_role.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_multiple_named_windows.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-grant_select_col1_col2_update_col1_on_mytable_to_public.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-drop_table_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_n.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_u.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-rollback.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_numeric_literal_exponential_format.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-comments.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_r.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-grant_update_on_all_tables_in_schema_a_to_public.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_case_b.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-grant_select_on_mytable_to_public.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-commit_work_and_no_chain.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-commit_work.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_index_simple.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_trailing_comma_column_list.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_view_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-update_with_from_clause.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-functions_b.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-drop_model.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_table_table_comment.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-empty_file.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-drop_view_a_cascade.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_with_limit_and_offset.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_cross_join.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_in_multiline_comment.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_v.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_l.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-grant_all_privileges_on_mytable_to_role.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_with_recursive.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_simple_i.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-multi_statement_c.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-like_operators.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-describe_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-drop_view_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_simple_b.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_a_and_not_b.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-truncate_table_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_table_varchar.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_table_as_select_cte_parentheses.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-drop_index_if_exists.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_simple_g.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_j.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_f.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-drop_view_a_restrict.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_function_in_group_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_table_column_comment.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-drop_table_a_restrict.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_d.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_with_simple_limit.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_database_if_not_exists.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-alter_table_rename_to.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_zero_argument_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_t.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_table_a_c1_c2.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_simple_e.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_with_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-rollback_and_no_chain.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_m.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_o.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-drop_table_a_cascade.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-expression_recursion.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-escaped_quotes.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-escape.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_q.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_simple_d.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_overlaps.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_true_and_not_false.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_table_as_select_cte_no_parentheses.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-shorthand_cast.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_named_window_no_parentheses.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-expression_recursion_2.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-multi_statement_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_from_where_overlaps.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_named_window_with_parentheses.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_sequence.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-multi_statement_b.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_e.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-insert_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_index_if_not_exists.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-with_no_schema_binding.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-update_with_table_alias.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_many_join.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_schema_if_not_exists.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_table_default_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_table_a_column_constraints.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_bitwise_operators.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_fn_square_bracket_array_parameter.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-alter_sequence.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_simple_f.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-table_expression.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_right.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-revoke_select_on_table_a_from_group_b.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-grant_all_on_table_mytable_to_role.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-drop_sequence.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-grant_select_update_insert_on_mytable_to_public.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-drop_schema_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-modulo.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_case_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_named_windows_each_window_specification.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-drop_table_if_exists_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_table_auto_increment.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_simple_h.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_union_all.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_simple_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-commit.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_role.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-grant_select_on_mytable_to_public_with_grant_option.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_table_column_constraint.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_model_options.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-set_schema_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_simple_c.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_1_lt_0.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_case.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_where_array_element_less_than.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_quoting.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_function_object_fields.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_udf_quote_project_and_datasetfunctionname.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_udf_quote_project_name.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-array_agg_ignore_nulls.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_except_replace.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_except.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_interval_expression.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-set_variable_single.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-create_js_function_underscore_name.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_where_greater_than.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-create_table_options_as.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-create_function_no_args.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-create_table_partition_by_cluster_by_as.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_multi_except.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-create_js_function_complex_types.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_with_date_literal_coercion_and_two_part_string_interval.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-array_agg_distinct_ignore_nulls.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_ml_predict_with_select.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-array_agg_respect_nulls.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-bigquery_parameters.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_example.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_less_than_greater_than.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_for_system_time.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-create_or_replace_table_options_as.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_with_offset_3.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_with_offset_2.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-declare_variable_with_default.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-create_temp_function_with_select.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_for_system_time_2.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-interval_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_with_union_and_qualify.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_struct.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_where_less_than.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_with_qualify.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_mixture_of_array_literals.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_datetime.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_udf_quote_everything.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_function_with_named_arguments.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_1_gt_0.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_with_offset.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_gt_lt.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-create_js_function_simple.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_ml_weights.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_typeless_struct_inside_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-create_table_columns_partition_options.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_function_parameter_order_by_multiple_columns.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_replace.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-declare_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-create_js_function_options_library_array.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-create_js_function_deterministic.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_udf_quote_nothing.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-create_or_replace_sql_function_any_type.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-set_variable_multiple.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_lt_gt.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_hyphenated_table_name_in_from.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-string_literals.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-create_table_partition_by_as.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_empty_array_literal.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_replace_2.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-create_js_function_quoted_name.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-create_table_with_sequence_bracketed.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-functions_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-create_table_as_select.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-create_table_with_sequence.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-create_view_with_cte.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-create_view_with_set_statements.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-create_table_with_distribution.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-multi_statement_without_semicolon.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-create_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-cte_s.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-stored_procedure_single_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-create_view_with_unpivot.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-create_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-create_view_with_pivot.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-sequence.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-add_index.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-minimal_function_no_alter.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-alter_table_switch.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-minimal_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-insert_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-function_with_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-stored_procedure_simple.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_alter_task_unset_simple.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_alter_task_modify_as.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_create_database.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_alter_table_column.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_grant_revoke.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_semi_structured_2.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_alter_task_resume.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_alter_user_set_values.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_call_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_alter_user_reset_password.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_explain.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-multiple_shorthand_casts.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_alter_task_modify_when.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_describe_user.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_secure_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_lateral_flatten_after_join.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_alter_user_unset_values.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_json_underscore_key.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_alter_user_delegate_auth_role.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_alter_task_suspend.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_semi_structured.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_copy_into.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_alter_task_remove_after.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_use.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_col_position.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_sample.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_alter_task_set_simple.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_view_comment.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_escape.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_alter_task_set_special_full.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_qualify.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_merge_into.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_pivot.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_alter_session_set_timezone.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_select_transient_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_alter_task_unset_full.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_within_group.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_select_grouping_sets.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_create_role.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_window_function_ignore_nulls.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_delete.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_alter_user_remove_delegate_auth.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_create_pipe.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_alter_user_abort_query.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_semi_structured_3.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_alter_user_delegate_auth.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_alter_task_if_exists_resume.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_alter_task_set_special_simple.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_first_value_ignore_nulls.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_set_command.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_alter_task_add_after.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_create_table_comments.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_string_literal.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_alter_user_rename.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_qualify_union.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_secure_view_comment.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_alter_session_unset_parameters.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_alter_task_set_full.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_create_schema.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-snowflake_create_masking_policy.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-declare_default_quotedliteral.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-use_key.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-handler_sqlstate_value.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-ignore_key.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-loop_label.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-set_session_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-get_diagnostics_condition_session_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-resignal_set_signal_info.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-drop_procedure.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-prepare_session_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-declare_condition.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-if_multiple_expression.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-use_index_for_join.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_into_outfile_lines_starting.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-function_no_sql.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-if_session_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-execute_prepared_stmt.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-delimiter_procedure.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_for_update.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-declare_cursor.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-function_sql_security_invoker.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-procedure_in_param.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-close_qualified.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-function_sql_security_definer.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-signal_condition_sqlstate_value.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-function_definer.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-force_index_left_join.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-ignore_index_for_group_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-create_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_into_outfile_fields_escaped.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-execute_prepared_stmt_using_multiple_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-use_index_for_order_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-call_statement_multiple_param.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_sql_buffer_result.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_for_update_of_multiple.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-procedure_inout_param.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-use_index.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-get_diagnostics_condition_local_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_into_outfile.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-explain.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-delimiter_select.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-call_statement_quoted.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-force_index_for_order_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_into_outfile_fields_terminated.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-open_qualified.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_local_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-handler_error_code.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-drop_prepare.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_for_update_skip_locked.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-call_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-if_subquery_expression.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-signal_set_signal_info_multiple.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-set_session_variable_expression.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-if_nested.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-prepare_local_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-function_notdeterministic.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-signal.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-loop_no_label.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-execute_prepared_stmt_using.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-force_index.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-fetch_session_multiple.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-declare_exit_handler_sqlexception.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_sql_calc_found_rows.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-handler_not_found.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-signal_condition_name.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-repeat_no_label.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-while_label.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_into_outfile_fields_optionally_enclosed.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-get_diagnostics_condition_info_multiple_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-resignal_condition_name.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_for_update_nowait.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-force_key.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_into_session_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-resignal.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-declare_continue_handler_sqlexception.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-get_diagnostics_condition_info_session_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-force_index_for_group_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-begin.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-drop_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_sql_cache.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-fetch.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-get_diagnostics_condition_info_local_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_sql_no_cache.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_straight_join.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_for_update_lock_in_share_mode.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_lock_in_share_mode.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-if.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-signal_condition_sqlstate.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-delimiter_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-handler_condition_name.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-if_else.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-procedure_out_param.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-function_modifies_sql.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_into_multiple_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_for_share.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-ignore_index.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_into_outfile_lines_terminated.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-function_comment.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-resignal_set_signal_info_multiple.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-get_diagnostics_condition_numeric.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-declare_undo_handler_sqlexception.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_sql_small_result.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-fetch_next_from.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-force_index_for_join.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_multiple_partition.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-get_diagnostics_row_count.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-function_reads_sql.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-use_database.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_partition.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-use_index_for_group_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-resignal_condition_sqlstate_value.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-get_diagnostics_number.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_into_outfile_fields_enclosed.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-repeat_label.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-fetch_from.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-close.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-alter_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-procedure_definer.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-repeat_multiple_statements.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_distinctrow.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-fetch_multiple.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_high_priority.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-handler_sqlwarning.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_session_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-declare_default_numeric.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-ignore_index_for_join.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_sql_big_result.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-handler_sqlstate.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-ignore_index_for_order_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-if_elseif.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_into_dumpfile.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-resignal_condition_sqlstate.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-call_statement_function_param.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-while_no_label.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-nested_begin.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-loop_multiple_statements.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-call_statement_no_param.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-fetch_session.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-declare_local_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-open.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_for_update_of.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-deallocate_prepare.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-prepare_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-signal_set_signal_info.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-DropConsumerGroup.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-CreateViewStatement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-CommentStatement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-AlterSchemaStatement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-AlterUser.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-RecompressStatement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-DataTypeTest.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-AlterConsumerGroup.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-DropCascadeStatement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-CreateTableStatement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-AlterVirtualSchemaStatement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-ImportStatement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-AlterTableDistributePartition.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-ExportStatement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-AccessStatement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-DropStatement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-Add_Days.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-FlushStatistics.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-AlterTableColumn.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-RenameStatement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-ExplainVirtual.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-CreateUser.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-TruncateStatement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-SelectStatement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-AlterSession.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-DeleteStatement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-OpenCloseSchema.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-AlterRole.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-AlterTableConstraint.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-AlterSystem.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-MergeStatement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-CreateVirtualSchemaStatement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-PreloadStatement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-CreateConsumerGroup.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-UpdateStatement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-ExecuteScript.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-DropTableStatement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-AlterConnection.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-CreateRole.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-CreateConnection.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-DropSchemaStatement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-InsertStatement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-CreateSchema.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-KillStatement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-DropCascadeRestrictStatement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[teradata-create_table_stmt_4.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[teradata-create_table_stmt_2.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[teradata-select_stmt.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[teradata-qualify_expression_union.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[teradata-qualify_expression.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[teradata-create_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[teradata-update_from.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[teradata-select_stmt_normalize.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[teradata-collect_stats_2.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[teradata-create_table_stmt_3.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[teradata-qualify_over.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[teradata-create_table_stmt.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[teradata-comment_on_table_stmt.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[teradata-collect_stats.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[teradata-select_stmt_cast.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[teradata-comment_on_column_stmt.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[teradata-bteq_stmt.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-postgres_select_frame_clause.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-postgres_create_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-postgres_drop_sequence.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-postgres_create_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-postgres_within_group.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-postgres_create_sequence.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-postgres_create_role.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-postgres_unicode_single_quote.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-postgres_single_quote.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-postgres_psql_meta_command.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-postgres_null_filters.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-postgres_create_extension.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-postgres_alter_default_privileges.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-postgres_filter.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-postgres_create_index.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-postgres_create_type.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-postgres_escape.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-postgres_alter_sequence.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-postgres_explain.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-postgres_join_no_space.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-postgres_alter_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-postgres_select.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-postgres_analyze.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-postgres_create_dollar_quoted_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-postgres_comment_on.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-postgres_unicode_double_quote.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-postgres_grant_privileges.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-postgres_create_zero_argument_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-create_table_external_partitioned.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-drop_database.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-create_table_like.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-create_table_as_select.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-create_table_temporary_properties.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-drop_schema.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-alter_schema.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-create_database.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-create_schema.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-create_table_clustered_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-truncate_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-create_table_constraints.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-create_table_row_format_serde.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-create_table_row_format_delimited.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-create_table_datatypes.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-drop_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-use.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-alter_database.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-create_table_skewed_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sqlite-create_table_constraint_regexp.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol_fs-CreateFunctionStatement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol_fs-CreateScriptingLuaScriptStatement1.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol_fs-CreateAdapterScriptStatement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol_fs-create_script.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol_fs-CreateUDFScriptStatement5.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol_fs-CreateUDFScriptStatement2.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol_fs-CreateUDFScriptStatement3.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol_fs-CreateUDFScriptStatement1.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol_fs-CreateScriptingLuaScriptStatement3.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol_fs-CreateUDFScriptStatement4.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol_fs-CreateScriptingLuaScriptStatement2.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-update.sql-True-update.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-truncate_a.sql-True-truncate_a.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_where_in_unnest.sql-True-select_where_in_unnest.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_table_a_pk_unique_fk_constraints.sql-True-create_table_a_pk_unique_fk_constraints.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_simple_j.sql-True-select_simple_j.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_union_distinct.sql-True-select_union_distinct.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_h.sql-True-select_h.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_p.sql-True-select_p.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_named_window.sql-True-select_named_window.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-arithmetic_a.sql-True-arithmetic_a.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-rollback_work.sql-True-rollback_work.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-transactions.sql-True-transactions.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_database_a.sql-True-create_database_a.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-functions_a.sql-True-functions_a.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_with_b.sql-True-select_with_b.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-set_order_by_complex.sql-True-set_order_by_complex.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_schema_a.sql-True-create_schema_a.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-commit_and_no_chain.sql-True-commit_and_no_chain.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-double_dot.sql-True-double_dot.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_g.sql-True-select_g.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_union.sql-True-select_union.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_c.sql-True-select_c.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_b.sql-True-select_b.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-rollback_work_and_no_chain.sql-True-rollback_work_and_no_chain.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-set_order_by.sql-True-set_order_by.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-bracket_in_comment.sql-True-bracket_in_comment.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_table_as.sql-True-create_table_as.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_s.sql-True-select_s.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_function_no_args.sql-True-create_function_no_args.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-delete_from.sql-True-delete_from.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_with_offset_limit.sql-True-select_with_offset_limit.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-drop_index_simple.sql-True-drop_index_simple.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-grant_all_on_mytable_to_role.sql-True-grant_all_on_mytable_to_role.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_multiple_named_windows.sql-True-select_multiple_named_windows.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-grant_select_col1_col2_update_col1_on_mytable_to_public.sql-True-grant_select_col1_col2_update_col1_on_mytable_to_public.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-drop_table_a.sql-True-drop_table_a.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_n.sql-True-select_n.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_u.sql-True-select_u.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-rollback.sql-True-rollback.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_numeric_literal_exponential_format.sql-True-select_numeric_literal_exponential_format.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-comments.sql-True-comments.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_r.sql-True-select_r.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-grant_update_on_all_tables_in_schema_a_to_public.sql-True-grant_update_on_all_tables_in_schema_a_to_public.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_case_b.sql-True-select_case_b.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-grant_select_on_mytable_to_public.sql-True-grant_select_on_mytable_to_public.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-commit_work_and_no_chain.sql-True-commit_work_and_no_chain.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-commit_work.sql-True-commit_work.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_index_simple.sql-True-create_index_simple.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_trailing_comma_column_list.sql-True-select_trailing_comma_column_list.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_view_a.sql-True-create_view_a.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-update_with_from_clause.sql-True-update_with_from_clause.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-functions_b.sql-True-functions_b.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-drop_model.sql-True-drop_model.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_table_table_comment.sql-True-create_table_table_comment.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-empty_file.sql-True-empty_file.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-drop_view_a_cascade.sql-True-drop_view_a_cascade.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_with_limit_and_offset.sql-True-select_with_limit_and_offset.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_cross_join.sql-True-select_cross_join.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_in_multiline_comment.sql-True-select_in_multiline_comment.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_v.sql-True-select_v.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_l.sql-True-select_l.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-grant_all_privileges_on_mytable_to_role.sql-True-grant_all_privileges_on_mytable_to_role.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_with_recursive.sql-True-select_with_recursive.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_simple_i.sql-True-select_simple_i.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-multi_statement_c.sql-True-multi_statement_c.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-like_operators.sql-True-like_operators.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-describe_table.sql-True-describe_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-drop_view_a.sql-True-drop_view_a.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_simple_b.sql-True-select_simple_b.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_a_and_not_b.sql-True-select_a_and_not_b.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-truncate_table_a.sql-True-truncate_table_a.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_table_varchar.sql-True-create_table_varchar.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_table_as_select_cte_parentheses.sql-True-create_table_as_select_cte_parentheses.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-drop_index_if_exists.sql-True-drop_index_if_exists.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_simple_g.sql-True-select_simple_g.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_j.sql-True-select_j.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_f.sql-True-select_f.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-drop_view_a_restrict.sql-True-drop_view_a_restrict.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_function_in_group_by.sql-True-select_function_in_group_by.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_table_column_comment.sql-True-create_table_column_comment.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-drop_table_a_restrict.sql-True-drop_table_a_restrict.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_d.sql-True-select_d.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_with_simple_limit.sql-True-select_with_simple_limit.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_database_if_not_exists.sql-True-create_database_if_not_exists.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-alter_table_rename_to.sql-True-alter_table_rename_to.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_zero_argument_function.sql-True-create_zero_argument_function.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_t.sql-True-select_t.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_table_a_c1_c2.sql-True-create_table_a_c1_c2.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_simple_e.sql-True-select_simple_e.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_with_a.sql-True-select_with_a.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-rollback_and_no_chain.sql-True-rollback_and_no_chain.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_m.sql-True-select_m.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_o.sql-True-select_o.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-drop_table_a_cascade.sql-True-drop_table_a_cascade.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-expression_recursion.sql-True-expression_recursion.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-escaped_quotes.sql-True-escaped_quotes.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-escape.sql-True-escape.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_q.sql-True-select_q.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_simple_d.sql-True-select_simple_d.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_overlaps.sql-True-select_overlaps.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_true_and_not_false.sql-True-select_true_and_not_false.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_table_as_select_cte_no_parentheses.sql-True-create_table_as_select_cte_no_parentheses.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-shorthand_cast.sql-True-shorthand_cast.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_named_window_no_parentheses.sql-True-select_named_window_no_parentheses.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-expression_recursion_2.sql-True-expression_recursion_2.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-multi_statement_a.sql-True-multi_statement_a.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_from_where_overlaps.sql-True-select_from_where_overlaps.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_named_window_with_parentheses.sql-True-select_named_window_with_parentheses.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_a.sql-True-select_a.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_sequence.sql-True-create_sequence.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-multi_statement_b.sql-True-multi_statement_b.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_e.sql-True-select_e.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-insert_a.sql-True-insert_a.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_index_if_not_exists.sql-True-create_index_if_not_exists.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_function.sql-True-create_function.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-with_no_schema_binding.sql-True-with_no_schema_binding.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-update_with_table_alias.sql-True-update_with_table_alias.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_many_join.sql-True-select_many_join.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_schema_if_not_exists.sql-True-create_schema_if_not_exists.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_table_default_function.sql-True-create_table_default_function.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_table_a_column_constraints.sql-True-create_table_a_column_constraints.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_bitwise_operators.sql-True-select_bitwise_operators.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_fn_square_bracket_array_parameter.sql-True-select_fn_square_bracket_array_parameter.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-alter_sequence.sql-True-alter_sequence.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_simple_f.sql-True-select_simple_f.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-table_expression.sql-True-table_expression.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_right.sql-True-select_right.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-revoke_select_on_table_a_from_group_b.sql-True-revoke_select_on_table_a_from_group_b.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-grant_all_on_table_mytable_to_role.sql-True-grant_all_on_table_mytable_to_role.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-drop_sequence.sql-True-drop_sequence.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-grant_select_update_insert_on_mytable_to_public.sql-True-grant_select_update_insert_on_mytable_to_public.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-drop_schema_a.sql-True-drop_schema_a.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-modulo.sql-True-modulo.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_case_a.sql-True-select_case_a.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_named_windows_each_window_specification.sql-True-select_named_windows_each_window_specification.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-drop_table_if_exists_a.sql-True-drop_table_if_exists_a.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_table_auto_increment.sql-True-create_table_auto_increment.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_simple_h.sql-True-select_simple_h.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_union_all.sql-True-select_union_all.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_simple_a.sql-True-select_simple_a.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-commit.sql-True-commit.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_role.sql-True-create_role.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-grant_select_on_mytable_to_public_with_grant_option.sql-True-grant_select_on_mytable_to_public_with_grant_option.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_table_column_constraint.sql-True-create_table_column_constraint.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_model_options.sql-True-create_model_options.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-set_schema_a.sql-True-set_schema_a.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_simple_c.sql-True-select_simple_c.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_1_lt_0.sql-True-select_1_lt_0.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_case.sql-True-select_case.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_where_array_element_less_than.sql-True-select_where_array_element_less_than.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_quoting.sql-True-select_quoting.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_function_object_fields.sql-True-select_function_object_fields.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_udf_quote_project_and_datasetfunctionname.sql-True-select_udf_quote_project_and_datasetfunctionname.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_udf_quote_project_name.sql-True-select_udf_quote_project_name.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-array_agg_ignore_nulls.sql-True-array_agg_ignore_nulls.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_except_replace.sql-True-select_except_replace.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_except.sql-True-select_except.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_interval_expression.sql-True-select_interval_expression.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-set_variable_single.sql-True-set_variable_single.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-create_js_function_underscore_name.sql-True-create_js_function_underscore_name.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_where_greater_than.sql-True-select_where_greater_than.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-create_table_options_as.sql-True-create_table_options_as.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-create_function_no_args.sql-True-create_function_no_args.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-create_table_partition_by_cluster_by_as.sql-True-create_table_partition_by_cluster_by_as.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_multi_except.sql-True-select_multi_except.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-create_js_function_complex_types.sql-True-create_js_function_complex_types.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_with_date_literal_coercion_and_two_part_string_interval.sql-True-select_with_date_literal_coercion_and_two_part_string_interval.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-array_agg_distinct_ignore_nulls.sql-True-array_agg_distinct_ignore_nulls.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_ml_predict_with_select.sql-True-select_ml_predict_with_select.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-array_agg_respect_nulls.sql-True-array_agg_respect_nulls.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-bigquery_parameters.sql-True-bigquery_parameters.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_example.sql-True-select_example.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_less_than_greater_than.sql-True-select_less_than_greater_than.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_for_system_time.sql-True-select_for_system_time.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-create_or_replace_table_options_as.sql-True-create_or_replace_table_options_as.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_with_offset_3.sql-True-select_with_offset_3.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_with_offset_2.sql-True-select_with_offset_2.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-declare_variable_with_default.sql-True-declare_variable_with_default.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-create_temp_function_with_select.sql-True-create_temp_function_with_select.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_for_system_time_2.sql-True-select_for_system_time_2.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-interval_function.sql-True-interval_function.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_with_union_and_qualify.sql-True-select_with_union_and_qualify.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_struct.sql-True-select_struct.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_where_less_than.sql-True-select_where_less_than.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_with_qualify.sql-True-select_with_qualify.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_mixture_of_array_literals.sql-True-select_mixture_of_array_literals.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_datetime.sql-True-select_datetime.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_udf_quote_everything.sql-True-select_udf_quote_everything.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_function_with_named_arguments.sql-True-select_function_with_named_arguments.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_1_gt_0.sql-True-select_1_gt_0.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_with_offset.sql-True-select_with_offset.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_gt_lt.sql-True-select_gt_lt.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-create_js_function_simple.sql-True-create_js_function_simple.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_ml_weights.sql-True-select_ml_weights.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_typeless_struct_inside_function.sql-True-select_typeless_struct_inside_function.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-create_table_columns_partition_options.sql-True-create_table_columns_partition_options.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_function_parameter_order_by_multiple_columns.sql-True-select_function_parameter_order_by_multiple_columns.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_replace.sql-True-select_replace.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-declare_variable.sql-True-declare_variable.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-create_js_function_options_library_array.sql-True-create_js_function_options_library_array.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-create_js_function_deterministic.sql-True-create_js_function_deterministic.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_udf_quote_nothing.sql-True-select_udf_quote_nothing.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-create_or_replace_sql_function_any_type.sql-True-create_or_replace_sql_function_any_type.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-set_variable_multiple.sql-True-set_variable_multiple.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_lt_gt.sql-True-select_lt_gt.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_hyphenated_table_name_in_from.sql-True-select_hyphenated_table_name_in_from.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-string_literals.sql-True-string_literals.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-create_table_partition_by_as.sql-True-create_table_partition_by_as.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_empty_array_literal.sql-True-select_empty_array_literal.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_replace_2.sql-True-select_replace_2.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-create_js_function_quoted_name.sql-True-create_js_function_quoted_name.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-create_table_with_sequence_bracketed.sql-True-create_table_with_sequence_bracketed.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-functions_a.sql-True-functions_a.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-create_table_as_select.sql-True-create_table_as_select.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-create_table_with_sequence.sql-True-create_table_with_sequence.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-create_view_with_cte.sql-True-create_view_with_cte.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-create_view_with_set_statements.sql-True-create_view_with_set_statements.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-create_table_with_distribution.sql-True-create_table_with_distribution.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-multi_statement_without_semicolon.sql-True-multi_statement_without_semicolon.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-create_table.sql-True-create_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-cte_s.sql-True-cte_s.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-stored_procedure_single_statement.sql-True-stored_procedure_single_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-create_view_with_unpivot.sql-True-create_view_with_unpivot.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-create_view.sql-True-create_view.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-create_view_with_pivot.sql-True-create_view_with_pivot.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-sequence.sql-True-sequence.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-add_index.sql-True-add_index.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-minimal_function_no_alter.sql-True-minimal_function_no_alter.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-alter_table_switch.sql-True-alter_table_switch.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-minimal_function.sql-True-minimal_function.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-insert_statement.sql-True-insert_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-function_with_variable.sql-True-function_with_variable.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-stored_procedure_simple.sql-True-stored_procedure_simple.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_alter_task_unset_simple.sql-True-snowflake_alter_task_unset_simple.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_alter_task_modify_as.sql-True-snowflake_alter_task_modify_as.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_create_database.sql-True-snowflake_create_database.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_alter_table_column.sql-True-snowflake_alter_table_column.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_grant_revoke.sql-True-snowflake_grant_revoke.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_semi_structured_2.sql-True-snowflake_semi_structured_2.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_alter_task_resume.sql-True-snowflake_alter_task_resume.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_alter_user_set_values.sql-True-snowflake_alter_user_set_values.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_call_statement.sql-True-snowflake_call_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_alter_user_reset_password.sql-True-snowflake_alter_user_reset_password.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_explain.sql-True-snowflake_explain.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-multiple_shorthand_casts.sql-True-multiple_shorthand_casts.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_alter_task_modify_when.sql-True-snowflake_alter_task_modify_when.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_describe_user.sql-True-snowflake_describe_user.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_secure_view.sql-True-snowflake_secure_view.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_lateral_flatten_after_join.sql-True-snowflake_lateral_flatten_after_join.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_alter_user_unset_values.sql-True-snowflake_alter_user_unset_values.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_json_underscore_key.sql-True-snowflake_json_underscore_key.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_alter_user_delegate_auth_role.sql-True-snowflake_alter_user_delegate_auth_role.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_alter_task_suspend.sql-True-snowflake_alter_task_suspend.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_semi_structured.sql-True-snowflake_semi_structured.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_copy_into.sql-True-snowflake_copy_into.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_alter_task_remove_after.sql-True-snowflake_alter_task_remove_after.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_use.sql-True-snowflake_use.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_col_position.sql-True-snowflake_col_position.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_sample.sql-True-snowflake_sample.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_alter_task_set_simple.sql-True-snowflake_alter_task_set_simple.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_view_comment.sql-True-snowflake_view_comment.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_escape.sql-True-snowflake_escape.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_alter_task_set_special_full.sql-True-snowflake_alter_task_set_special_full.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_qualify.sql-True-snowflake_qualify.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_merge_into.sql-True-snowflake_merge_into.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_pivot.sql-True-snowflake_pivot.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_alter_session_set_timezone.sql-True-snowflake_alter_session_set_timezone.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_select_transient_table.sql-True-snowflake_select_transient_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_alter_task_unset_full.sql-True-snowflake_alter_task_unset_full.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_within_group.sql-True-snowflake_within_group.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_select_grouping_sets.sql-True-snowflake_select_grouping_sets.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_create_role.sql-True-snowflake_create_role.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_window_function_ignore_nulls.sql-True-snowflake_window_function_ignore_nulls.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_delete.sql-True-snowflake_delete.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_alter_user_remove_delegate_auth.sql-True-snowflake_alter_user_remove_delegate_auth.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_create_pipe.sql-True-snowflake_create_pipe.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_alter_user_abort_query.sql-True-snowflake_alter_user_abort_query.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_semi_structured_3.sql-True-snowflake_semi_structured_3.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_alter_user_delegate_auth.sql-True-snowflake_alter_user_delegate_auth.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_alter_task_if_exists_resume.sql-True-snowflake_alter_task_if_exists_resume.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_alter_task_set_special_simple.sql-True-snowflake_alter_task_set_special_simple.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_first_value_ignore_nulls.sql-True-snowflake_first_value_ignore_nulls.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_set_command.sql-True-snowflake_set_command.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_alter_task_add_after.sql-True-snowflake_alter_task_add_after.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_create_table_comments.sql-True-snowflake_create_table_comments.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_string_literal.sql-True-snowflake_string_literal.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_alter_user_rename.sql-True-snowflake_alter_user_rename.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_qualify_union.sql-True-snowflake_qualify_union.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_secure_view_comment.sql-True-snowflake_secure_view_comment.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_alter_session_unset_parameters.sql-True-snowflake_alter_session_unset_parameters.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_alter_task_set_full.sql-True-snowflake_alter_task_set_full.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_create_schema.sql-True-snowflake_create_schema.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-snowflake_create_masking_policy.sql-True-snowflake_create_masking_policy.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-declare_default_quotedliteral.sql-True-declare_default_quotedliteral.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-use_key.sql-True-use_key.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-handler_sqlstate_value.sql-True-handler_sqlstate_value.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-ignore_key.sql-True-ignore_key.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-loop_label.sql-True-loop_label.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-set_session_variable.sql-True-set_session_variable.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-get_diagnostics_condition_session_variable.sql-True-get_diagnostics_condition_session_variable.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-resignal_set_signal_info.sql-True-resignal_set_signal_info.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-drop_procedure.sql-True-drop_procedure.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-prepare_session_variable.sql-True-prepare_session_variable.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-declare_condition.sql-True-declare_condition.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-if_multiple_expression.sql-True-if_multiple_expression.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-use_index_for_join.sql-True-use_index_for_join.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_into_outfile_lines_starting.sql-True-select_into_outfile_lines_starting.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-function_no_sql.sql-True-function_no_sql.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-if_session_variable.sql-True-if_session_variable.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-execute_prepared_stmt.sql-True-execute_prepared_stmt.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-delimiter_procedure.sql-True-delimiter_procedure.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_for_update.sql-True-select_for_update.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-declare_cursor.sql-True-declare_cursor.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-function_sql_security_invoker.sql-True-function_sql_security_invoker.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-procedure_in_param.sql-True-procedure_in_param.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-close_qualified.sql-True-close_qualified.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-function_sql_security_definer.sql-True-function_sql_security_definer.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-signal_condition_sqlstate_value.sql-True-signal_condition_sqlstate_value.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-function_definer.sql-True-function_definer.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-force_index_left_join.sql-True-force_index_left_join.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-ignore_index_for_group_by.sql-True-ignore_index_for_group_by.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-create_table.sql-True-create_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_into_outfile_fields_escaped.sql-True-select_into_outfile_fields_escaped.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-execute_prepared_stmt_using_multiple_variable.sql-True-execute_prepared_stmt_using_multiple_variable.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-use_index_for_order_by.sql-True-use_index_for_order_by.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-call_statement_multiple_param.sql-True-call_statement_multiple_param.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_sql_buffer_result.sql-True-select_sql_buffer_result.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_for_update_of_multiple.sql-True-select_for_update_of_multiple.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-procedure_inout_param.sql-True-procedure_inout_param.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-use_index.sql-True-use_index.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-get_diagnostics_condition_local_variable.sql-True-get_diagnostics_condition_local_variable.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_into_outfile.sql-True-select_into_outfile.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-explain.sql-True-explain.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-delimiter_select.sql-True-delimiter_select.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-call_statement_quoted.sql-True-call_statement_quoted.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-force_index_for_order_by.sql-True-force_index_for_order_by.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_into_outfile_fields_terminated.sql-True-select_into_outfile_fields_terminated.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-open_qualified.sql-True-open_qualified.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_local_variable.sql-True-select_local_variable.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-handler_error_code.sql-True-handler_error_code.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-drop_prepare.sql-True-drop_prepare.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_for_update_skip_locked.sql-True-select_for_update_skip_locked.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-call_statement.sql-True-call_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-if_subquery_expression.sql-True-if_subquery_expression.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-signal_set_signal_info_multiple.sql-True-signal_set_signal_info_multiple.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-set_session_variable_expression.sql-True-set_session_variable_expression.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-if_nested.sql-True-if_nested.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-prepare_local_variable.sql-True-prepare_local_variable.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-function_notdeterministic.sql-True-function_notdeterministic.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-signal.sql-True-signal.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-loop_no_label.sql-True-loop_no_label.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-execute_prepared_stmt_using.sql-True-execute_prepared_stmt_using.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-force_index.sql-True-force_index.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-fetch_session_multiple.sql-True-fetch_session_multiple.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-declare_exit_handler_sqlexception.sql-True-declare_exit_handler_sqlexception.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_sql_calc_found_rows.sql-True-select_sql_calc_found_rows.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-handler_not_found.sql-True-handler_not_found.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-signal_condition_name.sql-True-signal_condition_name.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-repeat_no_label.sql-True-repeat_no_label.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-while_label.sql-True-while_label.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_into_outfile_fields_optionally_enclosed.sql-True-select_into_outfile_fields_optionally_enclosed.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-get_diagnostics_condition_info_multiple_variable.sql-True-get_diagnostics_condition_info_multiple_variable.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-resignal_condition_name.sql-True-resignal_condition_name.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_for_update_nowait.sql-True-select_for_update_nowait.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-force_key.sql-True-force_key.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_into_session_variable.sql-True-select_into_session_variable.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-resignal.sql-True-resignal.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-declare_continue_handler_sqlexception.sql-True-declare_continue_handler_sqlexception.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-get_diagnostics_condition_info_session_variable.sql-True-get_diagnostics_condition_info_session_variable.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-force_index_for_group_by.sql-True-force_index_for_group_by.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-begin.sql-True-begin.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-drop_function.sql-True-drop_function.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_sql_cache.sql-True-select_sql_cache.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-fetch.sql-True-fetch.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-get_diagnostics_condition_info_local_variable.sql-True-get_diagnostics_condition_info_local_variable.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_sql_no_cache.sql-True-select_sql_no_cache.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_straight_join.sql-True-select_straight_join.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_for_update_lock_in_share_mode.sql-True-select_for_update_lock_in_share_mode.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_lock_in_share_mode.sql-True-select_lock_in_share_mode.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-if.sql-True-if.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-signal_condition_sqlstate.sql-True-signal_condition_sqlstate.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-delimiter_function.sql-True-delimiter_function.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-handler_condition_name.sql-True-handler_condition_name.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-if_else.sql-True-if_else.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-procedure_out_param.sql-True-procedure_out_param.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-function_modifies_sql.sql-True-function_modifies_sql.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_into_multiple_variable.sql-True-select_into_multiple_variable.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_for_share.sql-True-select_for_share.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-ignore_index.sql-True-ignore_index.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_into_outfile_lines_terminated.sql-True-select_into_outfile_lines_terminated.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-function_comment.sql-True-function_comment.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-resignal_set_signal_info_multiple.sql-True-resignal_set_signal_info_multiple.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-get_diagnostics_condition_numeric.sql-True-get_diagnostics_condition_numeric.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-declare_undo_handler_sqlexception.sql-True-declare_undo_handler_sqlexception.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_sql_small_result.sql-True-select_sql_small_result.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-fetch_next_from.sql-True-fetch_next_from.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-force_index_for_join.sql-True-force_index_for_join.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_multiple_partition.sql-True-select_multiple_partition.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-get_diagnostics_row_count.sql-True-get_diagnostics_row_count.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-function_reads_sql.sql-True-function_reads_sql.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-use_database.sql-True-use_database.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_partition.sql-True-select_partition.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-use_index_for_group_by.sql-True-use_index_for_group_by.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-resignal_condition_sqlstate_value.sql-True-resignal_condition_sqlstate_value.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-get_diagnostics_number.sql-True-get_diagnostics_number.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_into_outfile_fields_enclosed.sql-True-select_into_outfile_fields_enclosed.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-repeat_label.sql-True-repeat_label.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-fetch_from.sql-True-fetch_from.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-close.sql-True-close.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-alter_table.sql-True-alter_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-procedure_definer.sql-True-procedure_definer.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-repeat_multiple_statements.sql-True-repeat_multiple_statements.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_distinctrow.sql-True-select_distinctrow.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-fetch_multiple.sql-True-fetch_multiple.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_high_priority.sql-True-select_high_priority.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-handler_sqlwarning.sql-True-handler_sqlwarning.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_session_variable.sql-True-select_session_variable.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-declare_default_numeric.sql-True-declare_default_numeric.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-ignore_index_for_join.sql-True-ignore_index_for_join.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_sql_big_result.sql-True-select_sql_big_result.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-handler_sqlstate.sql-True-handler_sqlstate.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-ignore_index_for_order_by.sql-True-ignore_index_for_order_by.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-if_elseif.sql-True-if_elseif.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_into_dumpfile.sql-True-select_into_dumpfile.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-resignal_condition_sqlstate.sql-True-resignal_condition_sqlstate.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-call_statement_function_param.sql-True-call_statement_function_param.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-while_no_label.sql-True-while_no_label.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-nested_begin.sql-True-nested_begin.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-loop_multiple_statements.sql-True-loop_multiple_statements.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-call_statement_no_param.sql-True-call_statement_no_param.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-fetch_session.sql-True-fetch_session.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-declare_local_variable.sql-True-declare_local_variable.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-open.sql-True-open.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_for_update_of.sql-True-select_for_update_of.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-deallocate_prepare.sql-True-deallocate_prepare.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-prepare_statement.sql-True-prepare_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-signal_set_signal_info.sql-True-signal_set_signal_info.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-DropConsumerGroup.sql-True-DropConsumerGroup.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-CreateViewStatement.sql-True-CreateViewStatement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-CommentStatement.sql-True-CommentStatement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-AlterSchemaStatement.sql-True-AlterSchemaStatement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-AlterUser.sql-True-AlterUser.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-RecompressStatement.sql-True-RecompressStatement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-DataTypeTest.sql-True-DataTypeTest.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-AlterConsumerGroup.sql-True-AlterConsumerGroup.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-DropCascadeStatement.sql-True-DropCascadeStatement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-CreateTableStatement.sql-True-CreateTableStatement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-AlterVirtualSchemaStatement.sql-True-AlterVirtualSchemaStatement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-ImportStatement.sql-True-ImportStatement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-AlterTableDistributePartition.sql-True-AlterTableDistributePartition.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-ExportStatement.sql-True-ExportStatement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-AccessStatement.sql-True-AccessStatement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-DropStatement.sql-True-DropStatement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-Add_Days.sql-True-Add_Days.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-FlushStatistics.sql-True-FlushStatistics.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-AlterTableColumn.sql-True-AlterTableColumn.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-RenameStatement.sql-True-RenameStatement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-ExplainVirtual.sql-True-ExplainVirtual.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-CreateUser.sql-True-CreateUser.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-TruncateStatement.sql-True-TruncateStatement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-SelectStatement.sql-True-SelectStatement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-AlterSession.sql-True-AlterSession.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-DeleteStatement.sql-True-DeleteStatement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-OpenCloseSchema.sql-True-OpenCloseSchema.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-AlterRole.sql-True-AlterRole.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-AlterTableConstraint.sql-True-AlterTableConstraint.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-AlterSystem.sql-True-AlterSystem.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-MergeStatement.sql-True-MergeStatement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-CreateVirtualSchemaStatement.sql-True-CreateVirtualSchemaStatement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-PreloadStatement.sql-True-PreloadStatement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-CreateConsumerGroup.sql-True-CreateConsumerGroup.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-UpdateStatement.sql-True-UpdateStatement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-ExecuteScript.sql-True-ExecuteScript.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-DropTableStatement.sql-True-DropTableStatement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-AlterConnection.sql-True-AlterConnection.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-CreateRole.sql-True-CreateRole.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-CreateConnection.sql-True-CreateConnection.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-DropSchemaStatement.sql-True-DropSchemaStatement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-InsertStatement.sql-True-InsertStatement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-CreateSchema.sql-True-CreateSchema.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-KillStatement.sql-True-KillStatement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-DropCascadeRestrictStatement.sql-True-DropCascadeRestrictStatement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[teradata-create_table_stmt_4.sql-True-create_table_stmt_4.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[teradata-create_table_stmt_2.sql-True-create_table_stmt_2.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[teradata-select_stmt.sql-True-select_stmt.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[teradata-qualify_expression_union.sql-True-qualify_expression_union.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[teradata-qualify_expression.sql-True-qualify_expression.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[teradata-create_table.sql-True-create_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[teradata-update_from.sql-True-update_from.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[teradata-select_stmt_normalize.sql-True-select_stmt_normalize.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[teradata-collect_stats_2.sql-True-collect_stats_2.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[teradata-create_table_stmt_3.sql-True-create_table_stmt_3.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[teradata-qualify_over.sql-True-qualify_over.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[teradata-create_table_stmt.sql-True-create_table_stmt.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[teradata-comment_on_table_stmt.sql-True-comment_on_table_stmt.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[teradata-collect_stats.sql-True-collect_stats.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[teradata-select_stmt_cast.sql-True-select_stmt_cast.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[teradata-comment_on_column_stmt.sql-True-comment_on_column_stmt.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[teradata-bteq_stmt.sql-True-bteq_stmt.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-postgres_select_frame_clause.sql-True-postgres_select_frame_clause.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-postgres_create_function.sql-True-postgres_create_function.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-postgres_drop_sequence.sql-True-postgres_drop_sequence.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-postgres_create_table.sql-True-postgres_create_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-postgres_within_group.sql-True-postgres_within_group.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-postgres_create_sequence.sql-True-postgres_create_sequence.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-postgres_create_role.sql-True-postgres_create_role.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-postgres_unicode_single_quote.sql-True-postgres_unicode_single_quote.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-postgres_single_quote.sql-True-postgres_single_quote.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-postgres_psql_meta_command.sql-True-postgres_psql_meta_command.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-postgres_null_filters.sql-True-postgres_null_filters.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-postgres_create_extension.sql-True-postgres_create_extension.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-postgres_alter_default_privileges.sql-True-postgres_alter_default_privileges.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-postgres_filter.sql-True-postgres_filter.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-postgres_create_index.sql-True-postgres_create_index.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-postgres_create_type.sql-True-postgres_create_type.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-postgres_escape.sql-True-postgres_escape.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-postgres_alter_sequence.sql-True-postgres_alter_sequence.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-postgres_explain.sql-True-postgres_explain.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-postgres_join_no_space.sql-True-postgres_join_no_space.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-postgres_alter_table.sql-True-postgres_alter_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-postgres_select.sql-True-postgres_select.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-postgres_analyze.sql-True-postgres_analyze.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-postgres_create_dollar_quoted_function.sql-True-postgres_create_dollar_quoted_function.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-postgres_comment_on.sql-True-postgres_comment_on.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-postgres_unicode_double_quote.sql-True-postgres_unicode_double_quote.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-postgres_grant_privileges.sql-True-postgres_grant_privileges.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-postgres_create_zero_argument_function.sql-True-postgres_create_zero_argument_function.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-create_table_external_partitioned.sql-True-create_table_external_partitioned.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-drop_database.sql-True-drop_database.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-create_table_like.sql-True-create_table_like.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-create_table_as_select.sql-True-create_table_as_select.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-create_table_temporary_properties.sql-True-create_table_temporary_properties.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-drop_schema.sql-True-drop_schema.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-alter_schema.sql-True-alter_schema.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-create_database.sql-True-create_database.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-create_schema.sql-True-create_schema.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-create_table_clustered_by.sql-True-create_table_clustered_by.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-truncate_table.sql-True-truncate_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-create_table_constraints.sql-True-create_table_constraints.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-create_table_row_format_serde.sql-True-create_table_row_format_serde.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-create_table_row_format_delimited.sql-True-create_table_row_format_delimited.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-create_table_datatypes.sql-True-create_table_datatypes.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-drop_table.sql-True-drop_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-use.sql-True-use.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-alter_database.sql-True-alter_database.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-create_table_skewed_by.sql-True-create_table_skewed_by.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sqlite-create_table_constraint_regexp.sql-True-create_table_constraint_regexp.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol_fs-CreateFunctionStatement.sql-True-CreateFunctionStatement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol_fs-CreateScriptingLuaScriptStatement1.sql-True-CreateScriptingLuaScriptStatement1.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol_fs-CreateAdapterScriptStatement.sql-True-CreateAdapterScriptStatement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol_fs-create_script.sql-True-create_script.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol_fs-CreateUDFScriptStatement5.sql-True-CreateUDFScriptStatement5.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol_fs-CreateUDFScriptStatement2.sql-True-CreateUDFScriptStatement2.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol_fs-CreateUDFScriptStatement3.sql-True-CreateUDFScriptStatement3.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol_fs-CreateUDFScriptStatement1.sql-True-CreateUDFScriptStatement1.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol_fs-CreateScriptingLuaScriptStatement3.sql-True-CreateScriptingLuaScriptStatement3.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol_fs-CreateUDFScriptStatement4.sql-True-CreateUDFScriptStatement4.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol_fs-CreateScriptingLuaScriptStatement2.sql-True-CreateScriptingLuaScriptStatement2.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/exasol_fs_test.py::test_dialect_exasol_fs_specific_segment_parses[WalrusOperatorSegment-:=]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/exasol_fs_test.py::test_dialect_exasol_fs_specific_segment_parses[VariableNameSegment-var1]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/exasol_test.py::test_dialect_exasol_specific_segment_parses[RangeOperator-..]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/postgres_test.py::test_dialect_postgres_specific_segment_parses[SelectClauseElementSegment-c_column AT TIME ZONE 'UTC']",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/postgres_test.py::test_dialect_postgres_specific_segment_parses[SelectClauseElementSegment-(c_column AT TIME ZONE 'UTC')::time]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/postgres_test.py::test_dialect_postgres_specific_segment_parses[SelectClauseElementSegment-timestamp with time zone '2021-10-01' AT TIME ZONE 'UTC']",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/postgres_test.py::test_dialect_postgres_specific_segment_parses[ExpressionSegment-c is null]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/postgres_test.py::test_dialect_postgres_specific_segment_parses[ExpressionSegment-c is not null]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/postgres_test.py::test_dialect_postgres_specific_segment_parses[ExpressionSegment-c isnull]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/postgres_test.py::test_dialect_postgres_specific_segment_parses[ExpressionSegment-c notnull]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/postgres_test.py::test_dialect_postgres_specific_segment_parses[SelectClauseElementSegment-c is null as c_isnull]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/postgres_test.py::test_dialect_postgres_specific_segment_parses[SelectClauseElementSegment-c is not null as c_notnull]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/postgres_test.py::test_dialect_postgres_specific_segment_parses[SelectClauseElementSegment-c isnull as c_isnull]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/postgres_test.py::test_dialect_postgres_specific_segment_parses[SelectClauseElementSegment-c notnull as c_notnull]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/postgres_test.py::test_epoch_datetime_unit[SELECT t1.field, EXTRACT(EPOCH FROM t1.sometime) AS myepoch FROM t1]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/postgres_test.py::test_epoch_datetime_unit[SELECT t1.field, EXTRACT(EPOCH FROM t1.sometime - t1.othertime) AS myepoch FROM t1]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/postgres_test.py::test_space_is_not_reserved[SELECT foo AS space FROM t1]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/postgres_test.py::test_space_is_not_reserved[SELECT space.something FROM t1 AS space]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/postgres_test.py::test_priority_keyword_merge",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/postgres_test.py::test_get_keywords",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/snowflake_test.py::test_snowflake_queries[CreateCloneStatementSegment-create table orders_clone_restore clone orders at (timestamp => to_timestamp_tz('04/05/2013 01:02:03', 'mm/dd/yyyy hh24:mi:ss'));]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/snowflake_test.py::test_snowflake_queries[ShowStatementSegment-SHOW GRANTS ON ACCOUNT;]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/snowflake_test.py::test_snowflake_queries[ShowStatementSegment-show tables history in tpch.public;]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/snowflake_test.py::test_snowflake_queries[ShowStatementSegment-show future grants in schema sales.public;]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/snowflake_test.py::test_snowflake_queries[ShowStatementSegment-show replication databases with primary aws_us_west_2.myaccount1.mydb1;]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/snowflake_test.py::test_snowflake_queries[ShowStatementSegment-SHOW TERSE SCHEMAS HISTORY LIKE '%META%' IN DATABASE MYDB STARTS WITH 'INT' LIMIT 10 FROM 'LAST_SCHEMA';]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/snowflake_test.py::test_snowflake_queries[ShowStatementSegment-SHOW GRANTS TO ROLE SECURITYADMIN;]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/snowflake_test.py::test_snowflake_queries[ShowStatementSegment-SHOW GRANTS OF SHARE MY_SHARE;]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/snowflake_test.py::test_snowflake_queries[SemiStructuredAccessorSegment-SELECT ID :: VARCHAR as id, OBJ : userId :: VARCHAR as user_id from x]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/snowflake_test.py::test_snowflake_queries[DropStatementSegment-DROP USER my_user;]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/snowflake_test.py::test_snowflake_queries[AlterSessionStatementSegment-ALTER SESSION SET TIMEZONE = 'UTC']",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/snowflake_test.py::test_snowflake_queries[AlterSessionStatementSegment-ALTER SESSION SET ABORT_DETACHED_QUERY = FALSE]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/snowflake_test.py::test_snowflake_queries[AlterSessionStatementSegment-ALTER SESSION SET JSON_INDENT = 5]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/snowflake_test.py::test_snowflake_queries[AlterSessionStatementSegment-ALTER SESSION UNSET",
        "status": "ERROR"
    },
    {
        "name": "test/dialects/snowflake_test.py::test_snowflake_queries[AlterSessionStatementSegment-ALTER SESSION UNSET TIME_OUTPUT_FORMAT, TWO_DIGIT_CENTURY_START;]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_L003_test.py::test__rules__std_L003_process_raw_stack[test_elems0-result0]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_L003_test.py::test__rules__std_L003_process_raw_stack[test_elems1-result1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_L003_test.py::test__rules__std_L003_process_raw_stack[test_elems2-result2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_L003_test.py::test__rules__std_L003_process_raw_stack[test_elems3-result3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_L003_test.py::test__rules__std_L003_make_indent[space-3-2-      ]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_L003_test.py::test__rules__std_L003_make_indent[tab-3-2-\\t\\t\\t]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_L003_test.py::test__rules__std_L003_indent_size[3-segments0-6]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_L003_test.py::test__rules__std_L003_indent_size[2-segments1-4]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_L007_test.py::test__rules__std_L007_default",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_L007_test.py::test__rules__std_L007_after",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_L007_test.py::test__rules__std_L007_before",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_L019_test.py::test__rules__std_L019_unparseable",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_L020_test.py::test__rules__std_L020_one_aliases_one_duplicate",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_L020_test.py::test__rules__std_L020_one_aliases_two_duplicate",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_L020_test.py::test__rules__std_L020_complex",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-020_L008_trailing_comma]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-010_CTEs_and_newlines]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-019_trailing_comma_to_leading]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-016_index_error_with_jinja_if2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-009_keyword_capitalisation]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-003_long_line]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-002_indentation]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-013_order_by_explicit]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-015_jinja_leading_whitespace]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-004_indentation]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-011_indentation]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-021_fix_respects_noqa]",
        "status": "FAILED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-006_indentation]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-005_function_spacing]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-016_index_error_with_jinja_if]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-008_with_clause]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-007_with_clause]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-014_looping_interaction_between_l008_and_l030]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-001_long_line]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-012_templating]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-018_l003_indent_templated_code]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-008_looping_rules_l003_l016_l019]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-017_lintresult_fixes_cannot_span_block_boundaries]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-016_no_fix_in_template_loops]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[bigquery-001_templating]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[bigquery-005_unnest_spacing]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[bigquery-002_templating]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[bigquery-003_templating]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[bigquery-004_templating]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[snowflake-001_semi_structured]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_roundtrip_test.py::test__cli__command__fix[L001-test/fixtures/linter/indentation_errors.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_roundtrip_test.py::test__cli__command__fix[L008-test/fixtures/linter/whitespace_errors.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_roundtrip_test.py::test__cli__command__fix[L008-test/fixtures/linter/indentation_errors.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_roundtrip_test.py::test__cli__command__fix[L010-test/fixtures/linter/whitespace_errors.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_roundtrip_test.py::test__cli__command__fix[L011-test/fixtures/parser/ansi/select_simple_i.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_roundtrip_test.py::test__cli__command__fix[L012-test/fixtures/parser/ansi/select_simple_i.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_roundtrip_test.py::test__cli__command__fix_templated[L010]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_roundtrip_test.py::test__cli__command__fix_templated[L001]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test__rules__std_file[L001-indentation_errors.sql-violations0]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test__rules__std_file[L002-indentation_errors.sql-violations1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test__rules__std_file[L003-indentation_errors.sql-violations2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test__rules__std_file[L004-indentation_errors.sql-violations3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test__rules__std_file[L005-whitespace_errors.sql-violations4]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test__rules__std_file[L019-whitespace_errors.sql-violations5]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test__rules__std_file[L008-whitespace_errors.sql-violations6]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test__rules__std_file[L006-operator_errors.sql-violations7]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test__rules__std_file[L039-operator_errors.sql-violations8]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test__rules__std_file[L007-operator_errors.sql-violations9]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test__rules__std_file[L006-operator_errors_negative.sql-violations10]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test__rules__std_file[L039-operator_errors_negative.sql-violations11]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test__rules__std_file[L003-indentation_error_hard.sql-violations12]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test__rules__std_file[L003-indentation_error_contained.sql-violations13]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test__rules__std_file[L016-block_comment_errors.sql-violations14]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test__rules__std_file[L016-block_comment_errors_2.sql-violations15]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test__rules__std_file[L027-column_references.sql-violations16]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test__rules__std_file[L027-column_references_bare_function.sql-violations17]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test__rules__std_file[L026-column_references.sql-violations18]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test__rules__std_file[L025-column_references.sql-violations19]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test__rules__std_file[L021-select_distinct_group_by.sql-violations20]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test__rules__std_file[L006-operator_errors_ignore.sql-violations21]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test__rules__std_file[L031-aliases_in_join_error.sql-violations22]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test__rules__std_file[L046-heavy_templating.sql-violations23]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test__rules__std_file_dbt[L021-models/my_new_project/select_distinct_group_by.sql-violations0]",
        "status": "FAILED"
    },
    {
        "name": "test/rules/std_test.py::test_improper_configs_are_rejected[rule_config_dict0]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test_improper_configs_are_rejected[rule_config_dict1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test_improper_configs_are_rejected[rule_config_dict2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test_improper_configs_are_rejected[rule_config_dict3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test_improper_configs_are_rejected[rule_config_dict4]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test_improper_configs_are_rejected[rule_config_dict5]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test_improper_configs_are_rejected[rule_config_dict6]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test_improper_configs_are_rejected[rule_config_dict7]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test_improper_configs_are_rejected[rule_config_dict8]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test_improper_configs_are_rejected[rule_config_dict9]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test_improper_configs_are_rejected[rule_config_dict10]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test_improper_configs_are_rejected[rule_config_dict11]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L001_test_fail_trailing_whitespace]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L001_test_fail_trailing_whitespace_on_initial_blank_line]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L001_test_pass_trailing_whitespace_before_template_code]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L002_test_fail_mixed_tabs_and_spaces]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L003_test_fail_reindent_first_line_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L003_test_fail_reindent_first_line_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L003_test_pass_indentation_of_comments_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L003_test_pass_indentation_of_comments_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L003_test_fail_tab_indentation]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L003_test_pass_indented_joins_default]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L003_test_pass_indented_joins_false]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L003_test_pass_indented_joins_true]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L003_test_fail_indented_joins_true_fix]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L003_test_fail_indented_joins_false_fix]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L003_test_pass_indented_using_on_default]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L003_test_pass_indented_using_on_true]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L003_test_pass_indented_using_on_false]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L003_test_fail_indented_using_on_false]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L003_test_fail_indented_joins_using_on_false]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L003_test_pass_indented_from_with_comment]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L003_test_fail_indented_from_with_comment_fix]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L003_test_fail_indented_multi_line_comment]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L003_test_fail_attempted_hanger_fix]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L003_test_fail_possible_hanger_fix]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L003_test_fail_consecutive_hangers]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L003_test_fail_clean_reindent_fix]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L003_test_pass_indent_snowflake]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L003_test_pass_indent_indent_bigquery]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L003_test_jinja_indent_templated_table_name_a]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L003_test_jinja_indent_templated_table_name_b]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L004_spaces_pass_default]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L004_spaces_fail]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L004_spaces_fail_custom_tab_space_size]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L004_spaces_fail_custom_tab_space_size_not_multiple]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L004_tabs_fail_default]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L004_tabs_fail_default_set_tab_space_size]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L004_tabs_pass]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L004_mixed_indent_fail_default_tab_space_size]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L004_mixed_indent_fail_custom_tab_space_size]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L004_indented_comments]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L004_indented_comments_default_config]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L004_indented_comments_tab_config]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L005_test_fail_whitespace_before_comma]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L006_test_pass_brackets]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L006_test_pass_expression]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L006_test_fail_expression]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L006_test_pass_newline_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L006_test_pass_newline_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L006_test_pass_newline_\\xa3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L006_test_pass_sign_indicators]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L006_fail_simple]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L006_dont_fail_on_too_much_whitespace]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L007_passes_on_before_default]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L007_fails_on_after_default]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L007_passes_on_before_explicit]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L007_fails_on_after_explicit]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L007_fails_on_before_override]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L007_passes_on_after_override]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L008_test_pass_single_whitespace_after_comma]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L008_test_fail_multiple_whitespace_after_comma]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L008_test_fail_no_whitespace_after_comma]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L008_test_fail_no_whitespace_after_comma_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L010_test_fail_inconsistent_capitalisation_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L010_test_fail_inconsistent_capitalisation_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L010_test_fail_capitalisation_policy_lower]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L010_test_fail_capitalisation_policy_upper]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L010_test_fail_capitalisation_policy_capitalise]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L011_test_fail_implicit_alias]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L011_test_fail_implicit_alias_space]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L011_test_fail_implicit_alias_explicit]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L011_test_fail_implicit_alias_implicit]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L011_test_fail_implicit_alias_implicit_multiple]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L011_test_fail_implicit_alias_implicit_newline]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L012_issue_561]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L012_test_fail_explicit_column_default]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L012_test_fail_explicit_column_explicit]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L012_test_fail_explicit_column_implicit]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L013_test_pass_column_exp_without_alias_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L013_test_pass_column_exp_without_alias_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L013_test_pass_column_exp_without_alias_allow_scalar_true]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L013_test_fail_column_exp_without_alias]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L013_test_fail_column_exp_without_alias_allow_scalar_false]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L013_test_pass_column_exp_with_alias]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L014_test_pass_consistent_capitalisation_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L014_test_pass_consistent_capitalisation_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L014_test_pass_consistent_capitalisation_with_null]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L014_test_pass_consistent_capitalisation_with_single_letter_upper]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L014_test_pass_consistent_capitalisation_with_single_word_snake]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L014_test_pass_consistent_capitalisation_with_single_word_pascal]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L014_test_pass_consistent_capitalisation_with_multiple_words_with_numbers]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L014_test_fail_inconsistent_capitalisation_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L014_test_fail_inconsistent_capitalisation_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L014_test_pass_consistent_capitalisation_policy_pascal_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L014_test_pass_consistent_capitalisation_policy_pascal_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L014_test_pass_consistent_capitalisation_policy_pascal_3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L014_test_pass_consistent_capitalisation_policy_pascal_4]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L014_test_pass_consistent_capitalisation_policy_pascal_5]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L014_test_pass_consistent_capitalisation_policy_pascal_6]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L014_test_fail_inconsistent_capitalisation_policy_pascal_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L014_test_fail_inconsistent_capitalisation_policy_pascal_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L014_test_fail_inconsistent_capitalisation_policy_pascal_3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L014_test_fail_inconsistent_capitalisation_policy_pascal_4]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L014_test_fail_consistent_capitalisation_policy_pascal_5]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L014_test_pass_policy_unquoted_identifiers_aliases_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L014_test_pass_policy_unquoted_identifiers_aliases_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L014_test_pass_policy_unquoted_identifiers_aliases_3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L014_test_pass_policy_unquoted_identifiers_aliases_4]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L014_test_policy_unquoted_identifiers_aliases_5]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L014_test_policy_unquoted_identifiers_aliases_6]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L014_test_policy_unquoted_identifiers_aliases_7]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L014_test_policy_unquoted_identifiers_aliases_8]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L014_test_policy_unquoted_identifiers_column_aliases_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L014_test_policy_unquoted_identifiers_aliases_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L015_test_fail_distinct_with_parenthesis_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L015_test_fail_distinct_with_parenthesis_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L015_test_fail_distinct_with_parenthesis_3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L015_test_fail_distinct_with_parenthesis_4]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L015_test_fail_distinct_with_parenthesis_5]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L015_test_fail_distinct_with_parenthesis_6]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L015_test_fail_distinct_with_parenthesis_7]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L015_test_pss_no_distinct]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L016_test_pass_line_too_long_config_override]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L016_test_fail_line_too_long_with_comments_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L016_test_fail_line_too_long_with_comments_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L016_test_fail_line_too_long_with_comments_3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L016_test_fail_line_too_long_with_comments_4]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L016_test_pass_line_too_long_with_comments_ignore_comment_lines]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L016_test_fail_line_too_long_only_comments]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L016_test_fail_line_too_long_handling_indents]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L016_test_pass_line_too_long_ignore_comments_true]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L016_test_pass_line_too_long_ignore_comments_false]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L016_test_compute_line_length_before_template_expansion_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L016_test_compute_line_length_before_template_expansion_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L016_test_long_jina_comment]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L016_test_long_jina_comment_ignore]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L016_test_for_loop]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L016_test_for_loop_repeating_elements_starts_with_literal]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L016_test_for_loop_starting_with_templated_piece]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L016_test_for_loop_fail_complex_match]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L016_test_for_loop_fail_simple_match]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L016_test_set_statement]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L017_passing_example]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L017_passing_example_window_function]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L017_simple_fail]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L017_complex_fail_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L017_complex_fail_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L018_test_pass_with_clause_closing_aligned]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L018_test_pass_with_clause_closing_oneline]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L018_test_fail_with_clause_closing_misaligned_indentation]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L018_test_fail_with_clause_closing_misaligned_negative_indentation]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L019_leading_comma_violations]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L019_leading_comma_violation_with_inline_comment]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L019_leading_commas_allowed]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L019_leading_commas_allowed_with_header]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L019_leading_comma_violations_in_with_statement]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L019_leading_commas_allowed_in_with_statement]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L019_trailing_comma_violations]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L019_trailing_commas_allowed]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L019_trailing_comma_fixing_removes_extra_whitespace]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L019_leading_comma_fixing_flows_around_comments]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L019_trailing_comma_move_past_several_comment_lines]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L019_leading_comma_move_past_several_comment_lines]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L020_test_fail_exactly_once_duplicated_aliases]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L020_test_fail_two_duplicated_aliases]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L021_test_pass_only_group_by]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L021_test_fail_distinct_and_group_by]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L022_test_pass_blank_line_after_cte_trailing_comma]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L022_test_pass_blank_line_after_cte_leading_comma]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L022_test_fail_no_blank_line_after_each_cte]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L022_test_fail_no_blank_line_after_cte_before_comment]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L022_test_fail_no_blank_line_after_last_cte_trailing_comma]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L022_test_fail_no_blank_line_after_last_cte_leading_comma]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L022_test_fail_oneline_cte_leading_comma]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L022_test_fail_cte_floating_comma]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L023_test_fail_cte_no_space_after_as]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L024_test_fail_no_space_after_using_clause]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L024_test_pass_newline_after_using_clause]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L025_test_fail_table_alias_not_referenced_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L025_test_pass_table_alias_referenced]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L025_test_pass_unaliased_table_referenced]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L025_test_ignore_value_table_functions]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L025_test_fail_table_alias_not_referenced_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L025_test_fail_subquery_alias_not_referenced]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L025_test_pass_bigquery_unaliased_table_with_hyphens]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L025_test_pass_bigquery_aliased_table_with_ticks_referenced]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L026_test_pass_object_referenced_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L026_test_fail_object_not_referenced_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L026_test_fail_object_not_referenced_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L026_test_pass_object_referenced_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L026_test_pass_object_referenced_3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L026_test_pass_object_referenced_4]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L027_test_allow_date_parts_as_function_parameter_bigquery]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L027_test_allow_date_parts_as_function_parameter_snowflake]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L027_test_ignore_value_table_functions]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L028_test_fail_single_table_mixed_qualification_of_references]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L028_test_pass_single_table_consistent_references_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L028_test_pass_single_table_consistent_references_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L028_test_fail_single_table_reference_when_unqualified_config]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L028_test_fail_single_table_reference_when_qualified_config]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L028_test_pass_single_table_reference_in_subquery]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L028_test_value_table_functions_do_not_require_qualification]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L029_test_pass_valid_identifiers_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L029_test_fail_keyword_as_identifier_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L029_test_fail_keyword_as_identifier_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L029_test_fail_keyword_as_identifier_3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L029_test_pass_valid_identifiers_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L029_test_fail_keyword_as_identifier_4]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L029_test_pass_valid_identifiers_3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L029_test_fail_keyword_as_identifier_5]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L030_test_fail_inconsistent_function_capitalisation_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L030_test_fail_inconsistent_function_capitalisation_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L030_test_bare_functions]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L030_test_bare_functions_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L030_test_fail_capitalization_after_comma]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L030_test_fail_fully_qualified_function_mixed_functions]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L030_test_fail_fully_qualified_function_mixed_case]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L031_test_pass_allow_self_join_alias]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L031_test_fail_avoid_aliases_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L031_test_fail_avoid_aliases_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L031_test_fail_avoid_aliases_3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L031_alias_single_char_identifiers]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L031_alias_with_wildcard_identifier]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L031_select_from_values]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L031_select_from_table_generator]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L031_issue_635]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L031_issue_239]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L031_issue_610]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L032_test_pass_specify_join_keys]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L032_test_fail_specify_join_keys_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L032_test_fail_specify_join_keys_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L033_test_pass_union_all]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L033_test_fail_bare_union]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L033_test_pass_union_distinct]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L033_test_pass_union_distinct_with_comment]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L033_test_fail_triple_join_with_one_bad]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L033_test_fail_triple_join_with_one_bad_lowercase]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L033_test_exasol]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L033_test_exasol_union_all]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L033_test_postgres]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L033_test_bigquery]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L033_test_bigquery_lower]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L034_test_pass_select_statement_order]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L034_test_fail_select_statement_order_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L034_test_fail_select_statement_order_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L034_test_fail_select_statement_order_3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L034_test_fail_select_statement_order_4]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L034_test_fail_select_statement_order_5]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L034_test_union_statements_ignored]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L034_test_insert_statements_ignored]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L034_test_create_table_as_select_statements_ignored]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L035_no_redundant_else_null]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L035_redundant_else_null]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L035_alternate_case_when_syntax]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L035_else_expression]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L036_test_single_select_target_and_no_new_line_between_select_and_select_target]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L036_test_single_select_target_and_new_line_after_select_target]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L036_test_single_select_target_and_new_line_before_select_target]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L036_test_multiple_select_targets_on_new_lines_and_new_line_after_select]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L036_test_single_select_target_and_new_line_between_select_and_select_target]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L036_test_multiple_select_targets_all_on_the_same_line]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L036_test_multiple_select_targets_trailing_whitespace_after_select]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L036_test_comment_between_select_and_single_select_target]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L036_test_multiple_select_targets_some_newlines_missing_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L036_test_multiple_select_targets_some_newlines_missing_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L036_test_cte]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L036_test_distinct_many]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L036_test_distinct_single_pass]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L036_test_distinct_single_fail_a]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L036_test_distinct_single_fail_b]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L036_test_single_select_with_no_from]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L036_test_single_select_with_no_from_previous_comment]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L036_test_single_select_with_comment_after_column]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L036_test_single_select_with_comment_after_column_no_space]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L036_test_single_select_with_multiple_mixed_comments]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L036_test_single_select_with_comment before]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L037_test_unspecified]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L037_test_unspecified_unspecified]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L037_test_unspecified_desc]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L037_test_asc_desc]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L037_test_desc_unspecified]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L037_test_desc_asc]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L038_test_require_pass]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L038_test_require_fail]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L038_test_forbid_pass]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L038_test_forbid_fail]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L039_test_basic]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L039_test_basic_fix]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L039_test_simple_fix]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L040_test_fail_inconsistent_boolean_capitalisation]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L041_test_fail_distinct_on_next_line_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L041_test_fail_distinct_on_next_line_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L041_test_pass_distinct_on_same_line_with_select]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L042_select_fail]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L042_select_multijoin_fail]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L042_with_fail]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L042_set_fail]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L042_simple_pass]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L042_from_clause_pass]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L042_from_clause_fail]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L042_both_clause_fail]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L042_no_inner_from_pass]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L043_test_pass_case_cannot_be_reduced_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L043_test_pass_case_cannot_be_reduced_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L043_test_pass_case_cannot_be_reduced_3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L043_test_pass_case_cannot_be_reduced_4]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L043_test_pass_case_cannot_be_reduced_5]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L043_test_pass_case_cannot_be_reduced_6]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L043_test_fail_unnecessary_case_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L043_test_fail_unnecessary_case_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L043_test_fail_unnecessary_case_3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L043_test_fail_unnecessary_case_4]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L043_test_fail_unnecessary_case_5]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L043_test_fail_unnecessary_case_6]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L044_test_pass_known_number_of_result_columns_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L044_test_fail_unknown_number_of_result_columns_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L044_test_pass_known_number_of_result_columns_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L044_test_fail_unknown_number_of_result_columns_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L044_test_pass_known_number_of_result_columns_3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L044_test_pass_known_number_of_result_columns_4]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L044_test_fail_unknown_number_of_result_columns_3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L044_test_pass_known_number_of_result_columns_5]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L044_test_fail_unknown_number_of_result_columns_4]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L044_test_fail_unknown_number_of_result_columns_5]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L044_test_pass_known_number_of_result_columns_6]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L044_test_fail_unknown_number_of_result_columns_6]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L044_test_pass_known_number_of_result_columns_7]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L044_test_fail_unknown_number_of_result_columns_7]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L044_test_pass_known_number_of_result_columns_8]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L044_test_fail_unknown_number_of_result_columns_8]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L044_test_fail_unknown_number_of_result_columns_9]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L044_test_fail_unknown_number_of_result_columns_10]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L044_test_pass_known_number_of_result_columns_9]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L044_test_pass_known_number_of_result_columns_10]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L044_test_pass_known_number_of_result_columns_11]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L044_test_fail_unknown_number_of_result_columns_11]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L044_test_fail_unknown_number_of_result_columns_12]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L044_test_fail_unknown_number_of_result_columns_13]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L044_test_pass_known_number_of_result_columns_12]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L044_test_fail_unknown_number_of_result_columns_14]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L044_test_fail_unknown_number_of_result_columns_15]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L044_test_pass_known_number_of_result_columns_13]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L044_test_pass_known_number_of_result_columns_14]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L044_test_fail_unknown_number_of_result_columns_16]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L044_test_pass_known_number_of_result_columns_15]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L044_test_fail_unknown_number_of_result_columns_17]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L044_test_fail_unknown_number_of_result_columns_18]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L045_test_pass_no_cte_defined_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L045_test_pass_cte_defined_and_used_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L045_test_pass_cte_defined_and_used_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L045_test_fail_cte_defined_but_unused_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L045_test_fail_cte_defined_but_unused_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L045_test_pass_cte_defined_and_used_3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L045_test_fail_cte_defined_but_unused_3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L045_test_pass_no_cte_defined_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L045_test_pass_cte_defined_and_used_4]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L045_test_pass_cte_defined_and_used_5]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L045_test_pass_cte_defined_and_used_6]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L045_test_fail_cte_defined_but_unused_4]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L045_test_pass_cte_defined_and_used_7]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L046_test_simple]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L046_test_simple_modified]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L046_test_fail_jinja_tags_no_space]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L046_test_fail_jinja_tags_multiple_spaces]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L046_test_fail_jinja_tags_no_space_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L046_test_pass_newlines]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L047_passes_on_count_star]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L047_passes_on_count_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L047_changes_count_0_to_count_star]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L047_passes_on_count_0]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L047_passes_on_count_1_if_both_present]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L047_changes_to_count_1_if_both_present]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L047_changes_count_1_to_count_star]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L047_handles_whitespaces]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L047_changes_count_star_to_count_0]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L047_changes_count_star_to_count_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L047_changes_count_1_to_count_0]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L047_changes_count_0_to_count_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L047_changes_count_star_to_count_1_handle_new_line]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L047_no_false_positive_on_count_col]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L047_no_false_positive_on_expression]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L048_test_pass_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L048_test_pass_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L048_test_fail_simple]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L048_test_pass_comma]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L048_test_pass_bigquery_udf_triple_single_quote]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[L048_test_pass_bigquery_udf_triple_double_quote]",
        "status": "PASSED"
    },
    {
        "name": "0.02s call     test/dialects/snowflake_test.py::test_snowflake_queries[AlterSessionStatementSegment-ALTER SESSION UNSET",
        "status": "ERROR"
    },
    {
        "name": "0.00s setup    test/dialects/snowflake_test.py::test_snowflake_queries[AlterSessionStatementSegment-ALTER SESSION UNSET",
        "status": "ERROR"
    },
    {
        "name": "0.00s teardown test/dialects/snowflake_test.py::test_snowflake_queries[AlterSessionStatementSegment-ALTER SESSION UNSET",
        "status": "ERROR"
    }
]