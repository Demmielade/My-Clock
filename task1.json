[
    {
        "name": "test/api/classes_test.py::test__api__lexer",
        "status": "PASSED"
    },
    {
        "name": "test/api/classes_test.py::test__api__parser",
        "status": "PASSED"
    },
    {
        "name": "test/api/classes_test.py::test__api__linter_lint",
        "status": "PASSED"
    },
    {
        "name": "test/api/classes_test.py::test__api__linter_fix",
        "status": "PASSED"
    },
    {
        "name": "test/api/info_test.py::test__api__info_dialects",
        "status": "PASSED"
    },
    {
        "name": "test/api/info_test.py::test__api__info_rules",
        "status": "PASSED"
    },
    {
        "name": "test/api/simple_test.py::test__api__lint_string_without_violations",
        "status": "PASSED"
    },
    {
        "name": "test/api/simple_test.py::test__api__lint_string",
        "status": "PASSED"
    },
    {
        "name": "test/api/simple_test.py::test__api__lint_string_specific",
        "status": "PASSED"
    },
    {
        "name": "test/api/simple_test.py::test__api__lint_string_specific_single",
        "status": "PASSED"
    },
    {
        "name": "test/api/simple_test.py::test__api__lint_string_specific_exclude",
        "status": "PASSED"
    },
    {
        "name": "test/api/simple_test.py::test__api__lint_string_specific_exclude_single",
        "status": "PASSED"
    },
    {
        "name": "test/api/simple_test.py::test__api__lint_string_specific_exclude_all_failed_rules",
        "status": "PASSED"
    },
    {
        "name": "test/api/simple_test.py::test__api__fix_string",
        "status": "PASSED"
    },
    {
        "name": "test/api/simple_test.py::test__api__fix_string_specific",
        "status": "PASSED"
    },
    {
        "name": "test/api/simple_test.py::test__api__fix_string_specific_exclude",
        "status": "PASSED"
    },
    {
        "name": "test/api/simple_test.py::test__api__fix_string_unparsable",
        "status": "PASSED"
    },
    {
        "name": "test/api/simple_test.py::test__api__fix_string_unparsable_fix_even_unparsable",
        "status": "PASSED"
    },
    {
        "name": "test/api/simple_test.py::test__api__parse_string",
        "status": "PASSED"
    },
    {
        "name": "test/api/simple_test.py::test__api__parse_fail",
        "status": "PASSED"
    },
    {
        "name": "test/api/simple_test.py::test__api__config_path",
        "status": "PASSED"
    },
    {
        "name": "test/api/simple_test.py::test__api__config_override[kwargs0-expected0]",
        "status": "PASSED"
    },
    {
        "name": "test/api/simple_test.py::test__api__config_override[kwargs1-expected1]",
        "status": "PASSED"
    },
    {
        "name": "test/api/simple_test.py::test__api__invalid_dialect",
        "status": "PASSED"
    },
    {
        "name": "test/api/simple_test.py::test__api__parse_exceptions",
        "status": "PASSED"
    },
    {
        "name": "test/cli/autocomplete_test.py::test_dialect_click_type_shell_complete[an-expected0]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/autocomplete_test.py::test_dialect_click_type_shell_complete[d-expected1]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/autocomplete_test.py::test_dialect_click_type_shell_complete[g-expected2]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/autocomplete_test.py::test_dialect_click_type_shell_complete[s-expected3]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/autocomplete_test.py::test_dialect_click_type_shell_complete[post-expected4]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_directed",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_dialect",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_no_dialect[command0]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_no_dialect[command1]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_no_dialect[command2]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_no_dialect[command3]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_no_dialect[command4]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_parse_error_dialect_explicit_warning",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_parse_error_dialect_implicit_warning",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_dialect_legacy",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_extra_config_fail",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_stdin_filename_config[command0-test/fixtures/cli/stdin_filename/without_config/stdin_filename.sql-0-[L:  5, P:  1]      |                    join_clause:\\n[L:  5, P:  1]      |                        keyword:                              'POSITIONAL']",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_stdin_filename_config[command1-test/fixtures/an_ansi_config_here.sql-1-Parsing errors found and dialect is set to 'ansi'.]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_stdin_filename_config[command2-test/fixtures/cli/stdin_filename/stdin_filename.sql-0-All Finished!]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_stdin_filename_config[command3-test/fixtures/cli/stdin_filename/without_config/stdin_filename.sql-0-All Finished!]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_stdin_filename_config[command4-test/fixtures/an_ansi_config_here.sql-1-Parsing errors found and dialect is set to 'ansi'.]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_stdin_filename_config[command5-test/fixtures/cli/stdin_filename/stdin_filename.sql-0-SELECT\\n    A.COL1,\\n    B.COL2\\nFROM TABA AS A\\nPOSITIONAL JOIN TABB AS B;\\n]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_stdin_filename_config[command6-test/fixtures/cli/stdin_filename/without_config/stdin_filename.sql-0-SELECT\\n    A.COL1,\\n    B.COL2\\nFROM TABA AS A\\nPOSITIONAL JOIN TABB AS B;\\n]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_stdin_filename_config[command7-test/fixtures/an_ansi_config_here.sql-1-[1 templating/parsing errors found]]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_stdin_filename_config[command8-test/fixtures/cli/stdin_filename/stdin_filename.sql-0-SELECT\\n    A.COL1,\\n    B.COL2\\nFROM TABA AS A\\nPOSITIONAL JOIN TABB AS B;\\n]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_stdin_filename_config[command9-test/fixtures/cli/stdin_filename/without_config/stdin_filename.sql-0-SELECT\\n    A.COL1,\\n    B.COL2\\nFROM TABA AS A\\nPOSITIONAL JOIN TABB AS B;\\n]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_stdin_filename_config[command10-test/fixtures/an_ansi_config_here.sql-1-Unfixable violations detected.]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_stdin[command0]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_stdin[command1]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_stdin[command2]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_stdin[command3]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_empty_stdin",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_render_stdin",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command0]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command1]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command2]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command3]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command4]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command5]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command6]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command7]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command8]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command9]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command10]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command11]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command12]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command13]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command14]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command15]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command16]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command17]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command18]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command19]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command20]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command21]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command22]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command23]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command24]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command25]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command26]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command27]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command28]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse[command29]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse_with_retcode[command0-1]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse_with_retcode[command1-1]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse_with_retcode[command2-1]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse_with_retcode[command3-0]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse_with_retcode[command4-0]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse_with_retcode[command5-2]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse_with_retcode[command6-1]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse_with_retcode[command7-0]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse_with_retcode[command8-1]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse_with_retcode[command9-1]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse_with_retcode[command10-1]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse_with_retcode[command11-2]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse_with_retcode[command12-1]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_parse_with_retcode[command13-1]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_warning_explicit_file_ignored",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_skip_ignore_files",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_ignore_local_config",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_warning",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_versioning",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_version",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_rules",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_dialects",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command__fix[LT01-test/fixtures/linter/indentation_errors.sql0]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command__fix[LT01-test/fixtures/linter/whitespace_errors.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command__fix[LT01-test/fixtures/linter/indentation_errors.sql1]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command__fix[LT02-test/fixtures/linter/indentation_error_hard.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__fix_error_handling_behavior[1_lint_error_1_unsuppressed_parse_error]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__fix_error_handling_behavior[1_lint_error_1_unsuppressed_templating_error]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__fix_error_handling_behavior[1_lint_error_1_suppressed_parse_error]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__fix_error_handling_behavior[0_lint_errors_1_unsuppressed_parse_error]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__fix_error_handling_behavior[0_lint_errors_1_suppressed_parse_error]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__fix_error_handling_behavior[1_lint_error_1_unsuppressed_parse_error_FIX_EVEN_UNPARSABLE]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__fix_error_handling_behavior[2_files_with_lint_errors_1_unsuppressed_parse_error]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test_cli_fix_even_unparsable[command-line-False]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test_cli_fix_even_unparsable[command-line-True]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test_cli_fix_even_unparsable[config-file-False]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test_cli_fix_even_unparsable[config-file-True]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_fix_stdin[select * from t-LT02-select * from t]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_fix_stdin[ select * from t-LT02-select * from t]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_format_stdin[select * from t\\n-select * from t\\n]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_format_stdin[   select    *    FRoM     t    -select * from t\\n]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_format_stdin[select\\n    count(*) over (\\n        order by a desc \\n        range between b row and '10 seconds' following  -- noqa: PRS\\n    ) as c\\nfrom d\\n-select\\n    count(*) over (\\n        order by a desc \\n        range between b row and '10 seconds' following  -- noqa: PRS\\n    ) as c\\nfrom d\\n]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_fix_stdin_logging_to_stderr",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_fix_stdin_safety",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_fix_stdin_error_exit_code[create TABLE {{ params.dsfsdfds }}.t (a int)-1--v-Fix aborted due to unparsable template variables.]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_fix_stdin_error_exit_code[create TABLE a.t (a int)-0--]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_fix_stdin_error_exit_code[create table a.t (a int)-0--]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_fix_stdin_error_exit_code[select col from a join b using (c)-1--v-Unfixable violations detected.]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command__fix_check[LT01-test/fixtures/linter/indentation_errors.sql-y-0-0]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command__fix_check[LT01-test/fixtures/linter/indentation_errors.sql-n-1-1]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_parse_serialize_from_stdin[None-yaml]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_parse_serialize_from_stdin[None-json]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_parse_serialize_from_stdin[outfile-yaml]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_parse_serialize_from_stdin[outfile-json]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_serialize_from_stdin[select * from tbl-CP01-expected0-0-yaml]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_serialize_from_stdin[select * from tbl-CP01-expected0-0-json]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_serialize_from_stdin[select * from tbl-CP01-expected0-0-none]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_serialize_from_stdin[SElect * from tbl-CP01-expected1-1-yaml]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_serialize_from_stdin[SElect * from tbl-CP01-expected1-1-json]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_serialize_from_stdin[SElect * from tbl-CP01-expected1-1-none]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_serialize_from_stdin[SELECT {{1}}-JJ01-expected2-1-yaml]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_serialize_from_stdin[SELECT {{1}}-JJ01-expected2-1-json]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_serialize_from_stdin[SELECT {{1}}-JJ01-expected2-1-none]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_fail_nice_not_found[command0]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_fail_nice_not_found[command1]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_nocolor",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_serialize_multiple_files[None-human]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_serialize_multiple_files[None-yaml]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_serialize_multiple_files[None-json]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_serialize_multiple_files[None-github-annotation]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_serialize_multiple_files[None-github-annotation-native]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_serialize_multiple_files[None-none]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_serialize_multiple_files[outfile-human]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_serialize_multiple_files[outfile-yaml]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_serialize_multiple_files[outfile-json]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_serialize_multiple_files[outfile-github-annotation]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_serialize_multiple_files[outfile-github-annotation-native]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_serialize_multiple_files[outfile-none]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_serialize_github_annotation",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_serialize_github_annotation_native[test/fixtures/linter/identifier_capitalisation.sql-::error title=SQLFluff,file={filename},line=3,col=5,endLine=3,endColumn=8::RF02: Unqualified reference 'foo' found in select with more than one referenced table/view. [references.qualification]\\n::error title=SQLFluff,file={filename},line=4,col=1,endLine=4,endColumn=5::LT02: Expected indent of 8 spaces. [layout.indent]\\n::error title=SQLFluff,file={filename},line=4,col=5,endLine=4,endColumn=8::AL02: Implicit/explicit aliasing of columns. [aliasing.column]\\n::error title=SQLFluff,file={filename},line=4,col=5,endLine=4,endColumn=8::CP02: Unquoted identifiers must be consistently lower case. [capitalisation.identifiers]\\n::notice title=SQLFluff,file={filename},line=5,col=1,endLine=5,endColumn=5::CP01: Keywords must be consistently lower case. [capitalisation.keywords]\\n::error title=SQLFluff,file={filename},line=5,col=12,endLine=5,endColumn=16::CP02: Unquoted identifiers must be consistently lower case. [capitalisation.identifiers]\\n::error title=SQLFluff,file={filename},line=5,col=18,endLine=5,endColumn=22::CP02: Unquoted identifiers must be consistently lower case. [capitalisation.identifiers]\\n]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_serialize_github_annotation_native[test/fixtures/linter/jinja_spacing.sql-::error title=SQLFluff,file={filename},line=3,col=15,endLine=3,endColumn=22::JJ01: Jinja tags should have a single whitespace on either side: {{{{foo}}}} [jinja.padding]\\n]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_serialize_annotation_level_error_failure_equivalent[github-annotation]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__command_lint_serialize_annotation_level_error_failure_equivalent[github-annotation-native]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test___main___help",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test_encoding[utf-8-ascii]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test_encoding[utf-8-sig-UTF-8-SIG]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test_encoding[utf-32-UTF-32]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test_cli_encoding[utf-8-command-line-False]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test_cli_encoding[utf-8-SIG-command-line-True]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test_cli_encoding[utf-8-config-file-False]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test_cli_encoding[utf-8-SIG-config-file-True]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test_cli_no_disable_noqa_flag",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test_cli_disable_noqa_flag",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test_cli_warn_unused_noqa_flag",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test_cli_get_default_config",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::TestProgressBars::test_cli_lint_disabled_progress_bar",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::TestProgressBars::test_cli_lint_enabled_progress_bar",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::TestProgressBars::test_cli_lint_enabled_progress_bar_multiple_paths",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::TestProgressBars::test_cli_lint_enabled_progress_bar_multiple_files",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__fix_multiple_errors_no_show_errors",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__fix_multiple_errors_quiet_force",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__fix_multiple_errors_quiet_check",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__fix_multiple_errors_show_errors",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__multiple_files__fix_multiple_errors_show_errors",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__render_fail",
        "status": "PASSED"
    },
    {
        "name": "test/cli/commands_test.py::test__cli__render_pass",
        "status": "PASSED"
    },
    {
        "name": "test/cli/formatters_test.py::test__cli__formatters__filename_nocol",
        "status": "PASSED"
    },
    {
        "name": "test/cli/formatters_test.py::test__cli__formatters__violation",
        "status": "PASSED"
    },
    {
        "name": "test/cli/formatters_test.py::test__cli__helpers__colorize",
        "status": "PASSED"
    },
    {
        "name": "test/cli/formatters_test.py::test__cli__helpers__cli_table",
        "status": "PASSED"
    },
    {
        "name": "test/cli/formatters_test.py::test__cli__fix_no_corrupt_file_contents[CREATE TABLE IF NOT EXISTS vuln.software_name_dictionary(id SERIAL PRIMARY KEYrule VARCHAR(30));-fix_args0-CREATE TABLE IF NOT EXISTS vuln.software_name_dictionary(id SERIAL PRIMARY KEYrule VARCHAR(30));]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/helpers_test.py::test__cli__helpers__wrap_elem[abc-5-res0]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/helpers_test.py::test__cli__helpers__wrap_elem[how now brown cow-10-res1]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/helpers_test.py::test__cli__helpers__wrap_elem[A hippopotamus came for tea-10-res2]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/helpers_test.py::test__cli__helpers__wrap_elem[A hippopotamus\\ncame for tea-10-res3]",
        "status": "PASSED"
    },
    {
        "name": "test/cli/helpers_test.py::test__cli__helpers__wrap_field_a",
        "status": "PASSED"
    },
    {
        "name": "test/cli/helpers_test.py::test__cli__helpers__wrap_field_b",
        "status": "PASSED"
    },
    {
        "name": "test/cli/helpers_test.py::test__cli__helpers__wrap_field_c",
        "status": "PASSED"
    },
    {
        "name": "test/cli/helpers_test.py::test__cli__helpers__pad_line",
        "status": "PASSED"
    },
    {
        "name": "test/cli/helpers_test.py::test_cli__helpers__lazy_sequence",
        "status": "PASSED"
    },
    {
        "name": "test/core/config_test.py::test__config__load_file_dir",
        "status": "PASSED"
    },
    {
        "name": "test/core/config_test.py::test__config__load_from_string",
        "status": "PASSED"
    },
    {
        "name": "test/core/config_test.py::test__config__from_strings",
        "status": "PASSED"
    },
    {
        "name": "test/core/config_test.py::test__config__load_file_f",
        "status": "PASSED"
    },
    {
        "name": "test/core/config_test.py::test__config__load_nested",
        "status": "PASSED"
    },
    {
        "name": "test/core/config_test.py::test__config__iter_config_elems_from_dict",
        "status": "PASSED"
    },
    {
        "name": "test/core/config_test.py::test__config__load_toml",
        "status": "PASSED"
    },
    {
        "name": "test/core/config_test.py::test__config__load_placeholder_cfg",
        "status": "PASSED"
    },
    {
        "name": "test/core/config_test.py::test__config__find_sqlfluffignore_in_same_directory",
        "status": "PASSED"
    },
    {
        "name": "test/core/config_test.py::test__config__nested_config_tests",
        "status": "PASSED"
    },
    {
        "name": "test/core/config_test.py::test__config__load_user_appdir_config",
        "status": "PASSED"
    },
    {
        "name": "test/core/config_test.py::test__config__templater_selection",
        "status": "PASSED"
    },
    {
        "name": "test/core/config_test.py::test__config__glob_exclude_config_tests",
        "status": "PASSED"
    },
    {
        "name": "test/core/config_test.py::test__config__glob_include_config_tests",
        "status": "PASSED"
    },
    {
        "name": "test/core/config_test.py::test__config__rules_set_to_none",
        "status": "PASSED"
    },
    {
        "name": "test/core/config_test.py::test__config__rules_group_with_exclude",
        "status": "PASSED"
    },
    {
        "name": "test/core/config_test.py::test__config__get_section",
        "status": "PASSED"
    },
    {
        "name": "test/core/config_test.py::test__config__get",
        "status": "PASSED"
    },
    {
        "name": "test/core/config_test.py::test__config__from_kwargs",
        "status": "PASSED"
    },
    {
        "name": "test/core/config_test.py::test__config__from_string",
        "status": "PASSED"
    },
    {
        "name": "test/core/config_test.py::test__config_missing_dialect",
        "status": "PASSED"
    },
    {
        "name": "test/core/config_test.py::test__config__validate_configs_direct",
        "status": "PASSED"
    },
    {
        "name": "test/core/config_test.py::test__config__validate_configs_indirect",
        "status": "PASSED"
    },
    {
        "name": "test/core/config_test.py::test__config__validate_configs_inline_layout[-- sqlfluff:layout:types:comma:line_position:leading\\nSELECT 1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/config_test.py::test__config__validate_configs_inline_layout[-- sqlfluff:layout:foo\\nSELECT 1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/config_test.py::test__config__validate_configs_inline_layout[-- sqlfluff:layout:type:comma:bar\\nSELECT 1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/config_test.py::test__config__validate_configs_inline_layout[-- sqlfluff:layout:type:comma:foo:bar\\nSELECT 1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/config_test.py::test__config__validate_configs_inline_layout[--sqlfluff:layout:type:comma:foo:bar\\nSELECT 1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/config_test.py::test__config__validate_configs_precedence_same_file",
        "status": "PASSED"
    },
    {
        "name": "test/core/config_test.py::test__config__toml_list_config",
        "status": "PASSED"
    },
    {
        "name": "test/core/config_test.py::test__config__warn_unknown_rule",
        "status": "PASSED"
    },
    {
        "name": "test/core/config_test.py::test__process_inline_config",
        "status": "PASSED"
    },
    {
        "name": "test/core/errors_test.py::test__lex_error_pickle[True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/errors_test.py::test__lex_error_pickle[False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/errors_test.py::test__parse_error_pickle[True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/errors_test.py::test__parse_error_pickle[False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/errors_test.py::test__lint_error_pickle[True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/errors_test.py::test__lint_error_pickle[False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/helpers/dict_test.py::test__helpers_dict__nested_combine",
        "status": "PASSED"
    },
    {
        "name": "test/core/helpers/dict_test.py::test__helpers_dict__dict_diff",
        "status": "PASSED"
    },
    {
        "name": "test/core/helpers/file_test.py::test__parser__helper_get_encoding[test/fixtures/linter/encoding-utf-8.sql-autodetect-ascii]",
        "status": "PASSED"
    },
    {
        "name": "test/core/helpers/file_test.py::test__parser__helper_get_encoding[test/fixtures/linter/encoding-utf-8-sig.sql-autodetect-UTF-8-SIG]",
        "status": "PASSED"
    },
    {
        "name": "test/core/helpers/file_test.py::test__parser__helper_get_encoding[test/fixtures/linter/encoding-utf-8.sql-utf-8-utf-8]",
        "status": "PASSED"
    },
    {
        "name": "test/core/helpers/file_test.py::test__parser__helper_get_encoding[test/fixtures/linter/encoding-utf-8-sig.sql-utf-8-utf-8]",
        "status": "PASSED"
    },
    {
        "name": "test/core/helpers/file_test.py::test__parser__helper_get_encoding[test/fixtures/linter/encoding-utf-8.sql-utf-8-sig-utf-8-sig]",
        "status": "PASSED"
    },
    {
        "name": "test/core/helpers/file_test.py::test__parser__helper_get_encoding[test/fixtures/linter/encoding-utf-8-sig.sql-utf-8-sig-utf-8-sig]",
        "status": "PASSED"
    },
    {
        "name": "test/core/helpers/file_test.py::test__config__iter_config_paths[test/fixtures/config/inheritance_a/nested/blah.sql-test/fixtures-result0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/helpers/file_test.py::test__config__iter_config_paths[test/fixtures-test/fixtures/config/inheritance_a-result1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/helpers/file_test.py::test__config__iter_config_paths[test/fixtures-test/core-result2]",
        "status": "PASSED"
    },
    {
        "name": "test/core/helpers/file_test.py::test__config__iter_config_paths_exc_win",
        "status": "SKIPPED"
    },
    {
        "name": "test/core/helpers/file_test.py::test__config__iter_config_paths_exc_unix",
        "status": "PASSED"
    },
    {
        "name": "test/core/helpers/slice_test.py::test__parser__slice_overlaps_result[s10-s20-True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/helpers/slice_test.py::test__parser__slice_overlaps_result[s11-s21-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/helpers/slice_test.py::test__parser__slice_overlaps_result[s12-s22-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/helpers/slice_test.py::test__parser__slice_overlaps_result[s13-s23-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/helpers/slice_test.py::test__parser__slice_overlaps_result[s14-s24-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/helpers/slice_test.py::test__parser__slice_overlaps_result[s15-s25-True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/helpers/slice_test.py::test__parser__slice_overlaps_result[s16-s26-True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/helpers/slice_test.py::test__parser__slice_overlaps_result[s17-s27-True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/helpers/slice_test.py::test__parser__slice_overlaps_result[s18-s28-True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/helpers/slice_test.py::test__parser__slice_overlaps_result[s19-s29-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/helpers/slice_test.py::test__parser__slice_overlaps_result[s110-s210-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/helpers/slice_test.py::test__parser__slice_overlaps_result[s111-s211-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/helpers/slice_test.py::test__parser__slice_overlaps_result[s112-s212-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/helpers/slice_test.py::test__parser__slice_overlaps_result[s113-s213-True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/helpers/slice_test.py::test__parser__slice_overlaps_result[s114-s214-True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/helpers/slice_test.py::test__parser__slice_overlaps_error[s10-s20]",
        "status": "PASSED"
    },
    {
        "name": "test/core/helpers/slice_test.py::test__parser__slice_overlaps_error[s11-s21]",
        "status": "PASSED"
    },
    {
        "name": "test/core/helpers/slice_test.py::test__parser__slice_overlaps_error[s12-s22]",
        "status": "PASSED"
    },
    {
        "name": "test/core/helpers/slice_test.py::test__parser__slice_overlaps_error[s13-s23]",
        "status": "PASSED"
    },
    {
        "name": "test/core/helpers/slice_test.py::test__parser__slice_overlaps_error[s14-s24]",
        "status": "PASSED"
    },
    {
        "name": "test/core/helpers/slice_test.py::test__parser__slice_overlaps_error[s15-s25]",
        "status": "PASSED"
    },
    {
        "name": "test/core/helpers/slice_test.py::test__parser__slice_overlaps_error[s16-s26]",
        "status": "PASSED"
    },
    {
        "name": "test/core/helpers/string_test.py::test__helpers_string__findall[--positions0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/helpers/string_test.py::test__helpers_string__findall[a-a-positions1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/helpers/string_test.py::test__helpers_string__findall[foobar-o-positions2]",
        "status": "PASSED"
    },
    {
        "name": "test/core/helpers/string_test.py::test__helpers_string__findall[bar bar bar bar-bar-positions3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/helpers/string_test.py::test__helpers_string__split_comma_separated_string[AL01,LT08,AL07-expected0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/helpers/string_test.py::test__helpers_string__split_comma_separated_string[\\nAL01,\\nLT08,\\nAL07,-expected1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/helpers/string_test.py::test__helpers_string__split_comma_separated_string[raw_str2-expected2]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/fix_test.py::test__rules_base_segments_compute_anchor_edit_info",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/fix_test.py::test__fix__generate_source_patches[tree0-templated_file0-expected_result0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/fix_test.py::test__fix__generate_source_patches[tree1-templated_file1-expected_result1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/fix_test.py::test__fix__generate_source_patches[tree2-templated_file2-expected_result2]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/fix_test.py::test__fix__generate_source_patches[tree3-templated_file3-expected_result3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/fix_test.py::test__fix__generate_source_patches[tree4-templated_file4-expected_result4]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linted_file_test.py::test__linted_file__build_up_fixed_source_string[source_slices0-source_patches0-a-a]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linted_file_test.py::test__linted_file__build_up_fixed_source_string[source_slices1-source_patches1-abc-adc]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linted_file_test.py::test__linted_file__build_up_fixed_source_string[source_slices2-source_patches2-ac-abc]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linted_file_test.py::test__linted_file__build_up_fixed_source_string[source_slices3-source_patches3-abc-ac]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linted_file_test.py::test__linted_file__build_up_fixed_source_string[source_slices4-source_patches4-a {{b}} c-a {{ b }} c]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linted_file_test.py::test__linted_file__slice_source_file_using_patches[source_patches0-source_only_slices0-a-expected_result0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linted_file_test.py::test__linted_file__slice_source_file_using_patches[source_patches1-source_only_slices1-abc-expected_result1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linted_file_test.py::test__linted_file__slice_source_file_using_patches[source_patches2-source_only_slices2-a {{ b }} c-expected_result2]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linted_file_test.py::test__linted_file__slice_source_file_using_patches[source_patches3-source_only_slices3-a {# b #} c-expected_result3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linted_file_test.py::test__linted_file__slice_source_file_using_patches[source_patches4-source_only_slices4-a{# b #}c-expected_result4]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linted_file_test.py::test__linted_file__slice_source_file_using_patches[source_patches5-source_only_slices5-a{# b #}cc-expected_result5]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linted_file_test.py::test__linted_file__slice_source_file_using_patches[source_patches6-source_only_slices6-a {# b #} c-expected_result6]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linted_file_test.py::test__linted_file__slice_source_file_using_patches[source_patches7-source_only_slices7-SELECT 1 from {%+if true-%} {{ref('foo')}} {%-endif%}-expected_result7]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linted_file_test.py::test_safe_create_replace_file[utf8_create]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linted_file_test.py::test_safe_create_replace_file[utf8_update]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linted_file_test.py::test_safe_create_replace_file[utf8_special_char]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linted_file_test.py::test_safe_create_replace_file[incorrect_encoding]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test__linter__path_from_paths__dir",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test__linter__path_from_paths__default",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test__linter__path_from_paths__exts",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test__linter__path_from_paths__file",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test__linter__skip_large_bytes[0-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test__linter__skip_large_bytes[5-True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test__linter__skip_large_bytes[2000-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test__linter__path_from_paths__not_exist",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test__linter__path_from_paths__not_exist_ignore",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test__linter__path_from_paths__explicit_ignore",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test__linter__path_from_paths__sqlfluffignore_current_directory",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test__linter__path_from_paths__dot",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test__linter__path_from_paths__ignore[test/fixtures/linter/sqlfluffignore]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test__linter__path_from_paths__ignore[test/fixtures/linter/sqlfluffignore/]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test__linter__path_from_paths__ignore[test/fixtures/linter/sqlfluffignore/.]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test__linter__lint_string_vs_file[test/fixtures/linter/indentation_errors.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test__linter__lint_string_vs_file[test/fixtures/linter/whitespace_errors.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test__linter__get_violations_filter_rules[None-6]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test__linter__get_violations_filter_rules[CP01-2]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test__linter__get_violations_filter_rules[rules2-1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test__linter__linting_result__sum_dicts",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test__linter__linting_result__combine_dicts",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test__linter__linting_result_check_tuples_by_path[False-list]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test__linter__linting_result_check_tuples_by_path[True-dict]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test__linter__linting_result_stats[multifile_a-stats0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test__linter__linting_result_stats[multifile_b-stats1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test__linter__linting_result_get_violations[1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test__linter__linting_result_get_violations[2]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test__linter__linting_parallel_thread[False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test__linter__linting_parallel_thread[True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test_lint_path_parallel_wrapper_exception",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test__linter__get_runner_processes[512-1-1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test__linter__get_runner_processes[512-0-512]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test__linter__get_runner_processes[512--12-500]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test__linter__get_runner_processes[512-5-5]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test__linter__get_runner_processes[1--1-1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test__linter__linting_unexpected_error_handled_gracefully",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test__linter__empty_file",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test__linter__parse_fail",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test__linter__templating_fail",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test__linter__mask_templated_violations[True-check_tuples0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test__linter__mask_templated_violations[False-check_tuples1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test__linter__encoding[test/fixtures/linter/encoding-utf-8.sql-autodetect-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test__linter__encoding[test/fixtures/linter/encoding-utf-8-sig.sql-autodetect-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test__linter__encoding[test/fixtures/linter/encoding-utf-8.sql-utf-8-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test__linter__encoding[test/fixtures/linter/encoding-utf-8-sig.sql-utf-8-True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test__linter__encoding[test/fixtures/linter/encoding-utf-8.sql-utf-8-sig-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test__linter__encoding[test/fixtures/linter/encoding-utf-8-sig.sql-utf-8-sig-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test_delayed_exception",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test__attempt_to_change_templater_warning",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test_advanced_api_methods",
        "status": "PASSED"
    },
    {
        "name": "test/core/linter/linter_test.py::test_normalise_newlines",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_anyof_test.py::test__parser__grammar__oneof__copy",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_anyof_test.py::test__parser__grammar_oneof[True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_anyof_test.py::test__parser__grammar_oneof[False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_anyof_test.py::test__parser__grammar_oneof_templated",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_anyof_test.py::test__parser__grammar_oneof_exclude",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_anyof_test.py::test__parser__grammar_oneof_take_longest_match",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_anyof_test.py::test__parser__grammar_oneof_take_first",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_anyof_test.py::test__parser__grammar_anyof_modes[ParseMode.STRICT-options0-terminators0-input_slice0-kwargs0-output_tuple0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_anyof_test.py::test__parser__grammar_anyof_modes[ParseMode.STRICT-options1-terminators1-input_slice1-kwargs1-output_tuple1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_anyof_test.py::test__parser__grammar_anyof_modes[ParseMode.STRICT-options2-terminators2-input_slice2-kwargs2-output_tuple2]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_anyof_test.py::test__parser__grammar_anyof_modes[ParseMode.STRICT-options3-terminators3-input_slice3-kwargs3-output_tuple3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_anyof_test.py::test__parser__grammar_anyof_modes[ParseMode.GREEDY-options4-terminators4-input_slice4-kwargs4-output_tuple4]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_anyof_test.py::test__parser__grammar_anyof_modes[ParseMode.GREEDY-options5-terminators5-input_slice5-kwargs5-output_tuple5]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_anyof_test.py::test__parser__grammar_anyof_modes[ParseMode.GREEDY-options6-terminators6-input_slice6-kwargs6-output_tuple6]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_anyof_test.py::test__parser__grammar_anyof_modes[ParseMode.STRICT-options7-terminators7-input_slice7-kwargs7-output_tuple7]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_anyof_test.py::test__parser__grammar_anysetof",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_other_test.py::test__parser__grammar_delimited[token_list0-0-True-False-5]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_other_test.py::test__parser__grammar_delimited[token_list1-0-True-False-5]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_other_test.py::test__parser__grammar_delimited[token_list2-0-True-False-1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_other_test.py::test__parser__grammar_delimited[token_list3-0-True-True-3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_other_test.py::test__parser__grammar_delimited[token_list4-0-True-False-5]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_other_test.py::test__parser__grammar_delimited[token_list5-0-False-False-1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_other_test.py::test__parser__grammar_delimited[token_list6-1-True-False-5]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_other_test.py::test__parser__grammar_delimited[token_list7-1-False-False-0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_other_test.py::test__parser__grammar_delimited[token_list8-0-True-False-3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_other_test.py::test__parser__grammar_delimited[token_list9-0-False-False-3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_other_test.py::test__parser__grammar_delimited[token_list10-1-True-False-3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_other_test.py::test__parser__grammar_delimited[token_list11-1-False-False-3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_other_test.py::test__parser__grammar_delimited[token_list12-1-False-False-3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_other_test.py::test__parser__grammar_delimited[token_list13-2-True-False-0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_other_test.py::test__parser__grammar_anything_structure[input_tokens0-terminators0-output_tuple0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_other_test.py::test__parser__grammar_anything_structure[input_tokens1-terminators1-output_tuple1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_other_test.py::test__parser__grammar_anything_structure[input_tokens2-terminators2-output_tuple2]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_other_test.py::test__parser__grammar_anything_structure[input_tokens3-terminators3-output_tuple3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_other_test.py::test__parser__grammar_anything_structure[input_tokens4-terminators4-output_tuple4]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_other_test.py::test__parser__grammar_anything_structure[input_tokens5-terminators5-output_tuple5]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_other_test.py::test__parser__grammar_anything_structure[input_tokens6-terminators6-output_tuple6]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_other_test.py::test__parser__grammar_anything_match[terminators0-6]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_other_test.py::test__parser__grammar_anything_match[terminators1-1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_other_test.py::test__parser__grammar_anything_match[terminators2-6]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_other_test.py::test__parser__grammar_anything_match[terminators3-0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_other_test.py::test__parser__grammar_anything_match[terminators4-6]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_other_test.py::test__parser__grammar_nothing_match",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_other_test.py::test__parser__grammar_noncode_match",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_ref_test.py::test__parser__grammar__ref_eq",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_ref_test.py::test__parser__grammar__ref_repr",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_ref_test.py::test__parser__grammar_ref_match",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_ref_test.py::test__parser__grammar_ref_exclude",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_sequence_test.py::test__parser__grammar_sequence_repr",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_sequence_test.py::test__parser__grammar_sequence_nested_match",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_sequence_test.py::test__parser__grammar_sequence_modes[ParseMode.STRICT-sequence0-terminators0-input_slice0-output_tuple0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_sequence_test.py::test__parser__grammar_sequence_modes[ParseMode.GREEDY-sequence1-terminators1-input_slice1-output_tuple1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_sequence_test.py::test__parser__grammar_sequence_modes[ParseMode.GREEDY_ONCE_STARTED-sequence2-terminators2-input_slice2-output_tuple2]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_sequence_test.py::test__parser__grammar_sequence_modes[ParseMode.STRICT-sequence3-terminators3-input_slice3-output_tuple3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_sequence_test.py::test__parser__grammar_sequence_modes[ParseMode.GREEDY-sequence4-terminators4-input_slice4-output_tuple4]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_sequence_test.py::test__parser__grammar_sequence_modes[ParseMode.GREEDY_ONCE_STARTED-sequence5-terminators5-input_slice5-output_tuple5]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_sequence_test.py::test__parser__grammar_sequence_modes[ParseMode.STRICT-sequence6-terminators6-input_slice6-output_tuple6]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_sequence_test.py::test__parser__grammar_sequence_modes[ParseMode.GREEDY_ONCE_STARTED-sequence7-terminators7-input_slice7-output_tuple7]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_sequence_test.py::test__parser__grammar_sequence_modes[ParseMode.GREEDY-sequence8-terminators8-input_slice8-output_tuple8]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_sequence_test.py::test__parser__grammar_sequence_modes[ParseMode.STRICT-sequence9-terminators9-input_slice9-output_tuple9]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_sequence_test.py::test__parser__grammar_sequence_modes[ParseMode.GREEDY-sequence10-terminators10-input_slice10-output_tuple10]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_sequence_test.py::test__parser__grammar_sequence_modes[ParseMode.GREEDY_ONCE_STARTED-sequence11-terminators11-input_slice11-output_tuple11]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_sequence_test.py::test__parser__grammar_sequence_modes[ParseMode.STRICT-sequence12-terminators12-input_slice12-output_tuple12]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_sequence_test.py::test__parser__grammar_sequence_modes[ParseMode.GREEDY-sequence13-terminators13-input_slice13-output_tuple13]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_sequence_test.py::test__parser__grammar_sequence_modes[ParseMode.GREEDY_ONCE_STARTED-sequence14-terminators14-input_slice14-output_tuple14]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_sequence_test.py::test__parser__grammar_sequence_modes[ParseMode.STRICT-sequence15-terminators15-input_slice15-output_tuple15]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_sequence_test.py::test__parser__grammar_sequence_modes[ParseMode.GREEDY-sequence16-terminators16-input_slice16-output_tuple16]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_sequence_test.py::test__parser__grammar_sequence_modes[ParseMode.GREEDY_ONCE_STARTED-sequence17-terminators17-input_slice17-output_tuple17]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_sequence_test.py::test__parser__grammar_sequence_modes[ParseMode.GREEDY_ONCE_STARTED-sequence18-terminators18-input_slice18-output_tuple18]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_sequence_test.py::test__parser__grammar_sequence_modes[ParseMode.GREEDY-sequence19-terminators19-input_slice19-output_tuple19]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_sequence_test.py::test__parser__grammar_sequence_modes[ParseMode.GREEDY_ONCE_STARTED-sequence20-terminators20-input_slice20-output_tuple20]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_sequence_test.py::test__parser__grammar_sequence_modes[ParseMode.GREEDY-sequence21-terminators21-input_slice21-output_tuple21]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_sequence_test.py::test__parser__grammar_bracketed_modes[input_seed0-ParseMode.STRICT-sequence0-kwargs0-output_tuple0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_sequence_test.py::test__parser__grammar_bracketed_modes[input_seed1-ParseMode.GREEDY-sequence1-kwargs1-output_tuple1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_sequence_test.py::test__parser__grammar_bracketed_modes[input_seed2-ParseMode.STRICT-sequence2-kwargs2-output_tuple2]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_sequence_test.py::test__parser__grammar_bracketed_modes[input_seed3-ParseMode.GREEDY-sequence3-kwargs3-output_tuple3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_sequence_test.py::test__parser__grammar_bracketed_modes[input_seed4-ParseMode.STRICT-sequence4-kwargs4-output_tuple4]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_sequence_test.py::test__parser__grammar_bracketed_modes[input_seed5-ParseMode.GREEDY-sequence5-kwargs5-output_tuple5]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_sequence_test.py::test__parser__grammar_bracketed_modes[input_seed6-ParseMode.STRICT-sequence6-kwargs6-output_tuple6]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_sequence_test.py::test__parser__grammar_bracketed_modes[input_seed7-ParseMode.GREEDY-sequence7-kwargs7-output_tuple7]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_sequence_test.py::test__parser__grammar_bracketed_modes[input_seed8-ParseMode.STRICT-sequence8-kwargs8-output_tuple8]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_sequence_test.py::test__parser__grammar_bracketed_modes[input_seed9-ParseMode.STRICT-sequence9-kwargs9-output_tuple9]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_sequence_test.py::test__parser__grammar_bracketed_modes[input_seed10-ParseMode.GREEDY-sequence10-kwargs10-output_tuple10]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_sequence_test.py::test__parser__grammar_bracketed_modes[input_seed11-ParseMode.STRICT-sequence11-kwargs11-output_tuple11]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_sequence_test.py::test__parser__grammar_bracketed_modes[input_seed12-ParseMode.GREEDY-sequence12-kwargs12-output_tuple12]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_sequence_test.py::test__parser__grammar_bracketed_modes[input_seed13-ParseMode.STRICT-sequence13-kwargs13-output_tuple13]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_sequence_test.py::test__parser__grammar_bracketed_modes[input_seed14-ParseMode.GREEDY-sequence14-kwargs14-output_tuple14]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_sequence_test.py::test__parser__grammar_bracketed_modes[input_seed15-ParseMode.GREEDY-sequence15-kwargs15-output_tuple15]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_sequence_test.py::test__parser__grammar_bracketed_error_modes[input_seed0-ParseMode.STRICT-sequence0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_sequence_test.py::test__parser__grammar_bracketed_error_modes[input_seed1-ParseMode.GREEDY-sequence1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/grammar/grammar_sequence_test.py::test__parser__grammar_sequence_indent_conditional_match",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/helpers_test.py::test__parser__helper_trim_non_code_segments[token_list0-0-3-0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/helpers_test.py::test__parser__helper_trim_non_code_segments[token_list1-0-3-0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/helpers_test.py::test__parser__helper_trim_non_code_segments[token_list2-0-0-0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/helpers_test.py::test__parser__helper_trim_non_code_segments[token_list3-3-3-3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_obj[a b-res0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_obj[b.c-res1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_obj[abc \\n \\t def  ;blah-res2]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_obj[abc'\\n \"\\t' \"de`f\"-res3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_obj[abc -- comment \\nblah-res4]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_obj[abc # comment \\nblah-res5]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_obj[abc /* comment \\nblah*/-res6]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_obj[abc /*\\n\\t\\n*/-res7]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_obj[*-+bd/-res8]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_obj[2+4 -5-res9]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_obj[when 'Spec\\\\'s 23' like-res10]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_obj[when \"Spec\\\\\"s 23\" like-res11]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_string[.fsaljk-.]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_string[fsaljk-None]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_regex[fsaljk-f-f0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_regex[fsaljk-f-f1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_regex[fsaljk-[fas]*-fsa]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_regex[   \\t   fsaljk-[^\\\\S\\\\r\\\\n]*-   \\t   ]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_regex[   \\t \\n  fsaljk-[^\\\\S\\\\r\\\\n]*-   \\t ]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_regex['something boring'   \\t \\n  fsaljk-'[^']*'-'something boring']",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_regex[' something exciting \\t\\n '   \\t \\n  fsaljk-'[^']*'-' something exciting \\t\\n ']",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_lex_match",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_fail",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_fail_via_parse",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_trim_post_subdivide",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_slicing_calls[call macro and function overrides]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_slicing_calls[call an existing macro]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_slicing_from_template_file[very simple test case]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_slicing_from_template_file[special zero length slice type is kept]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/lexer_test.py::test__parser__lexer_slicing_from_template_file[template with escaped slice]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/markers_test.py::test_markers__infer_next_position[fsaljk-start_pos0-end_pos0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/markers_test.py::test_markers__infer_next_position[-start_pos1-end_pos1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/markers_test.py::test_markers__infer_next_position[\\n-start_pos2-end_pos2]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/markers_test.py::test_markers__infer_next_position[boo\\n-start_pos3-end_pos3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/markers_test.py::test_markers__infer_next_position[boo\\nfoo-start_pos4-end_pos4]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/markers_test.py::test_markers__infer_next_position[\\nfoo-start_pos5-end_pos5]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/markers_test.py::test_markers__setting_position_raw",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/markers_test.py::test_markers__setting_position_working",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/markers_test.py::test_markers__comparison",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/match_algorithms_test.py::test__parser__algorithms__next_match[matcher_keywords0-result_slice0-bar]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/match_algorithms_test.py::test__parser__algorithms__next_match[matcher_keywords1-result_slice1-foo]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/match_algorithms_test.py::test__parser__algorithms__next_match[matcher_keywords2-result_slice2-foo]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/match_algorithms_test.py::test__parser__algorithms__next_match[matcher_keywords3-result_slice3-None]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/match_algorithms_test.py::test__parser__algorithms__resolve_bracket[raw_segments0-result_slice0-None]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/match_algorithms_test.py::test__parser__algorithms__resolve_bracket[raw_segments1-result_slice1-None]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/match_algorithms_test.py::test__parser__algorithms__resolve_bracket[raw_segments2-None-SQLParseError]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/match_algorithms_test.py::test__parser__algorithms__resolve_bracket[raw_segments3-None-SQLParseError]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/match_algorithms_test.py::test__parser__algorithms__next_ex_bracket_match[raw_segments0-foo-result_slice0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/match_algorithms_test.py::test__parser__algorithms__next_ex_bracket_match[raw_segments1-foo-result_slice1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/match_algorithms_test.py::test__parser__algorithms__next_ex_bracket_match[raw_segments2-foo-result_slice2]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/match_algorithms_test.py::test__parser__algorithms__next_ex_bracket_match[raw_segments3-foo-result_slice3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/match_algorithms_test.py::test__parser__algorithms__next_ex_bracket_match[raw_segments4-foo-result_slice4]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/match_algorithms_test.py::test__parser__algorithms__greedy_match[raw_segments0-target_words0-False-result_slice0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/match_algorithms_test.py::test__parser__algorithms__greedy_match[raw_segments1-target_words1-True-result_slice1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/match_algorithms_test.py::test__parser__algorithms__greedy_match[raw_segments2-target_words2-True-result_slice2]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/match_algorithms_test.py::test__parser__algorithms__greedy_match[raw_segments3-target_words3-False-result_slice3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/match_algorithms_test.py::test__parser__algorithms__greedy_match[raw_segments4-target_words4-False-result_slice4]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/match_algorithms_test.py::test__parser__algorithms__trim_to_terminator[raw_segments0-target_words0-2]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/match_algorithms_test.py::test__parser__algorithms__trim_to_terminator[raw_segments1-target_words1-0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/match_algorithms_test.py::test__parser__algorithms__trim_to_terminator[raw_segments2-target_words2-7]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/match_algorithms_test.py::test__parser__algorithms__trim_to_terminator[raw_segments3-target_words3-0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/match_result_test.py::test__parser__matchresult2_apply[segment_seed0-match_result0-3-serialised_result0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/match_result_test.py::test__parser__matchresult2_apply[segment_seed1-match_result1-3-serialised_result1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/match_result_test.py::test__parser__matchresult2_apply[segment_seed2-match_result2-0-serialised_result2]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/parse_test.py::test__parser__parse_match",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/parse_test.py::test__parser__parse_error",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/parser_test.py::test__parser__repr",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/parser_test.py::test__parser__typedparser__match",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/parser_test.py::test__parser__typedparser__simple",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/parser_test.py::test__parser__stringparser__match",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/parser_test.py::test__parser__stringparser__simple",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/parser_test.py::test__parser__regexparser__match",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/parser_test.py::test__parser__regexparser__simple",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/parser_test.py::test__parser__multistringparser__match",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/parser_test.py::test__parser__multistringparser__simple",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/parser_test.py::test__parser__typedparser_rematch[None]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/parser_test.py::test__parser__typedparser_rematch[bar]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/segments/segments_base_test.py::test__parser__base_segments_type",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/segments/segments_base_test.py::test__parser__base_segments_class_types",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/segments/segments_base_test.py::test__parser__base_segments_descendant_type_set",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/segments/segments_base_test.py::test__parser__base_segments_direct_descendant_type_set",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/segments/segments_base_test.py::test__parser__base_segments_to_tuple_a",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/segments/segments_base_test.py::test__parser__base_segments_to_tuple_b",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/segments/segments_base_test.py::test__parser__base_segments_to_tuple_c",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/segments/segments_base_test.py::test__parser__base_segments_as_record_a",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/segments/segments_base_test.py::test__parser__base_segments_as_record_b",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/segments/segments_base_test.py::test__parser__base_segments_as_record_c",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/segments/segments_base_test.py::test__parser__base_segments_count_segments",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/segments/segments_base_test.py::test__parser_base_segments_validate_non_code_ends[list_in0-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/segments/segments_base_test.py::test__parser_base_segments_validate_non_code_ends[list_in1-True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/segments/segments_base_test.py::test__parser_base_segments_validate_non_code_ends[list_in2-True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/segments/segments_base_test.py::test__parser_base_segments_validate_non_code_ends[list_in3-True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/segments/segments_base_test.py::test__parser_base_segments_validate_non_code_ends[list_in4-True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/segments/segments_base_test.py::test__parser_base_segments_validate_non_code_ends[list_in5-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/segments/segments_base_test.py::test__parser__base_segments_path_to",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/segments/segments_base_test.py::test__parser__base_segments_stubs",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/segments/segments_base_test.py::test__parser__base_segments_raw",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/segments/segments_base_test.py::test__parser__base_segments_base",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/segments/segments_base_test.py::test__parser__base_segments_raw_compare",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/segments/segments_base_test.py::test__parser__base_segments_base_compare",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/segments/segments_base_test.py::test__parser__base_segments_pickle_safe",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/segments/segments_base_test.py::test__parser__base_segments_copy_isolation",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/segments/segments_base_test.py::test__parser__base_segments_parent_ref",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/segments/segments_base_test.py::test__parser__raw_segment_raw_normalized",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/segments/segments_common_test.py::test__parser__core_keyword",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/segments/segments_file_test.py::test__parser__base_segments_file",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/segments/segments_raw_test.py::test__parser__raw_get_raw_segments",
        "status": "PASSED"
    },
    {
        "name": "test/core/parser/segments/segments_raw_test.py::test__parser__raw_segments_with_ancestors",
        "status": "PASSED"
    },
    {
        "name": "test/core/plugin_test.py::test__plugin_manager_registers_example_plugin",
        "status": "FAILED"
    },
    {
        "name": "test/core/plugin_test.py::test__plugin_example_rules_returned[Rule_Example_L001]",
        "status": "FAILED"
    },
    {
        "name": "test/core/plugin_test.py::test__plugin_default_config_read[Example_L001-forbidden_columns]",
        "status": "FAILED"
    },
    {
        "name": "test/core/plugin_test.py::test__plugin_handle_bad_load",
        "status": "PASSED"
    },
    {
        "name": "test/core/plugin_test.py::test__plugin_get_version",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/crawlers_test.py::test_rules_crawlers[RootOnlyCrawler-crawler_kwargs0-SELECT 1 + 2-target_raws_out0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/crawlers_test.py::test_rules_crawlers[SegmentSeekerCrawler-crawler_kwargs1-SELECT 1 + 2-target_raws_out1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/crawlers_test.py::test_rules_crawlers[ParentOfSegmentCrawler-crawler_kwargs2-SELECT 1 + 2-target_raws_out2]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/docstring_test.py::test_content_count[    \\\\*\\\\*Anti-pattern\\\\*\\\\*-1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/docstring_test.py::test_content_count[    \\\\*\\\\*Best practice\\\\*\\\\*-1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/docstring_test.py::test_content_count[\\\\n    \\\\.\\\\. code-block:: (sql|jinja)\\\\n-2]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/docstring_test.py::test_keyword_anti_before_best",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/docstring_test.py::test_backtick_replace",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/functional/raw_file_slices_test.py::test_slices_all[input0-True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/functional/raw_file_slices_test.py::test_slices_all[input1-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/functional/raw_file_slices_test.py::test_slices_all[input2-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/functional/raw_file_slices_test.py::test_slices_any[input0-True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/functional/raw_file_slices_test.py::test_slices_any[input1-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/functional/raw_file_slices_test.py::test_slices_any[input2-True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/functional/segments_test.py::test_segments_add[lhs0-rhs0-expected0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/functional/segments_test.py::test_segments_add[lhs1-rhs1-expected1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/functional/segments_test.py::test_segments_add[lhs2-rhs2-expected2]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/functional/segments_test.py::test_segments_add[lhs3-rhs3-expected3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/functional/segments_test.py::test_segments_all[input0-True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/functional/segments_test.py::test_segments_all[input1-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/functional/segments_test.py::test_segments_any[input0-True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/functional/segments_test.py::test_segments_any[input1-True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/functional/segments_test.py::test_segments_any[input2-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/functional/segments_test.py::test_segments_reversed",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/functional/segments_test.py::test_segments_raw_slices_no_templated_file",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/functional/segments_test.py::test_segments_first_no_predicate",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/functional/segments_test.py::test_segments_first_with_predicate",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/functional/segments_test.py::test_segments_last",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/functional/segments_test.py::test_segments_apply",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/functional/segments_test.py::test_segments_apply_functions[_-expected0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/functional/segments_test.py::test_segments_apply_functions[_-expected1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/functional/segments_test.py::test_segments_apply_functions[_-expected2]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/functional/segments_test.py::test_segment_predicates_and",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/functional/segments_test.py::test_segments_recursive_crawl",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/noqa_test.py::test__linter__raises_malformed_noqa",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/noqa_test.py::test_parse_noqa[-None]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/noqa_test.py::test_parse_noqa[noqa-expected1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/noqa_test.py::test_parse_noqa[noqa?-SQLParseError]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/noqa_test.py::test_parse_noqa[noqa:-expected3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/noqa_test.py::test_parse_noqa[noqa:LT01,LT02-expected4]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/noqa_test.py::test_parse_noqa[noqa: enable=LT01-expected5]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/noqa_test.py::test_parse_noqa[noqa: disable=CP01-expected6]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/noqa_test.py::test_parse_noqa[noqa: disable=all-expected7]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/noqa_test.py::test_parse_noqa[noqa: disable-SQLParseError]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/noqa_test.py::test_parse_noqa[Inline comment before inline ignore -- noqa:LT01,LT02-expected9]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/noqa_test.py::test_parse_noqa[noqa:L04*-expected10]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/noqa_test.py::test_parse_noqa[noqa:L002-expected11]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/noqa_test.py::test_parse_noqa[noqa:L00*-expected12]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/noqa_test.py::test_parse_noqa[noqa:capitalisation.keywords-expected13]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/noqa_test.py::test_parse_noqa[noqa:capitalisation-expected14]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/noqa_test.py::test_parse_noqa_no_dups",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/noqa_test.py::test_linted_file_ignore_masked_violations[1_violation_no_ignore]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/noqa_test.py::test_linted_file_ignore_masked_violations[1_violation_ignore_specific_line]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/noqa_test.py::test_linted_file_ignore_masked_violations[1_violation_ignore_different_specific_line]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/noqa_test.py::test_linted_file_ignore_masked_violations[1_violation_ignore_different_specific_rule]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/noqa_test.py::test_linted_file_ignore_masked_violations[1_violation_ignore_enable_this_range]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/noqa_test.py::test_linted_file_ignore_masked_violations[1_violation_ignore_disable_this_range]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/noqa_test.py::test_linted_file_ignore_masked_violations[1_violation_line_1_ignore_disable_specific_2_3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/noqa_test.py::test_linted_file_ignore_masked_violations[1_violation_line_2_ignore_disable_specific_2_3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/noqa_test.py::test_linted_file_ignore_masked_violations[1_violation_line_3_ignore_disable_specific_2_3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/noqa_test.py::test_linted_file_ignore_masked_violations[1_violation_line_4_ignore_disable_specific_2_3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/noqa_test.py::test_linted_file_ignore_masked_violations[1_violation_line_1_ignore_disable_all_2_3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/noqa_test.py::test_linted_file_ignore_masked_violations[1_violation_line_2_ignore_disable_all_2_3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/noqa_test.py::test_linted_file_ignore_masked_violations[1_violation_line_3_ignore_disable_all_2_3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/noqa_test.py::test_linted_file_ignore_masked_violations[1_violation_line_4_ignore_disable_all_2_3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/noqa_test.py::test_linted_file_ignore_masked_violations[4_violations_two_types_disable_specific_enable_all]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/noqa_test.py::test_linted_file_ignore_masked_violations[4_violations_two_types_disable_all_enable_specific]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/noqa_test.py::test_linted_file_ignore_masked_violations[1_violations_comment_inline_ignore]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/noqa_test.py::test_linted_file_ignore_masked_violations[2_violations_comment_inline_ignore]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/noqa_test.py::test_linted_file_ignore_masked_violations[1_violations_comment_inline_glob_ignore_unmatch]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/noqa_test.py::test_linted_file_ignore_masked_violations[1_violations_comment_inline_glob_ignore_match]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/noqa_test.py::test_linter_noqa",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/noqa_test.py::test_linter_noqa_with_templating",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/noqa_test.py::test_linter_noqa_template_errors",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/noqa_test.py::test_linter_noqa_prs",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/noqa_test.py::test_linter_noqa_tmp",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/noqa_test.py::test_linter_noqa_disable",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/reference_test.py::test_object_ref_matches_table[possible_references0-targets0-True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/reference_test.py::test_object_ref_matches_table[possible_references1-targets1-True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/reference_test.py::test_object_ref_matches_table[possible_references2-targets2-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/reference_test.py::test_object_ref_matches_table[possible_references3-targets3-True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/reference_test.py::test_object_ref_matches_table[possible_references4-targets4-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/reference_test.py::test_object_ref_matches_table[possible_references5-targets5-True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/reference_test.py::test_object_ref_matches_table[possible_references6-targets6-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/reference_test.py::test_object_ref_matches_table[possible_references7-targets7-True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/reference_test.py::test_object_ref_matches_table[possible_references8-targets8-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/reference_test.py::test_object_ref_matches_table[possible_references9-targets9-True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/reference_test.py::test_object_ref_matches_table[possible_references10-targets10-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/reference_test.py::test_object_ref_matches_table[possible_references11-targets11-True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/reference_test.py::test_object_ref_matches_table[possible_references12-targets12-True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/reference_test.py::test_object_ref_matches_table[possible_references13-targets13-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/rules_test.py::test__rules__user_rules",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/rules_test.py::test__rules__rule_selection[T010--resulting_codes0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/rules_test.py::test__rules__rule_selection[T010,T011--resulting_codes1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/rules_test.py::test__rules__rule_selection[T010,T011-T011-resulting_codes2]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/rules_test.py::test__rules__rule_selection[fake_basic--resulting_codes3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/rules_test.py::test__rules__rule_selection[fake_other--resulting_codes4]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/rules_test.py::test__rules__rule_selection[fake_basic,fake_other--resulting_codes5]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/rules_test.py::test__rules__rule_selection[test--resulting_codes6]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/rules_test.py::test__rules__rule_selection[foo--resulting_codes7]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/rules_test.py::test__rules__rule_selection[test,foo--resulting_codes8]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/rules_test.py::test__rules__rule_selection[test-foo-resulting_codes9]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/rules_test.py::test__rules__rule_selection[fb1--resulting_codes10]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/rules_test.py::test__rules__rule_selection[fb2--resulting_codes11]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/rules_test.py::test__rules__filter_unparsable",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/rules_test.py::test__rules__result_unparsable",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/rules_test.py::test__rules__runaway_fail_catch[SELECT * FROM foo-check_tuples0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/rules_test.py::test__rules__runaway_fail_catch[-- noqa: disable=all\\nSELECT * FROM foo-check_tuples1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/rules_test.py::test_rules_cannot_be_instantiated_without_declared_configs",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/rules_test.py::test_rules_legacy_doc_decorators",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/rules_test.py::test_rules_configs_are_dynamically_documented",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/rules_test.py::test_rules_name_validation",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/rules_test.py::test_rule_exception_is_caught_to_validation",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/rules_test.py::test_rule_must_belong_to_all_group",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/rules_test.py::test_std_rule_import_fail_bad_naming",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/rules_test.py::test_rule_set_return_informative_error_when_rule_not_registered",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/rules_test.py::test_rules__lint_result_repr[lint_result0-LintResult(<empty>)]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/rules_test.py::test_rules__lint_result_repr[lint_result1-LintResult(<WhitespaceSegment: ([L:  1, P:  1]) ' '>)]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/rules_test.py::test_rules__lint_result_repr[lint_result2-LintResult(foo: <WhitespaceSegment: ([L:  1, P:  1]) ' '>)]",
        "status": "PASSED"
    },
    {
        "name": "test/core/rules/rules_test.py::test_rules__lint_result_repr[lint_result3-LintResult(foo: <WhitespaceSegment: ([L:  1, P:  1]) ' '>+2F)]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__indices_of_newlines[-positions0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__indices_of_newlines[foo-positions1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__indices_of_newlines[foo\\nbar-positions2]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__indices_of_newlines[\\nfoo\\n\\nbar\\nfoo\\n\\nbar\\n-positions3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__templater_raw",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__templated_file_get_line_pos_of_char_pos[tf_kwargs0-0-1-1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__templated_file_get_line_pos_of_char_pos[tf_kwargs1-20-3-1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__templated_file_get_line_pos_of_char_pos[tf_kwargs2-24-3-5]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__templated_file_find_slice_indices_of_templated_pos[100-True-tf_kwargs0-10-11]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__templated_file_find_slice_indices_of_templated_pos[13-True-tf_kwargs1-0-3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__templated_file_find_slice_indices_of_templated_pos[28-True-tf_kwargs2-2-5]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__templated_file_find_slice_indices_of_templated_pos[12-True-tf_kwargs3-1-3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__templated_file_find_slice_indices_of_templated_pos[20-True-tf_kwargs4-2-3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__templated_file_find_slice_indices_of_templated_pos[13-False-tf_kwargs5-0-1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__templated_file_templated_slice_to_source_slice[in_slice0-out_slice0-True-tf_kwargs0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__templated_file_templated_slice_to_source_slice[in_slice1-out_slice1-True-tf_kwargs1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__templated_file_templated_slice_to_source_slice[in_slice2-out_slice2-True-tf_kwargs2]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__templated_file_templated_slice_to_source_slice[in_slice3-out_slice3-False-tf_kwargs3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__templated_file_templated_slice_to_source_slice[in_slice4-out_slice4-False-tf_kwargs4]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__templated_file_templated_slice_to_source_slice[in_slice5-out_slice5-True-tf_kwargs5]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__templated_file_templated_slice_to_source_slice[in_slice6-out_slice6-True-tf_kwargs6]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__templated_file_templated_slice_to_source_slice[in_slice7-out_slice7-True-tf_kwargs7]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__templated_file_templated_slice_to_source_slice[in_slice8-out_slice8-True-tf_kwargs8]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__templated_file_templated_slice_to_source_slice[in_slice9-out_slice9-True-tf_kwargs9]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__templated_file_templated_slice_to_source_slice[in_slice10-out_slice10-True-tf_kwargs10]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__templated_file_templated_slice_to_source_slice[in_slice11-out_slice11-False-tf_kwargs11]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__templated_file_source_only_slices[file0-expected_result0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/base_test.py::test__templated_file_source_only_slices[file1-expected_result1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja[simple]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja[unboundlocal_bugfix]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slices[basic_block]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slices[strip_left_block]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slices[strip_both_block]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slices[strip_and_templated_whitespace]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slices[strip_both_block_hard]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slices[basic_data]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slices[strip_right_data]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slices[strip_both_data]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slices[strip_both_comment]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slices[union_all_loop1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slices[set_multiple_variables_and_define_macro]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test_templater_set_block_handling",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_error_variable",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_dynamic_variable_no_violations",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_error_syntax",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_error_catastrophic",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_error_macro_path_does_not_exist",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_error_macro_invalid",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_lint_empty",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_a/jinja-True-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_b/jinja-False-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_c_dbt/dbt_builtins_cross_ref-True-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_c_dbt/dbt_builtins_config-True-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_c_dbt/dbt_builtins_is_incremental-True-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_c_dbt/dbt_builtins_ref-True-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_c_dbt/dbt_builtins_source-True-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_c_dbt/dbt_builtins_this-True-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_c_dbt/dbt_builtins_var_default-True-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_c_dbt/dbt_builtins_test-True-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_e/jinja-True-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_f/jinja-True-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_g_macros/jinja-True-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_h_macros/jinja-True-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_i_raw/raw_tag-True-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_i_raw/raw_tag_2-True-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_j_libraries/jinja-True-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_k_config_override_path_macros/jinja-True-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_l_metas/001-False-True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_l_metas/002-False-True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_l_metas/003-False-True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_l_metas/004-False-True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_l_metas/005-False-True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_l_metas/006-False-True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_l_metas/007-False-True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_l_metas/008-False-True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_l_metas/009-False-True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_l_metas/010-False-True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_l_metas/011-False-True]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_m_libraries_module/jinja-True-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_n_nested_macros/jinja-True-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_o_config_override_dbt_builtins/override_dbt_builtins-True-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_p_disable_dbt_builtins/disable_dbt_builtins-True-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_q_multiple_path_macros/jinja-True-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_full[jinja_s_filters_in_library/jinja-True-False]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_block_matching",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_template[-result0-JinjaAnalyzer]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_template[foo-result1-JinjaAnalyzer]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_template[foo {{bar}} z -result2-JinjaAnalyzer]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_template[SELECT {# A comment #} {{field}} {% for i in [1, 3]%}, fld_{{i}}{% endfor %} FROM my_schema.{{my_table}} -result3-JinjaAnalyzer]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_template[{% set thing %}FOO{% endset %} BAR-result4-JinjaAnalyzer]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_template[{% set my_query %}\\nselect 1 from foobarfoobarfoobarfoobar_{{ \"dev\" }}\\n{% endset %}\\n{{ my_query }}\\n-result5-JinjaAnalyzer]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_template[SELECT 1 FROM {%+if true-%} {{ref('foo')}} {%-endif%}-result6-JinjaAnalyzer]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_template[{% for item in some_list -%}\\n    SELECT *\\n    FROM some_table\\n{{ \"UNION ALL\\n\" if not loop.last }}\\n{%- endfor %}-result7-JinjaAnalyzer]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_template[{% macro render_name(title) %}\\n  '{{ title }}. foo' as {{ caller() }}\\n{% endmacro %}\\nSELECT\\n    {% call render_name('Sir') %}\\n        bar\\n    {% endcall %}\\nFROM baz\\n-result8-JinjaAnalyzer]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_template[{% randomtagstart %}\\n    SELECT 1;\\n{% elphony %}\\n    SELECT 2;\\n{% endsomethingweird %}-result9-JinjaAnalyzer]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_template[{% up 'create table xyz' %}\\n    CREATE TABLE xyz (id int);\\n{% down %}\\n    DROP TABLE xyz;\\n{% end %}-result10-DerivedJinjaAnalyzer]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_file[-None-result0-JinjaTemplater]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_file[foo-None-result1-JinjaTemplater]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_file[SELECT {{blah}}, boo {# comment #} from something-override_context2-result2-JinjaTemplater]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_file[SELECT {# A comment #} {{field}} {% for i in [1, 3, 7]%}, fld_{{i}}_x{% endfor %} FROM my_schema.{{my_table}} -override_context3-result3-JinjaTemplater]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_file[SELECT {# A comment #} {{field}} {% for i in [1, 3, 7]%}, fld_{{i}}{% endfor %} FROM my_schema.{{my_table}} -override_context4-result4-JinjaTemplater]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_file[{{ config(materialized='view') }}\\n\\nSELECT 1 FROM {{ source('finance', 'reconciled_cash_facts') }}\\n\\n-override_context5-result5-JinjaTemplater]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_file[SELECT\\n    {% for i in [1, 2, 3] %}\\n        , c_{{i}}+42 AS the_meaning_of_li{{ 'f' * i }}\\n    {% endfor %}\\nFROM my_table-None-result6-JinjaTemplater]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_file[{% set thing %}FOO{% endset %} SELECT 1-None-result7-JinjaTemplater]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_file[{% include 'subdir/include_comment.sql' %}\\n\\nSELECT 1\\n-None-result8-JinjaTemplater]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_file[{% import 'echo.sql' as echo %}\\n\\nSELECT 1\\n-None-result9-JinjaTemplater]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_file[{% from 'echo.sql' import echo %}\\n{% from 'echoecho.sql' import echoecho %}\\n\\nSELECT\\n    {{ echo(\"foo\") }},\\n    {{ echoecho(\"bar\") }}\\n-None-result10-JinjaTemplater]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_file[{% do true %}\\n\\n{% if true %}\\n    select 1\\n{% endif %}-None-result11-JinjaTemplater]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_file[{% for x in ['A', 'B'] %}\\n    {% if x != 'A' %}\\n    SELECT 'E'\\n    {% endif %}\\n{%- endfor %}\\n-None-result12-JinjaTemplater]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_file[{%- for x in ['A', 'B'] -%}{%- if x == 'B' -%}SELECT 'B';{%- endif -%}{%- if x == 'A' -%}SELECT 'A';{%- endif -%}{%- endfor -%}-None-result13-JinjaTemplater]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_file[select\\n    id,\\n    {%- for features in [\"value4\", \"value5\"] %}\\n        {%- if features in [\"value7\"] %}\\n            {{features}}\\n            {%- if not loop.last -%},{% endif %}\\n        {%- else -%}\\n            {{features}}\\n            {%- if not loop.last -%},{% endif %}\\n        {%- endif -%}\\n    {%- endfor %}\\nfrom my_table\\n-None-result14-JinjaTemplater]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_file[{% set col= \"col1\" %}\\nSELECT {{ col }}\\n-None-result15-JinjaTemplater]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_file[{% set some_part_of_the_query %}\\n    {% for col in [\"col1\"] %}\\n    {{col}}\\n    {% endfor %}\\n{% endset %}\\n\\nSELECT {{some_part_of_the_query}}\\nFROM SOME_TABLE\\n-None-result16-JinjaTemplater]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_file[{% set whitelisted= [\\n    {'name': 'COL_1'},\\n    {'name': 'COL_2'},\\n    {'name': 'COL_3'}\\n] %}\\n\\n{% set some_part_of_the_query %}\\n    {% for col in whitelisted %}\\n    {{col.name}}{{ \", \" if not loop.last }}\\n    {% endfor %}\\n{% endset %}\\n\\nSELECT {{some_part_of_the_query}}\\nFROM SOME_TABLE\\n-None-result17-JinjaTemplater]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_file[{% if true %}\\nSELECT 1 + 1\\n{%- endif %}-None-result18-JinjaTemplater]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_file[SELECT {% block table_name %}block_contents{% endblock %} FROM {{ self.table_name() }}\\n-None-result19-JinjaTemplater]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_file[{% block table_name %}block_contents{% endblock %}\\nSELECT\\n{% for j in [4, 5, 6] %}\\nFROM {{ j }}{{ self.table_name() }}\\n{% endfor %}\\n-None-result20-JinjaTemplater]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_file[{{ statement('variables', fetch_result=true) }}\\n-override_context21-result21-JinjaTemplater]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_file[{% call statement('variables', fetch_result=true) %}\\nselect 1 as test\\n{% endcall %}\\nselect 2 as foo\\n-override_context22-result22-JinjaTemplater]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_file[{% macro render_name(title) %}\\n  '{{ title }}. foo' as {{ caller() }}\\n{% endmacro %}\\nSELECT\\n    {% call render_name('Sir') %}\\n        bar\\n    {% endcall %}\\nFROM baz\\n-None-result23-JinjaTemplater]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_slice_file[{% up 'create table xyz' %}\\n    CREATE TABLE xyz (id int);\\n{% down %}\\n    DROP TABLE xyz;\\n{% end %}-None-result24-DerivedJinjaTemplater]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_jinja_large_file_check",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test_jinja_undefined_callable[-expected_violation0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test_jinja_undefined_callable[templating-None]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test_dummy_undefined_fail_with_undefined_error",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test_undefined_magic_methods",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_lint_unreached_code[simple_if_true]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_lint_unreached_code[simple_if_false]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_lint_unreached_code[if_elif_else]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_lint_unreached_code[if_else_if_nested]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_lint_unreached_code[if_elif_else_chain_scoring]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_lint_unreached_code[if_true_elif_type_error_else]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/jinja_test.py::test__templater_lint_unreached_code[inline_select]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/placeholder_test.py::test__templater_raw",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/placeholder_test.py::test__templater_param_style[no_changes]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/placeholder_test.py::test__templater_param_style[colon_simple_substitution]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/placeholder_test.py::test__templater_param_style[colon_accept_block_at_end]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/placeholder_test.py::test__templater_param_style[colon_tuple_substitution]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/placeholder_test.py::test__templater_param_style[colon_nospaces]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/placeholder_test.py::test__templater_param_style[colon_nospaces_double_colon_ignored]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/placeholder_test.py::test__templater_param_style[question_mark]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/placeholder_test.py::test__templater_param_style[numeric_colon]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/placeholder_test.py::test__templater_param_style[pyformat]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/placeholder_test.py::test__templater_param_style[dollar]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/placeholder_test.py::test__templater_param_style[numeric_dollar]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/placeholder_test.py::test__templater_param_style[numeric_dollar_with_braces]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/placeholder_test.py::test__templater_param_style[numeric_dollar_with_braces_and_string]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/placeholder_test.py::test__templater_param_style[percent]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/placeholder_test.py::test__templater_param_style[ampersand]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/placeholder_test.py::test__templater_param_style[flyway_var0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/placeholder_test.py::test__templater_param_style[flyway_var1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/placeholder_test.py::test__templater_param_style[params_not_specified]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/placeholder_test.py::test__templater_custom_regex",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/placeholder_test.py::test__templater_setup",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/placeholder_test.py::test__templater_styles",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_error",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_intermediate__trim[int_slice0-foo-head_test0-tail_test0-int_test0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_intermediate__trim[int_slice1-foo-head_test1-tail_test1-int_test1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_intermediate__trim[int_slice2-foo1bar-head_test2-tail_test2-int_test2]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_intermediate__trim[int_slice3-foofoofoobarfoofoobarbar-head_test3-tail_test3-int_test3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_substring_occurrences[-substrings0-positions0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_substring_occurrences[a-substrings1-positions1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_substring_occurrences[foobar-substrings2-positions2]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_substring_occurrences[bar foo bar foo-substrings3-positions3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_sorted_occurrence_tuples[test0-result0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_sorted_occurrence_tuples[test1-result1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_sorted_occurrence_tuples[test2-result2]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_slice_template[-result0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_slice_template[foo-result1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_slice_template[foo {bar} z {{ y-result2]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_split_invariants[raw_sliced0-literals0-raw_occurrences0-templated_occurrences0-0-result0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_split_invariants[raw_sliced1-literals1-raw_occurrences1-templated_occurrences1-3-result1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_split_uniques_coalesce_rest[split_file0-raw_occurrences0-templated_occurrences0--result0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_split_uniques_coalesce_rest[split_file1-raw_occurrences1-templated_occurrences1-foo-result1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_split_uniques_coalesce_rest[split_file2-raw_occurrences2-templated_occurrences2-SELECT nothing, 435.24 as foo, spam, '{}' as convertible from something-result2]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_split_uniques_coalesce_rest[split_file3-raw_occurrences3-templated_occurrences3-foo , bar-result3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_slice_file[--True-result0]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_slice_file[foo-foo-True-result1]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_slice_file[SELECT {blah}, {foo:.2f} as foo, {bar}, '{{}}' as convertible from something-SELECT nothing, 435.24 as foo, spam, '{}' as convertible from something-True-result2]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_slice_file[SELECT {blah} FROM something-WITH wrap AS (SELECT nothing FROM something) SELECT * FROM wrap-True-result3]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_slice_file[SELECT {blah} FROM something-WITH wrap AS (SELECT nothing FROM something) SELECT * FROM wrap-False-result4]",
        "status": "PASSED"
    },
    {
        "name": "test/core/templaters/python_test.py::test__templater_python_large_file_check",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi__file_lex[a b-res0]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi__file_lex[b.c-res1]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi__file_lex[abc \\n \\t def  ;blah-res2]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectKeywordSegment-select]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[NakedIdentifierSegment-online_sales]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[BareFunctionSegment-current_timestamp]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[FunctionSegment-current_timestamp()]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[NumericLiteralSegment-1000.0]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ExpressionSegment-online_sales / 1000.0]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[IntervalExpressionSegment-INTERVAL 1 YEAR]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ExpressionSegment-CASE WHEN id = 1 THEN 'nothing' ELSE 'test' END]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ExpressionSegment-CASE WHEN id = 1 THEN CASE WHEN true THEN 'something' ELSE 'nothing' END ELSE 'test' END]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ExpressionSegment-CAST(ROUND(online_sales / 1000.0) AS varchar)]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ExpressionSegment-name NOT LIKE '%y']",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-MIN (test.id) AS min_test_id]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ExpressionSegment-DATE_ADD(CURRENT_DATE('America/New_York'), INTERVAL 1 year)]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ExpressionSegment-my_array[1]]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ExpressionSegment-my_array[OFFSET(1)]]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ExpressionSegment-my_array[5:8]]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ExpressionSegment-4 + my_array[OFFSET(1)]]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ExpressionSegment-bits[OFFSET(0)] + 7]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-(count_18_24 * bits[OFFSET(0)]) / audience_size AS relative_abundance]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ExpressionSegment-count_18_24 * bits[OFFSET(0)] + count_25_34]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-(count_18_24 * bits[OFFSET(0)] + count_25_34) / audience_size AS relative_abundance]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectStatementSegment-SELECT t.val/t.id FROM test WHERE id*1.0/id > 0.8]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-t.val/t.id]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-CAST(num AS INT64)]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-CAST(num AS numeric(8,4))]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-a.*]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-a.b.*]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-a.b.c.*]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-a..c.*]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment--some_variable]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-- some_variable]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ExpressionSegment-concat(left(uaid, 2), '|', right(concat('0000000', SPLIT_PART(uaid, '|', 4)), 10), '|', '00000000')]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ExpressionSegment-c is null]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ExpressionSegment-c is not null]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-c is null as c_isnull]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-c is not null as c_notnull]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[ExpressionSegment-NULL::INT]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[SelectClauseElementSegment-NULL::INT AS user_id]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[TruncateStatementSegment-TRUNCATE TABLE test]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_parses[TruncateStatementSegment-TRUNCATE test]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_not_match[ObjectReferenceSegment-\\n     ]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_not_parse[SELECT 1 + (2 -err_locations0]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_not_parse[SELECT * FROM a ORDER BY 1 UNION SELECT * FROM b-err_locations1]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_not_parse[SELECT * FROM a LIMIT 1 UNION SELECT * FROM b-err_locations2]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_specific_segment_not_parse[SELECT * FROM a ORDER BY 1 LIMIT 1 UNION SELECT * FROM b-err_locations3]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_is_whitespace",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_parse_indented_joins[select field_1 from my_table as alias_1-True-meta_loc0]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_parse_indented_joins[select field_1 from my_table as alias_1-False-meta_loc1]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_parse_indented_joins[select field_1 from my_table as alias_1 join foo using (field_1)-True-meta_loc2]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/ansi_test.py::test__dialect__ansi_parse_indented_joins[select field_1 from my_table as alias_1 join foo using (field_1)-False-meta_loc3]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/bigquery_test.py::test_bigquery_relational_operator_parsing",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/bigquery_test.py::test_bigquery_table_reference_segment_iter_raw_references[bigquery-public-data.pypi.file_downloads-reference_parts0]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/bigquery_test.py::test_bigquery_table_reference_segment_iter_raw_references[`bigquery-public-data.pypi.file_downloads`-reference_parts1]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/bigquery_test.py::test_bigquery_table_reference_segment_iter_raw_references[foo.far.bar-reference_parts2]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/bigquery_test.py::test_bigquery_table_reference_segment_iter_raw_references[`foo.far.bar`-reference_parts3]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/bigquery_test.py::test_bigquery_table_reference_segment_iter_raw_references[a-b.c-d.e-f-reference_parts4]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[trino-array.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[trino-range_offset.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[trino-select_interval.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[trino-integer_types.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[trino-bare_functions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[trino-regexp_replace_with_lambda.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[trino-within_group.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[trino-values.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[trino-timestamp_resolutions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[trino-analyze.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-update.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-truncate_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-semicolon_delimiters.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-drop_cast.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_where_in_unnest.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-from_fetch.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_table_a_pk_unique_fk_constraints.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_simple_j.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_union_distinct.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_h.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_p.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_named_window.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-arithmetic_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_user.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_nested_join.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-drop_type.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-rollback_work.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-transactions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_database_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-functions_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_with_b.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-set_order_by_complex.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_fetch.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_schema_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_sample_bernoulli_10_aliased.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-with_compound_select_union.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-commit_and_no_chain.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_except.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-double_dot.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_g.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_union.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_c.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_b.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-rollback_work_and_no_chain.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-set_order_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-bracket_in_comment.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-insert_default_values.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-having_fetch.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_table_as.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_s.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_natural_join.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_function_no_args.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-insert_using_subquery.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-delete_from.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_with_offset_limit.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-drop_index_simple.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-grant_all_on_mytable_to_role.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_multiple_named_windows.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-grant_select_col1_col2_update_col1_on_mytable_to_public.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-naked_identifiers.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-drop_table_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_intersect.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-unaliased_using_subquery.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_n.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_u.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-rollback.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_numeric_literal_exponential_format.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-drop_trigger.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_sample_bernoulli_order_limit.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-comments.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_r.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-grant_update_on_all_tables_in_schema_a_to_public.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-with_insert_with_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_case_b.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-grant_select_on_mytable_to_public.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-commit_work_and_no_chain.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-with_nested_in_with_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-with_insert_statement_b.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-commit_work.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_cast.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-group_by_fetch.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_index_simple.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_trailing_comma_column_list.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_view_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-update_with_from_clause.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-functions_b.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-drop_model.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_table_table_comment.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-empty_file.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-drop_view_a_cascade.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_with_limit_and_offset.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_cross_join.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_in_multiline_comment.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_v.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_l.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-grant_all_privileges_on_mytable_to_role.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_with_recursive.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_simple_i.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-multi_statement_c.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-like_operators.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-describe_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-drop_view_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_simple_b.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_a_and_not_b.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-truncate_table_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_table_varchar.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_table_as_select_cte_parentheses.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-drop_index_if_exists.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_simple_g.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-with_insert_statement_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_j.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_f.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-drop_view_a_restrict.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_function_in_group_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-update_set_case.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-ansi_cast_with_whitespaces.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_table_constraint_default.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_table_column_comment.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-grant_multiple_tables.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-non_breaking_space.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-drop_table_a_restrict.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_d.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_with_simple_limit.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_database_if_not_exists.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-with_update_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-alter_table_rename_to.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_zero_argument_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-merge_into.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_sample_system_10.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-trim_functions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_sample_system_10_repeatable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_t.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_table_a_c1_c2.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_case_c.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_simple_e.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_with_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-rollback_and_no_chain.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_table_constraint_reference_option.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-drop_schema.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_m.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_o.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-drop_table_a_cascade.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-expression_recursion.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_order_fetch.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-where_fetch.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-escaped_quotes.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_trigger.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-escape.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_with_brackets.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_table_double_precision.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_g_fetch.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-bracketed_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_q.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_simple_d.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_overlaps.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_true_and_not_false.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_sample_bernoulli_10.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_table_as_select_cte_no_parentheses.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-shorthand_cast.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_named_window_no_parentheses.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-expression_recursion_2.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-multi_statement_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_from_where_overlaps.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_named_window_with_parentheses.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_table_named_group.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_sequence.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-multi_statement_b.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_union_bracketed.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-numeric_literal.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_e.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-insert_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_index_if_not_exists.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-with_no_schema_binding.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-update_with_table_alias.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_many_join.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_schema_if_not_exists.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_sample_system_10_aliased.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-with_insert_bracketed_with_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_table_default_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_table_a_column_constraints.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_bitwise_operators.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_fn_square_bracket_array_parameter.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-alter_sequence.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_simple_f.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-table_expression.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_right.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_with_where_clause_functions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-revoke_select_on_table_a_from_group_b.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-grant_all_on_table_mytable_to_role.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-drop_sequence.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-insert_with_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_sample_bernoulli_10_repeatable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-grant_select_update_insert_on_mytable_to_public.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-modulo.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_case_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_named_windows_each_window_specification.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-drop_table_if_exists_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_table_auto_increment.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_simple_h.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_union_all.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_simple_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-commit.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_view_if_not_exists.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_role.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-grant_select_on_mytable_to_public_with_grant_option.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_table_column_constraint.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-create_model_options.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-set_schema_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[ansi-select_simple_c.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-is_not_distinct.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-delete.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-for_in.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_1_lt_0.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-create_external_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_case.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_where_array_element_less_than.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_quoting.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_function_object_fields.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-drop_materialized_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_udf_quote_project_and_datasetfunctionname.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_udf_quote_project_name.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-handle_exception.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-array_agg_ignore_nulls.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-typeless_array.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-create_view_options_as.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_except_replace.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_except.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_interval_expression.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_group_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-set_variable_single.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-create_js_function_underscore_name.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-literals_with_data_type_and_quoted.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-alter_materialized_view_set_options.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_where_greater_than.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_natural_join.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-create_table_options_as.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-create_function_no_args.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-create_table_partition_by_cluster_by_as.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_multi_except.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-create_js_function_complex_types.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_with_date_literal_coercion_and_two_part_string_interval.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-create_function_with_args.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-array_agg_distinct_ignore_nulls.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_ml_predict_with_select.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-array_agg_respect_nulls.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-call_procedure.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_if.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_example.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_less_than_greater_than.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_for_system_time.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-create_or_replace_table_options_as.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_identifiers.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-export_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_with_offset_3.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_with_offset_2.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-declare_variable_with_default.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_with_window.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-create_temp_function_with_select.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-interval_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_with_union_and_qualify.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-create_table_column_options.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-procedural_statements.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_struct.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_where_less_than.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-insert.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_with_qualify.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-normalize_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_rows_between.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-create_table_keys.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-alter_table_set_options.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-alter_table_alter_column.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-typeless_struct.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_mixture_of_array_literals.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_datetime.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-dateparts.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-create_table_trailing_comma.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_udf_quote_everything.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-execute_immediate.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-alter_table_rename_to.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-merge_into.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-begin.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_function_with_named_arguments.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_1_gt_0.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-drop_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_with_offset.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_extract.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-create_snapshot_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_gt_lt.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-create_js_function_simple.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_ml_weights.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_typeless_struct_inside_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-alter_schema.sql]",
        "status": "FAILED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-any_value_having.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-create_row_access_policy.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-create_table_columns_partition_options.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_function_parameter_order_by_multiple_columns.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_replace.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_column_object_with_keyword.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-declare_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-create_js_function_options_library_array.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-alter_table_add_column.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-alter_view_set_options.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_safe_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-create_schema.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-create_js_function_deterministic.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_udf_quote_nothing.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-create_procedure.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-create_or_replace_sql_function_any_type.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_unpivot.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-parameters.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-set_variable_multiple.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-assert.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-create_materialized_view_as_replica_of.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-create_table_options.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_set_operators.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-alter_table_rename_column.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_lt_gt.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-create_table_default_collate.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_pivot.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-create_table_like_copy_clone.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-tablesample.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_hyphenated_table_name_in_from.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-alter_table_drop_column.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-string_literals.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-create_table_hyphen_project.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-create_materialized_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-create_table_partition_by_as.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-select_empty_array_literal.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[bigquery-create_js_function_quoted_name.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-create_external_file_format.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-delete.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-update.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-begin_end_nested.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-join_hints.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-create_table_with_sequence_bracketed.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-begin_end_no_semicolon.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-delete_azure_synapse_analytics.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-create_external_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-create_user.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-raiserror.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-nested_joins.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-drop_procedure.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-alter_and_drop.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-select_into.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-begin_end.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-functions_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-temp_tables.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-create_table_as_select.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-create_table_with_sequence.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-set_statements.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-create_view_with_cte.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-transaction.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-convert.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-goto_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-hints.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-create_view_with_set_statements.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-datepart.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-temporal_tables.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-comment_blocks.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-create_table_with_distribution.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-select_top.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-stored_procedured_mixed_statements.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-multi_statement_without_semicolon.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-select_natural_join.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-create_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-bulk_insert.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-select_cross_apply.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-print.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-cte_s.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-select_date_functions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-stored_procedure_begin_end.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-stored_procedure_single_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-create_view_with_unpivot.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-openjson.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-collate.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-create_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-if_else_begin_end.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-insert_with_identity_insert.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-synonym.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-while_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-cast_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-triggers.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-create_view_with_pivot.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-merge.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-table_variables.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-create_type.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-create_view_with_columns.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-create_table_with_trailing_comma.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-rename_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-execute.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-create_fulltext_index.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-create_table_with_table_option_segment.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-sequence.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-create_table_on_filegroup.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-waitfor.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-add_index.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-group_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-drop_external_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-insert_default.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-date_functions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-function_default_params.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-minimal_function_no_alter.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-outer_apply.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-drop_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-create_columnstore_index.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-reconfigure.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-create_external_data_source.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-alter_table_switch.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-minimal_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-select_for.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-insert_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-if_else.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-create_schema.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-create_master_key.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-declare_with_following_statements.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-create_table_constraints.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-drop_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-create_procedure.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-create_partition_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-try_catch.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-functions_agg.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-window_functions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-system-variables.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-create_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-alter_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-openrowset.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-drop_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-function_no_return.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-create_database_scoped_credential.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-cursor.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-grant_deny_revoke.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-alter_index.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-select_pivot.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-go_delimiters.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-tablesample.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-declare_table_type.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-select.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-function_with_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-copy.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-drop_user.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-sqlcmd_command.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-stored_procedure_simple.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-create_partition_scheme.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[tsql-create_role.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[vertica-delete.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[vertica-join_types.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[vertica-array.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[vertica-create_table_like.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[vertica-join_no_space.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[vertica-null_cast_with_whitespaces.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[vertica-datetime_units.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[vertica-cast_with_whitespaces.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[vertica-bare_functions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[vertica-create_table_as.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[vertica-single_quote.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[vertica-create_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[vertica-create_projection.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[vertica-create_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[vertica-within_group.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[vertica-select_case_null_cast.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[vertica-limit_clause.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[vertica-insert.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[vertica-position.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[vertica-select_frame_clause.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[vertica-flex_functions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[vertica-group_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[vertica-datatypes.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[vertica-comment_on.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[vertica-select_case_cast.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[vertica-json_operators.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[vertica-update_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[vertica-escape.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[vertica-set.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[vertica-alter_schema.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[vertica-alter_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[vertica-create_schema.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[vertica-drop_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[vertica-alter_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[vertica-subquery.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[vertica-with.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[vertica-select.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[vertica-null_filters.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[vertica-copy.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[vertica-grant_privileges.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[vertica-revoke.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[soql-date_literals.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[soql-select_where_date_n_literals.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[soql-select_where_date_literals.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[db2-labeled_duration.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[db2-join_types.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[db2-case.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[db2-declare_global_temporary_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[db2-offset_fetch_limit.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[db2-create_table_field_name_with_pound_sign.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[db2-call_stored_proc.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[db2-day_unit.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[db2-values.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[db2-function_within_group.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[db2-lateral.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[db2-create_index.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[db2-select_ordered_nested_sets.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[db2-special_registers.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[db2-over.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[db2-where_like.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[db2-select.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-delete.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-copy_into_location_partitionby.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-create_resource_monitor.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-cast_datatype_accessor.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-set_call_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-copy_into_location_GoogleCloud.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-select_like_clause.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-create_external_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-select_rename.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-create_user.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-col_position.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-list_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-identifier_pseudo_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-transactions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-multiple_shorthand_casts.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-begin_end.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-return.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-copy_into_location.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-call.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_storage_integration.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-select_group_by_cube_rollup.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-select_except.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-frame_clause.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-datetime_units.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-select_union.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-object_literals.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_pipe.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-bare_functions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-create_task.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-create_stage.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-semi_structured_4.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-match_recognize.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_session_set_timezone.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-set_command.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-select_where_is_distinct_from.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-non_reserved_keywords.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_task_set_special_simple.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_table_column.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-create_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-create_external_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_streamlit.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-json_underscore_key.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-remove_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-string_literal.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_network_policy.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-copy_into_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-qualify.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_session_unset_parameters.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-unset.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-semi_structured_3.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_file_format.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-create_masking_policy.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-explain.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_stage.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_task_set_special_full.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_warehouse.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_masking_policy.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-select_transient_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-first_value_ignore_nulls.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_task_if_exists_resume.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-create_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-pivot.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-within_group.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_task_unset_full.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-select_values.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-group_by_all.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-lateral_flatten_after_join.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-call_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_resource_monitor.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-changes_clause.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-sample.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-create_table_with_partition_as_column_name.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-execute_task.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_task_resume.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-select_grouping_sets.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-comment_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-select_system_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-for_in_loop.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-datetime_intervals.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_stream.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-grant_revoke.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-get_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_materialized_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-insert.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_external_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-semi_structured.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-create_warehouse.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_user_remove_delegate_auth.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-execute_immediate.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-create_stream.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_task_modify_as.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-merge_into.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_task_unset_simple.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-select_clause_modifiers.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-copy_into_location_Azure.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-create_tag.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-let.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-escape.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-window_function_ignore_nulls.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-select_asof_join.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_schema.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-drop_statements.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-create_database.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_task_remove_after.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-select_exclude.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-create_network_policy.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-undrop.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-select_replace.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-copy_into_location_Amazon_SC3.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-create_pipe.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-create_schema.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_external_volume.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-create_notification_integration.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-create_streamlit.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-truncate_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_user_delegate_auth.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-create_procedure.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-describe_statements.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_task_set_simple.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-select_exclude_rename.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-create_sequence.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-create_database_role.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_share.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-create_clone.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_procedure.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_user_reset_password.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_user_delegate_auth_role.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_user_rename.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-put_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-create_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_user_unset_values.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-limit.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_account.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-semi_structured_2.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-use.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-qualify_union.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_database.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_sequence.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_user_set_values.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-select_stages_files.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_task_set_full.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_external_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-connect_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_role.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_task_suspend.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-create_file_format.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-select.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_task_modify_when.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-copy_files_into_location_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-inline_comment.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-create_external_volume.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_task_add_after.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_table_clustering_action.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-create_table_comments.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-create_storage_integration.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-alter_user_abort_query.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[snowflake-create_role.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[duckdb-asof_join.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[duckdb-create_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[duckdb-unpivot.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[duckdb-select_quoted.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[duckdb-qualify.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[duckdb-select_exclude_replace.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[duckdb-anti_semi_join.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[duckdb-group_order_by_all.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[duckdb-select_columns.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[duckdb-pivot.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[duckdb-from_first.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[duckdb-extract_temporal.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[duckdb-list_struct.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[duckdb-json_operators.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[duckdb-select_exclude.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[duckdb-select_replace.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[duckdb-select_lambda.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[duckdb-select.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[duckdb-positional_join.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-update.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-set_sql_log_bin.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-declare_default_quotedliteral.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-delete_multitable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-use_key.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-handler_sqlstate_value.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-ignore_key.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-loop_label.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-drop_index_with_algorithm.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-grant.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-set_session_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-get_diagnostics_condition_session_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-create_user.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-resignal_set_signal_info.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-drop_procedure.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-prepare_session_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-declare_condition.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-if_multiple_expression.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-line_comment.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-use_index_for_join.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_into_outfile_lines_starting.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-function_no_sql.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-hexadecimal_literal.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-if_session_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-execute_prepared_stmt.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-delimiter_procedure.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_for_update.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-declare_cursor.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-function_sql_security_invoker.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-procedure_in_param.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-close_qualified.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-function_return.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-system_variables.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-function_sql_security_definer.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-signal_condition_sqlstate_value.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-function_definer.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-force_index_left_join.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-ignore_index_for_group_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-create_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_into_outfile_fields_escaped.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-execute_prepared_stmt_using_multiple_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-use_index_for_order_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-load_data.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_sql_buffer_result.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_for_update_of_multiple.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-procedure_inout_param.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-use_index.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-quoted_literal.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-get_diagnostics_condition_local_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_into_outfile.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-create_table_primary_foreign_keys.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-explain.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-delimiter_select.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-interval.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-force_index_for_order_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_into_outfile_fields_terminated.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-analyze_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-create_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-drop_trigger.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-open_qualified.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_local_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-set_multiple_variables.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-optimize_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-handler_error_code.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-drop_prepare.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_for_update_skip_locked.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-call_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-if_subquery_expression.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-create_table_constraint_unique.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-signal_set_signal_info_multiple.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-flush.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-reset_master.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-set_session_variable_expression.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-create_table_unique_key.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-if_nested.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-prepare_local_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-function_notdeterministic.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-rename_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-create_table_null_position.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-signal.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-loop_no_label.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-insert.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-check_constraint.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-execute_prepared_stmt_using.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-force_index.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-fetch_session_multiple.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-declare_exit_handler_sqlexception.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-checksum_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_sql_calc_found_rows.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-handler_not_found.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-signal_condition_name.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-repeat_no_label.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-while_label.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-create_index.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_into_outfile_fields_optionally_enclosed.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-get_diagnostics_condition_info_multiple_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-create_table_index.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-resignal_condition_name.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_for_update_nowait.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-force_key.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-help_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_into_session_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-resignal.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-declare_continue_handler_sqlexception.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-get_diagnostics_condition_info_session_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-repair_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-set_names.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-create_table_datetime.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-force_index_for_group_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-begin.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-drop_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-check_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_sql_cache.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-fetch.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-bit_value_literal.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-create_trigger.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-get_diagnostics_condition_info_local_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_sql_no_cache.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-create_table_equals_optional.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_straight_join.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_for_update_lock_in_share_mode.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-create_database.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-variable_assignment.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_lock_in_share_mode.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-if.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-signal_condition_sqlstate.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-delimiter_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-handler_condition_name.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-if_else.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-alter_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-procedure_out_param.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-function_modifies_sql.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_into_multiple_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-purge_binary_logs.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_for_share.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-ignore_index.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_into_outfile_lines_terminated.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-function_comment.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-resignal_set_signal_info_multiple.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-get_diagnostics_condition_numeric.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-declare_undo_handler_sqlexception.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_sql_small_result.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-fetch_next_from.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-force_index_for_join.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_multiple_partition.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-get_diagnostics_row_count.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-function_reads_sql.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-use_database.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_partition.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-use_index_for_group_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-replace.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-resignal_condition_sqlstate_value.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-get_diagnostics_number.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_into_outfile_fields_enclosed.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-repeat_label.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-fetch_from.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-close.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-alter_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-procedure_definer.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-repeat_multiple_statements.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_distinctrow.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-fetch_multiple.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_high_priority.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-drop_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-drop_index.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-handler_sqlwarning.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_session_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-use_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-values_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-alter_database.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-declare_default_numeric.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-ignore_index_for_join.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_sql_big_result.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-handler_sqlstate.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-ignore_index_for_order_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-if_elseif.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_into_dumpfile.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-resignal_condition_sqlstate.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-while_no_label.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-nested_begin.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-json.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-create_table_column_charset.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-loop_multiple_statements.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-fetch_session.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-declare_local_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-open.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_for_update_of.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-deallocate_prepare.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-column_alias.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-drop_index_with_lock.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-prepare_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-signal_set_signal_info.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-set_booleans.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-create_role.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[mysql-select_boolean_operators.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-update.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-alter_user.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-create_external_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-create_user.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-insert_into.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-drop_procedure.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-select_into.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-transactions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-create_group.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-array_unnest.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-call.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-select_dateadd.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-temporary_tables.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-cast_with_whitespaces.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-create_table_as.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-select_top.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-single_quote.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-create_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-create_external_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-unpivot.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-qualify.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-create_datashare.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-datetime_cast.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-create_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-desc_datashare.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-pivot.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-create_model.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-alter_group.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-cast_conversion.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-attach_rls_policy.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-lock_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-dateparts.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-detach_rls_policy.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-approximate_functions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-select_from_with_parenthesis.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-declare.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-unload.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-show_model.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-create_rls_policy.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-create_external_schema.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-fetch.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-create_external_table_as.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-select_datetime_functions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-grant_datashare_usage.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-alter_schema.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-alter_datashare.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-show_datashares.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-alter_default_privileges.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-drop_datashare.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-object_unpivot.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-create_schema.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-select_first_value.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-create_library.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-create_procedure.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-unreserved_keywords.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-window_functions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-alter_procedure.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-close.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-create_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-alter_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-analyze_compression.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-drop_rls_policy.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-super_data_type.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-select_keywords.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-vacuum.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-copy.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-create_materialized_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-pattern_match_expressions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[redshift-percentile_cont.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-drop_table_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-alter_system.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-select_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-create_consumer_group.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-explain_virtual.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-alter_user.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-drop_script_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-kill_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-rename_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-create_adapter_script_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-create_user.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-create_scripting_lua_script_statement2.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-drop_schema_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-create_scripting_lua_script_statement1.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-open_close_schema.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-preload_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-alter_table_column.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-create_function_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-create_udfscript_statement4.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-create_udfscript_statement5.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-Add_Days.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-create_udfscript_statement2.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-export_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-flush_statistics.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-alter_session.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-drop_consumer_group.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-access_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-create_connection.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-comment_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-alter_virtual_schema_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-execute_script.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-drop_connection_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-import_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-create_table_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-alter_table_distribute_partition.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-delete_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-truncate_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-recompress_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-create_scripting_lua_script_statement3.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-update_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-insert_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-create_schema.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-create_udfscript_dot_syntax.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-create_udfscript_statement1.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-alter_schema_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-create_virtual_schema_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-drop_cascade_restrict_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-values_in_subquery.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-create_udfscript_statement3.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-alter_consumer_group.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-alter_role.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-alter_table_constraint.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-create_view_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-alter_connection.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-merge_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-data_type_test.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-create_python_scalar_script.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-create_lua_script_bracket.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-drop_cascade_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[exasol-create_role.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[oracle-join_types.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[oracle-comment.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[oracle-prompt.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[oracle-bare_functions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[oracle-select_natural_join.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[oracle-create_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[oracle-fetch_first_row_only.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[oracle-named_argument.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[oracle-create_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[oracle-non_ansi_joins.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[oracle-within_group.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[oracle-interval_operations.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[oracle-space_between_alias_and_column.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[oracle-lateral.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[oracle-temporary_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[oracle-pivot_unpivot.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[oracle-hierarchical_queries.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[oracle-database_link.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[oracle-quoted_slash.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[oracle-alter_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[oracle-drop_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[oracle-comparison_operators_with_space.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[oracle-at_signs.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[oracle-bind_variables.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[teradata-set_query_band.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[teradata-create_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[teradata-set_session.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[teradata-update_from.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[teradata-database.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[teradata-comparison_operators.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[teradata-collect_stats.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[teradata-comment_on_column_stmt.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[teradata-create_table_stmt_4.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[teradata-create_table_stmt_2.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[teradata-select_stmt.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[teradata-qualify_expression_union.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[teradata-qualify_expression.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[teradata-select_top.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[teradata-select_stmt_normalize.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[teradata-collect_stats_2.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[teradata-delete_stmt.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[teradata-create_table_stmt_3.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[teradata-create_table_with_data.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[teradata-qualify_over.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[teradata-create_table_stmt.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[teradata-select_date.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[teradata-comment_on_table_stmt.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[teradata-select_stmt_cast.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[teradata-bteq_stmt.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-delete.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-join_types.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-array.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-drop_cast.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-range_operators.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-drop_database.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-drop_materialized_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-drop_type.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-join_no_space.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-drop_procedure.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-drop_aggregate.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-select_into.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-psql_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-call.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-overlaps.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-create_publication.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-drop_owned.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-datetime_units.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-cast_with_whitespaces.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-postgres_postgis_operators.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-bare_functions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-create_table_as.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-select_natural_join.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-single_quote.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-postgis.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-create_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-explain.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-values_alias.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-create_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-drop_trigger.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-create_statistics.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-create_policy.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-within_group.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-pgvector.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-truncate.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-create_cast.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-alter_trigger.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-reassign_owned.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-alter_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-limit_clause.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-create_type.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-create_collation.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-values.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-alter_materialized_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-create_dollar_quoted_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-insert.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-refresh_materialized_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-alter_policy.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-drop_statistics.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-position.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-drop_domain.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-create_server.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-cluster.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-table_functions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-select_frame_clause.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-create_aggregate.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-cte_in_materialized_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-create_index.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-reset.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-group_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-load.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-lock_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-select_ordered_nested_sets.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-discard.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-create_extension.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-datatypes.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-create_zero_argument_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-comment_on.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-create_foreign_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-select_case_cast.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-json_operators.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-unicode_double_quote.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-alter_domain.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-drop_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-update_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-create_trigger.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-escape.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-set.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-alter_schema.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-create_database.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-alter_extension.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-notifications.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-unicode_single_quote.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-drop_publication.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-alter_default_privileges.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-alter_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-create_schema.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-import_foreign_schema.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-drop_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-alter_type.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-create_procedure.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-create_sequence.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-join_lateral.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-drop_policy.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-alter_procedure.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-psql_meta_command.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-create_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-alter_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-values_in_subquery.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-do.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-drop_index.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-alter_database.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-subquery.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-alter_sequence.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-create_user_mapping.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-alter_role.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-with.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-filter.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-alter_index.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-drop_sequence.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-select.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-substring.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-vacuum.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-reindex.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-null_filters.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-copy.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-create_materialized_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-alter_publication.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-grant_privileges.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-composite_types.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-revoke.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-pattern_match_expressions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-create_domain.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-alter_statistics.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-analyze.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[postgres-create_role.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-create_table_external_partitioned.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-insert_overwrite_table_dynamic_partition.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-drop_database.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-create_table_like.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-select_interval.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-create_table_as_select.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-insert_into_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-select_lateral_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-select_left_semi_join.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-quoted_literal.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-select_regexp.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-select_cast.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-insert_into_table_values.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-array_types.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-insert_overwrite_table_partition.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-select_cluster_distribute_sort_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-msck_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-insert_overwrite_directory.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-select_sampling_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-insert_overwrite_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-create_table_temporary_properties.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-create_table_temporary_external.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-drop_schema.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-set.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-alter_schema.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-create_database.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-create_schema.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-create_table_clustered_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-truncate_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-create_table_constraints.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-create_table_row_format_serde.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-create_table_row_format_delimited.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-create_table_with.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-create_table_datatypes.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-alter_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-drop_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-use.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-alter_database.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-create_table_skewed_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-insert_into_table_partition.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[hive-msck_repair_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sqlite-create_table_autoincrement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sqlite-delete.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sqlite-update.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sqlite-create_table_check.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sqlite-create_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sqlite-is_clause.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sqlite-drop_trigger.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sqlite-block_comment_end_of_input.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sqlite-insert.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sqlite-arithmetric_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sqlite-create_index.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sqlite-pattern_matching.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sqlite-create_table_constraint_default.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sqlite-create_table_constraint_regexp.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sqlite-create_table_table_end.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sqlite-create_trigger.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sqlite-create_table_deferrable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sqlite-pragma.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sqlite-select.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sqlite-quoted_identifiers.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[databricks-select_from_lateral_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[databricks-set_time_zone.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[databricks-create_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[databricks-unpivot.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[databricks-pivot.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[databricks-alter_catalog.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[databricks-create_catalog.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[databricks-date_functions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[databricks-use_database.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[databricks-create_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[databricks-use_catalog.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[databricks-select_window.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[databricks-drop_catalog.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[databricks-select.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[clickhouse-select_except.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[clickhouse-drop_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[clickhouse-back_quoted_identifier.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[clickhouse-create_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[clickhouse-cte.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[clickhouse-create_database.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[clickhouse-lambda_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[clickhouse-cte_columns.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[clickhouse-join.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[clickhouse-system_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[clickhouse-select_distinct_on.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[clickhouse-in_operator.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[clickhouse-final.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[clickhouse-dollar_quoted_literal.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[clickhouse-create_materialized_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[materialize-create_source_statements.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[materialize-create_views.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[materialize-grant_statements.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[materialize-create_connection_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[materialize-explain_statements.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[materialize-copy_to_from_statements.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[materialize-insert_statements.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[materialize-create_cluster_replica_statements.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[materialize-create_index.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[materialize-alter_statements.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[materialize-show_statements.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[materialize-drop_statements.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[materialize-subscribe_fetch_statements.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[materialize-begin_close_statements.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[materialize-create_sink_statements.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[athena-show_create_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[athena-create_external_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[athena-insert_into.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[athena-select_cast_withtimezone.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[athena-select_base_operators.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[athena-create_table_as_select.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[athena-show_tblproperties.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[athena-select_b.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[athena-select_group_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[athena-create_external_table_struct.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[athena-select_row.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[athena-create_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[athena-prepared_statements.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[athena-create_array_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[athena-select_reduce.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[athena-show_tables.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[athena-element_at.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[athena-select_filter.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[athena-select_map_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[athena-create_map_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[athena-show_create_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[athena-create_database_if_not_exists.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[athena-select_widow_functions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[athena-show_columns.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[athena-select_datetime_functions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[athena-create_external_table_input_format.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[athena-select_unnest.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[athena-create_database.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[athena-select_map_type.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[athena-select_underscore.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[athena-unload_select.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[athena-select_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[athena-show_databases.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[athena-show_partitions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[athena-select_array_of_rows.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[athena-create_struct_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[athena-show_views.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[athena-msck_repair_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[athena-create_partitioned_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[greenplum-create_table_as.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[greenplum-create_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[greenplum-declare.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[greenplum-fetch.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[greenplum-analize.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[greenplum-close.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[greenplum-copy.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-unpivot_clause.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-join_types.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-delta_create_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-select_like_clause.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-clear_cache.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-drop_database.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-select_from_lateral_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-create_table_like.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-select_delimited_identifier.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-select_having.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-bytes_literal.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-parse_timestamp_ltz_ntz_type.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-iceberg_alter_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-delta_read_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-show_functions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-common_table_expressions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-select_union.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-show_tblproperties.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-select_group_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-describe_query.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-create_table_select.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-select_aggregate.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-delta_constraints.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-load_data.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-issue_3484.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-refresh.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-quoted_literal.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-refresh_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-explain.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-delta_vacuum.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-create_table_datasource.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-databricks_dlt_apply_changes_into.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-refresh_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-insert_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-table_alias.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-databricks_dlt_create_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-select_cluster_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-analyze_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-create_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-select_distribute_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-delta_update_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-select_from_where_clause.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-cache_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-select_reduce.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-delta_update_table_schema.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-values_with_alias.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-insert_overwrite_directory_hive.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-databricks_dlt_create_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-delta_describe_history.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-select_from_values.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-delta_change_data_feed.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-select_lateral_view_supported_tvf.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-values.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-uncache_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-iceberg_replace_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-insert_overwrite_directory.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-describe_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-describe_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-from_supported_tvf.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-show_tables.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-reset.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-select_star_except.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-date_functions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-delta_write_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-repair_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-show_create_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-merge_into.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-show_columns.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-delta_delete_from.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-create_table_complex_datatypes.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-exclamation_mark.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-add_jar.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-drop_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-create_table_primitive_datatypes.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-drop_schema.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-create_widget.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-delta_restore.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-select_delimited_identifier_with_escaped_backticks.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-select_transform_clause.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-set.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-create_database.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-pivot_clause.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-select_from_multiple_values_clauses.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-alter_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-select_from_file.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-list_file.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-truncate_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-drop_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-delta_drop_column_metadata_change.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-databricks_operator_colon_sign.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-select_star_in_multiparameter_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-show_table_extended.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-describe_database.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-show_databases.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-numeric_literal.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-create_table_hiveformat.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-use_database.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-show_partitions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-window_functions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-delta_convert_to.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-select_limit_clause.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-delta_describe_detail.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-create_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-alter_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-delta_merge.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-select_tablesample.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-select_set_operators.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-drop_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-select_sort_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-list_jar.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-case_clause.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-databricks_dlt_constraint.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-select_div.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-alter_database.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-add_file.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-select_order_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-iceberg_create_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-show_views.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-delta_generate_manifest.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-select_qualify.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-literals.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-remove_widget.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-select_hints.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_file_parse[sparksql-parse_integer_type.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[trino-array.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[trino-range_offset.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[trino-select_interval.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[trino-integer_types.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[trino-bare_functions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[trino-regexp_replace_with_lambda.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[trino-within_group.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[trino-values.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[trino-timestamp_resolutions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[trino-analyze.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-update.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-truncate_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-semicolon_delimiters.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-drop_cast.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_where_in_unnest.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-from_fetch.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-create_table_a_pk_unique_fk_constraints.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_simple_j.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_union_distinct.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_h.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_p.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_named_window.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-arithmetic_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-create_user.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_nested_join.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-drop_type.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-rollback_work.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-transactions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-create_database_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-functions_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_with_b.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-set_order_by_complex.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_fetch.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-create_schema_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_sample_bernoulli_10_aliased.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-with_compound_select_union.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-commit_and_no_chain.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_except.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-double_dot.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_g.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_union.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_c.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_b.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-rollback_work_and_no_chain.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-set_order_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-bracket_in_comment.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-insert_default_values.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-having_fetch.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-create_table_as.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_s.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_natural_join.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-create_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-create_function_no_args.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-insert_using_subquery.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-delete_from.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_with_offset_limit.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-drop_index_simple.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-grant_all_on_mytable_to_role.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_multiple_named_windows.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-grant_select_col1_col2_update_col1_on_mytable_to_public.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-naked_identifiers.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-drop_table_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_intersect.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-unaliased_using_subquery.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_n.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_u.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-rollback.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_numeric_literal_exponential_format.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-drop_trigger.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_sample_bernoulli_order_limit.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-comments.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_r.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-grant_update_on_all_tables_in_schema_a_to_public.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-with_insert_with_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_case_b.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-grant_select_on_mytable_to_public.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-commit_work_and_no_chain.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-with_nested_in_with_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-with_insert_statement_b.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-commit_work.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-create_cast.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-group_by_fetch.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-create_index_simple.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_trailing_comma_column_list.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-create_view_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-update_with_from_clause.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-functions_b.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-drop_model.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-create_table_table_comment.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-empty_file.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-drop_view_a_cascade.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_with_limit_and_offset.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_cross_join.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_in_multiline_comment.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_v.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_l.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-grant_all_privileges_on_mytable_to_role.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_with_recursive.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_simple_i.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-multi_statement_c.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-like_operators.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-describe_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-drop_view_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_simple_b.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_a_and_not_b.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-truncate_table_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-create_table_varchar.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-create_table_as_select_cte_parentheses.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-drop_index_if_exists.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_simple_g.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-with_insert_statement_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_j.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_f.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-drop_view_a_restrict.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_function_in_group_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-update_set_case.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-ansi_cast_with_whitespaces.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-create_table_constraint_default.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-create_table_column_comment.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-grant_multiple_tables.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-non_breaking_space.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-drop_table_a_restrict.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_d.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_with_simple_limit.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-create_database_if_not_exists.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-with_update_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-alter_table_rename_to.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-create_zero_argument_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-merge_into.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_sample_system_10.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-trim_functions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_sample_system_10_repeatable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_t.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-create_table_a_c1_c2.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_case_c.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_simple_e.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_with_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-rollback_and_no_chain.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-create_table_constraint_reference_option.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-drop_schema.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_m.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_o.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-drop_table_a_cascade.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-expression_recursion.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_order_fetch.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-where_fetch.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-escaped_quotes.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-create_trigger.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-escape.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_with_brackets.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-create_table_double_precision.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_g_fetch.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-bracketed_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_q.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_simple_d.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_overlaps.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_true_and_not_false.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_sample_bernoulli_10.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-create_table_as_select_cte_no_parentheses.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-shorthand_cast.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_named_window_no_parentheses.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-expression_recursion_2.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-multi_statement_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_from_where_overlaps.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_named_window_with_parentheses.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_table_named_group.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-create_sequence.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-multi_statement_b.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_union_bracketed.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-numeric_literal.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_e.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-insert_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-create_index_if_not_exists.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-create_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-with_no_schema_binding.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-update_with_table_alias.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_many_join.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-create_schema_if_not_exists.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_sample_system_10_aliased.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-with_insert_bracketed_with_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-create_table_default_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-create_table_a_column_constraints.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_bitwise_operators.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_fn_square_bracket_array_parameter.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-alter_sequence.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_simple_f.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-table_expression.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_right.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_with_where_clause_functions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-revoke_select_on_table_a_from_group_b.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-grant_all_on_table_mytable_to_role.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-drop_sequence.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-insert_with_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_sample_bernoulli_10_repeatable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-grant_select_update_insert_on_mytable_to_public.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-modulo.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_case_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_named_windows_each_window_specification.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-drop_table_if_exists_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-create_table_auto_increment.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_simple_h.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_union_all.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_simple_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-commit.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-create_view_if_not_exists.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-create_role.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-grant_select_on_mytable_to_public_with_grant_option.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-create_table_column_constraint.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-create_model_options.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-set_schema_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[ansi-select_simple_c.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-is_not_distinct.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-delete.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-for_in.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_1_lt_0.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-create_external_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_case.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_where_array_element_less_than.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_quoting.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_function_object_fields.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-drop_materialized_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_udf_quote_project_and_datasetfunctionname.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_udf_quote_project_name.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-handle_exception.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-array_agg_ignore_nulls.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-typeless_array.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-create_view_options_as.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_except_replace.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_except.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_interval_expression.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_group_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-set_variable_single.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-create_js_function_underscore_name.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-literals_with_data_type_and_quoted.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-alter_materialized_view_set_options.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_where_greater_than.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_natural_join.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-create_table_options_as.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-create_function_no_args.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-create_table_partition_by_cluster_by_as.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_multi_except.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-create_js_function_complex_types.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_with_date_literal_coercion_and_two_part_string_interval.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-create_function_with_args.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-array_agg_distinct_ignore_nulls.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_ml_predict_with_select.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-array_agg_respect_nulls.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-call_procedure.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_if.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_example.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_less_than_greater_than.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_for_system_time.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-create_or_replace_table_options_as.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_identifiers.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-export_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_with_offset_3.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_with_offset_2.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-declare_variable_with_default.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_with_window.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-create_temp_function_with_select.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-interval_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_with_union_and_qualify.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-create_table_column_options.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-procedural_statements.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_struct.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_where_less_than.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-insert.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_with_qualify.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-normalize_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_rows_between.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-create_table_keys.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-alter_table_set_options.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-alter_table_alter_column.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-typeless_struct.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_mixture_of_array_literals.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_datetime.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-dateparts.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-create_table_trailing_comma.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_udf_quote_everything.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-execute_immediate.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-alter_table_rename_to.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-merge_into.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-begin.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_function_with_named_arguments.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_1_gt_0.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-drop_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_with_offset.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_extract.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-create_snapshot_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_gt_lt.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-create_js_function_simple.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_ml_weights.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_typeless_struct_inside_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-alter_schema.sql]",
        "status": "FAILED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-any_value_having.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-create_row_access_policy.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-create_table_columns_partition_options.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_function_parameter_order_by_multiple_columns.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_replace.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_column_object_with_keyword.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-declare_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-create_js_function_options_library_array.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-alter_table_add_column.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-alter_view_set_options.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_safe_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-create_schema.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-create_js_function_deterministic.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_udf_quote_nothing.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-create_procedure.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-create_or_replace_sql_function_any_type.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_unpivot.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-parameters.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-set_variable_multiple.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-assert.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-create_materialized_view_as_replica_of.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-create_table_options.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_set_operators.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-alter_table_rename_column.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_lt_gt.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-create_table_default_collate.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_pivot.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-create_table_like_copy_clone.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-tablesample.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_hyphenated_table_name_in_from.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-alter_table_drop_column.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-string_literals.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-create_table_hyphen_project.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-create_materialized_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-create_table_partition_by_as.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-select_empty_array_literal.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[bigquery-create_js_function_quoted_name.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-create_external_file_format.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-delete.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-update.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-begin_end_nested.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-join_hints.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-create_table_with_sequence_bracketed.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-begin_end_no_semicolon.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-delete_azure_synapse_analytics.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-create_external_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-create_user.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-raiserror.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-nested_joins.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-drop_procedure.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-alter_and_drop.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-select_into.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-begin_end.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-functions_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-temp_tables.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-create_table_as_select.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-create_table_with_sequence.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-set_statements.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-create_view_with_cte.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-transaction.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-convert.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-goto_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-hints.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-create_view_with_set_statements.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-datepart.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-temporal_tables.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-comment_blocks.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-create_table_with_distribution.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-select_top.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-stored_procedured_mixed_statements.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-multi_statement_without_semicolon.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-select_natural_join.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-create_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-bulk_insert.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-select_cross_apply.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-print.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-cte_s.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-select_date_functions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-stored_procedure_begin_end.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-stored_procedure_single_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-create_view_with_unpivot.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-openjson.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-collate.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-create_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-if_else_begin_end.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-insert_with_identity_insert.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-synonym.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-while_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-cast_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-triggers.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-create_view_with_pivot.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-merge.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-table_variables.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-create_type.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-create_view_with_columns.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-create_table_with_trailing_comma.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-rename_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-execute.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-create_fulltext_index.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-create_table_with_table_option_segment.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-sequence.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-create_table_on_filegroup.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-waitfor.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-add_index.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-group_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-drop_external_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-insert_default.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-date_functions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-function_default_params.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-minimal_function_no_alter.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-outer_apply.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-drop_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-create_columnstore_index.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-reconfigure.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-create_external_data_source.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-alter_table_switch.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-minimal_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-select_for.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-insert_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-if_else.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-create_schema.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-create_master_key.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-declare_with_following_statements.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-create_table_constraints.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-drop_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-create_procedure.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-create_partition_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-try_catch.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-functions_agg.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-window_functions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-system-variables.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-create_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-alter_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-openrowset.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-drop_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-function_no_return.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-create_database_scoped_credential.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-cursor.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-grant_deny_revoke.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-alter_index.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-select_pivot.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-go_delimiters.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-tablesample.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-declare_table_type.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-select.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-function_with_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-copy.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-drop_user.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-sqlcmd_command.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-stored_procedure_simple.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-create_partition_scheme.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[tsql-create_role.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[vertica-delete.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[vertica-join_types.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[vertica-array.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[vertica-create_table_like.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[vertica-join_no_space.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[vertica-null_cast_with_whitespaces.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[vertica-datetime_units.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[vertica-cast_with_whitespaces.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[vertica-bare_functions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[vertica-create_table_as.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[vertica-single_quote.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[vertica-create_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[vertica-create_projection.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[vertica-create_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[vertica-within_group.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[vertica-select_case_null_cast.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[vertica-limit_clause.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[vertica-insert.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[vertica-position.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[vertica-select_frame_clause.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[vertica-flex_functions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[vertica-group_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[vertica-datatypes.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[vertica-comment_on.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[vertica-select_case_cast.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[vertica-json_operators.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[vertica-update_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[vertica-escape.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[vertica-set.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[vertica-alter_schema.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[vertica-alter_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[vertica-create_schema.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[vertica-drop_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[vertica-alter_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[vertica-subquery.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[vertica-with.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[vertica-select.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[vertica-null_filters.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[vertica-copy.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[vertica-grant_privileges.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[vertica-revoke.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[soql-date_literals.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[soql-select_where_date_n_literals.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[soql-select_where_date_literals.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[db2-labeled_duration.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[db2-join_types.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[db2-case.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[db2-declare_global_temporary_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[db2-offset_fetch_limit.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[db2-create_table_field_name_with_pound_sign.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[db2-call_stored_proc.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[db2-day_unit.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[db2-values.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[db2-function_within_group.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[db2-lateral.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[db2-create_index.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[db2-select_ordered_nested_sets.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[db2-special_registers.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[db2-over.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[db2-where_like.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[db2-select.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-delete.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-copy_into_location_partitionby.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-create_resource_monitor.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-cast_datatype_accessor.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-set_call_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-copy_into_location_GoogleCloud.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-select_like_clause.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-create_external_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-select_rename.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-create_user.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-col_position.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-list_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-identifier_pseudo_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-transactions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-multiple_shorthand_casts.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-begin_end.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-return.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-copy_into_location.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-call.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_storage_integration.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-select_group_by_cube_rollup.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-select_except.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-frame_clause.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-datetime_units.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-select_union.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-object_literals.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_pipe.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-bare_functions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-create_task.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-create_stage.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-semi_structured_4.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-match_recognize.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_session_set_timezone.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-set_command.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-select_where_is_distinct_from.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-non_reserved_keywords.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_task_set_special_simple.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_table_column.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-create_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-create_external_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_streamlit.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-json_underscore_key.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-remove_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-string_literal.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_network_policy.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-copy_into_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-qualify.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_session_unset_parameters.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-unset.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-semi_structured_3.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_file_format.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-create_masking_policy.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-explain.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_stage.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_task_set_special_full.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_warehouse.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_masking_policy.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-select_transient_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-first_value_ignore_nulls.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_task_if_exists_resume.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-create_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-pivot.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-within_group.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_task_unset_full.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-select_values.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-group_by_all.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-lateral_flatten_after_join.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-call_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_resource_monitor.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-changes_clause.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-sample.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-create_table_with_partition_as_column_name.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-execute_task.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_task_resume.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-select_grouping_sets.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-comment_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-select_system_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-for_in_loop.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-datetime_intervals.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_stream.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-grant_revoke.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-get_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_materialized_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-insert.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_external_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-semi_structured.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-create_warehouse.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_user_remove_delegate_auth.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-execute_immediate.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-create_stream.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_task_modify_as.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-merge_into.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_task_unset_simple.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-select_clause_modifiers.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-copy_into_location_Azure.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-create_tag.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-let.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-escape.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-window_function_ignore_nulls.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-select_asof_join.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_schema.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-drop_statements.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-create_database.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_task_remove_after.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-select_exclude.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-create_network_policy.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-undrop.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-select_replace.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-copy_into_location_Amazon_SC3.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-create_pipe.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-create_schema.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_external_volume.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-create_notification_integration.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-create_streamlit.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-truncate_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_user_delegate_auth.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-create_procedure.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-describe_statements.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_task_set_simple.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-select_exclude_rename.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-create_sequence.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-create_database_role.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_share.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-create_clone.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_procedure.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_user_reset_password.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_user_delegate_auth_role.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_user_rename.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-put_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-create_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_user_unset_values.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-limit.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_account.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-semi_structured_2.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-use.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-qualify_union.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_database.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_sequence.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_user_set_values.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-select_stages_files.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_task_set_full.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_external_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-connect_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_role.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_task_suspend.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-create_file_format.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-select.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_task_modify_when.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-copy_files_into_location_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-inline_comment.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-create_external_volume.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_task_add_after.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_table_clustering_action.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-create_table_comments.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-create_storage_integration.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-alter_user_abort_query.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[snowflake-create_role.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[duckdb-asof_join.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[duckdb-create_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[duckdb-unpivot.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[duckdb-select_quoted.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[duckdb-qualify.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[duckdb-select_exclude_replace.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[duckdb-anti_semi_join.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[duckdb-group_order_by_all.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[duckdb-select_columns.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[duckdb-pivot.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[duckdb-from_first.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[duckdb-extract_temporal.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[duckdb-list_struct.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[duckdb-json_operators.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[duckdb-select_exclude.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[duckdb-select_replace.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[duckdb-select_lambda.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[duckdb-select.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[duckdb-positional_join.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-update.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-set_sql_log_bin.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-declare_default_quotedliteral.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-delete_multitable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-use_key.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-handler_sqlstate_value.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-ignore_key.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-loop_label.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-drop_index_with_algorithm.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-grant.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-set_session_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-get_diagnostics_condition_session_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-create_user.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-resignal_set_signal_info.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-drop_procedure.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-prepare_session_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-declare_condition.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-if_multiple_expression.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-line_comment.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-use_index_for_join.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-select_into_outfile_lines_starting.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-function_no_sql.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-hexadecimal_literal.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-if_session_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-execute_prepared_stmt.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-delimiter_procedure.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-select_for_update.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-declare_cursor.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-function_sql_security_invoker.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-procedure_in_param.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-close_qualified.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-function_return.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-system_variables.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-function_sql_security_definer.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-signal_condition_sqlstate_value.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-function_definer.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-force_index_left_join.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-ignore_index_for_group_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-create_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-select_into_outfile_fields_escaped.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-execute_prepared_stmt_using_multiple_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-use_index_for_order_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-load_data.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-select_sql_buffer_result.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-select_for_update_of_multiple.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-procedure_inout_param.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-use_index.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-quoted_literal.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-get_diagnostics_condition_local_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-select_into_outfile.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-create_table_primary_foreign_keys.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-explain.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-delimiter_select.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-interval.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-force_index_for_order_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-select_into_outfile_fields_terminated.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-analyze_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-create_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-drop_trigger.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-open_qualified.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-select_local_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-set_multiple_variables.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-optimize_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-handler_error_code.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-drop_prepare.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-select_for_update_skip_locked.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-call_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-if_subquery_expression.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-create_table_constraint_unique.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-signal_set_signal_info_multiple.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-flush.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-reset_master.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-set_session_variable_expression.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-create_table_unique_key.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-if_nested.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-prepare_local_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-function_notdeterministic.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-rename_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-create_table_null_position.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-signal.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-loop_no_label.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-insert.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-check_constraint.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-execute_prepared_stmt_using.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-force_index.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-fetch_session_multiple.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-declare_exit_handler_sqlexception.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-checksum_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-select_sql_calc_found_rows.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-handler_not_found.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-signal_condition_name.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-repeat_no_label.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-while_label.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-create_index.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-select_into_outfile_fields_optionally_enclosed.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-get_diagnostics_condition_info_multiple_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-create_table_index.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-resignal_condition_name.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-select_for_update_nowait.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-force_key.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-help_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-select_into_session_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-resignal.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-declare_continue_handler_sqlexception.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-get_diagnostics_condition_info_session_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-repair_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-set_names.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-create_table_datetime.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-force_index_for_group_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-begin.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-drop_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-check_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-select_sql_cache.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-fetch.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-bit_value_literal.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-create_trigger.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-get_diagnostics_condition_info_local_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-select_sql_no_cache.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-create_table_equals_optional.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-select_straight_join.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-select_for_update_lock_in_share_mode.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-create_database.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-variable_assignment.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-select_lock_in_share_mode.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-if.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-signal_condition_sqlstate.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-delimiter_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-handler_condition_name.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-if_else.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-alter_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-procedure_out_param.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-function_modifies_sql.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-select_into_multiple_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-purge_binary_logs.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-select_for_share.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-ignore_index.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-select_into_outfile_lines_terminated.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-function_comment.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-resignal_set_signal_info_multiple.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-get_diagnostics_condition_numeric.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-declare_undo_handler_sqlexception.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-select_sql_small_result.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-fetch_next_from.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-force_index_for_join.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-select_multiple_partition.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-get_diagnostics_row_count.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-function_reads_sql.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-use_database.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-select_partition.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-use_index_for_group_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-replace.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-resignal_condition_sqlstate_value.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-get_diagnostics_number.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-select_into_outfile_fields_enclosed.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-repeat_label.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-fetch_from.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-close.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-alter_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-procedure_definer.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-repeat_multiple_statements.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-select_distinctrow.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-fetch_multiple.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-select_high_priority.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-drop_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-drop_index.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-handler_sqlwarning.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-select_session_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-use_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-values_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-alter_database.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-declare_default_numeric.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-ignore_index_for_join.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-select_sql_big_result.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-handler_sqlstate.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-ignore_index_for_order_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-if_elseif.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-select_into_dumpfile.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-resignal_condition_sqlstate.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-while_no_label.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-nested_begin.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-json.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-create_table_column_charset.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-loop_multiple_statements.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-fetch_session.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-declare_local_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-open.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-select_for_update_of.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-deallocate_prepare.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-column_alias.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-drop_index_with_lock.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-prepare_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-signal_set_signal_info.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-set_booleans.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-create_role.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[mysql-select_boolean_operators.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-update.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-alter_user.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-create_external_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-create_user.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-insert_into.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-drop_procedure.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-select_into.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-transactions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-create_group.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-array_unnest.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-call.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-select_dateadd.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-temporary_tables.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-cast_with_whitespaces.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-create_table_as.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-select_top.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-single_quote.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-create_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-create_external_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-unpivot.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-qualify.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-create_datashare.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-datetime_cast.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-create_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-desc_datashare.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-pivot.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-create_model.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-alter_group.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-cast_conversion.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-attach_rls_policy.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-lock_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-dateparts.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-detach_rls_policy.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-approximate_functions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-select_from_with_parenthesis.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-declare.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-unload.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-show_model.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-create_rls_policy.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-create_external_schema.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-fetch.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-create_external_table_as.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-select_datetime_functions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-grant_datashare_usage.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-alter_schema.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-alter_datashare.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-show_datashares.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-alter_default_privileges.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-drop_datashare.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-object_unpivot.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-create_schema.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-select_first_value.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-create_library.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-create_procedure.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-unreserved_keywords.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-window_functions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-alter_procedure.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-close.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-create_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-alter_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-analyze_compression.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-drop_rls_policy.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-super_data_type.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-select_keywords.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-vacuum.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-copy.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-create_materialized_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-pattern_match_expressions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[redshift-percentile_cont.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-drop_table_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-alter_system.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-select_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-create_consumer_group.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-explain_virtual.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-alter_user.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-drop_script_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-kill_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-rename_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-create_adapter_script_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-create_user.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-create_scripting_lua_script_statement2.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-drop_schema_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-create_scripting_lua_script_statement1.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-open_close_schema.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-preload_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-alter_table_column.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-create_function_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-create_udfscript_statement4.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-create_udfscript_statement5.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-Add_Days.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-create_udfscript_statement2.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-export_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-flush_statistics.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-alter_session.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-drop_consumer_group.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-access_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-create_connection.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-comment_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-alter_virtual_schema_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-execute_script.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-drop_connection_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-import_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-create_table_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-alter_table_distribute_partition.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-delete_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-truncate_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-recompress_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-create_scripting_lua_script_statement3.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-update_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-insert_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-create_schema.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-create_udfscript_dot_syntax.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-create_udfscript_statement1.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-alter_schema_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-create_virtual_schema_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-drop_cascade_restrict_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-values_in_subquery.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-create_udfscript_statement3.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-alter_consumer_group.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-alter_role.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-alter_table_constraint.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-create_view_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-alter_connection.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-merge_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-data_type_test.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-create_python_scalar_script.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-create_lua_script_bracket.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-drop_cascade_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[exasol-create_role.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[oracle-join_types.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[oracle-comment.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[oracle-prompt.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[oracle-bare_functions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[oracle-select_natural_join.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[oracle-create_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[oracle-fetch_first_row_only.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[oracle-named_argument.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[oracle-create_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[oracle-non_ansi_joins.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[oracle-within_group.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[oracle-interval_operations.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[oracle-space_between_alias_and_column.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[oracle-lateral.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[oracle-temporary_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[oracle-pivot_unpivot.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[oracle-hierarchical_queries.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[oracle-database_link.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[oracle-quoted_slash.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[oracle-alter_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[oracle-drop_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[oracle-comparison_operators_with_space.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[oracle-at_signs.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[oracle-bind_variables.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[teradata-set_query_band.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[teradata-create_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[teradata-set_session.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[teradata-update_from.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[teradata-database.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[teradata-comparison_operators.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[teradata-collect_stats.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[teradata-comment_on_column_stmt.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[teradata-create_table_stmt_4.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[teradata-create_table_stmt_2.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[teradata-select_stmt.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[teradata-qualify_expression_union.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[teradata-qualify_expression.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[teradata-select_top.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[teradata-select_stmt_normalize.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[teradata-collect_stats_2.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[teradata-delete_stmt.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[teradata-create_table_stmt_3.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[teradata-create_table_with_data.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[teradata-qualify_over.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[teradata-create_table_stmt.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[teradata-select_date.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[teradata-comment_on_table_stmt.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[teradata-select_stmt_cast.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[teradata-bteq_stmt.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-delete.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-join_types.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-array.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-drop_cast.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-range_operators.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-drop_database.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-drop_materialized_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-drop_type.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-join_no_space.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-drop_procedure.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-drop_aggregate.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-select_into.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-psql_variable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-call.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-overlaps.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-create_publication.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-drop_owned.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-datetime_units.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-cast_with_whitespaces.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-postgres_postgis_operators.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-bare_functions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-create_table_as.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-select_natural_join.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-single_quote.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-postgis.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-create_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-explain.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-values_alias.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-create_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-drop_trigger.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-create_statistics.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-create_policy.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-within_group.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-pgvector.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-truncate.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-create_cast.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-alter_trigger.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-reassign_owned.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-alter_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-limit_clause.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-create_type.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-create_collation.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-values.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-alter_materialized_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-create_dollar_quoted_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-insert.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-refresh_materialized_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-alter_policy.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-drop_statistics.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-position.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-drop_domain.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-create_server.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-cluster.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-table_functions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-select_frame_clause.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-create_aggregate.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-cte_in_materialized_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-create_index.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-reset.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-group_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-load.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-lock_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-select_ordered_nested_sets.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-discard.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-create_extension.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-datatypes.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-create_zero_argument_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-comment_on.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-create_foreign_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-select_case_cast.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-json_operators.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-unicode_double_quote.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-alter_domain.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-drop_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-update_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-create_trigger.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-escape.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-set.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-alter_schema.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-create_database.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-alter_extension.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-notifications.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-unicode_single_quote.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-drop_publication.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-alter_default_privileges.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-alter_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-create_schema.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-import_foreign_schema.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-drop_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-alter_type.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-create_procedure.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-create_sequence.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-join_lateral.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-drop_policy.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-alter_procedure.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-psql_meta_command.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-create_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-alter_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-values_in_subquery.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-do.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-drop_index.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-alter_database.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-subquery.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-alter_sequence.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-create_user_mapping.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-alter_role.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-with.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-filter.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-alter_index.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-drop_sequence.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-select.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-substring.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-vacuum.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-reindex.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-null_filters.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-copy.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-create_materialized_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-alter_publication.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-grant_privileges.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-composite_types.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-revoke.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-pattern_match_expressions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-create_domain.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-alter_statistics.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-analyze.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[postgres-create_role.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[hive-create_table_external_partitioned.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[hive-insert_overwrite_table_dynamic_partition.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[hive-drop_database.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[hive-create_table_like.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[hive-select_interval.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[hive-create_table_as_select.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[hive-insert_into_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[hive-select_lateral_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[hive-select_left_semi_join.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[hive-quoted_literal.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[hive-select_regexp.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[hive-select_cast.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[hive-insert_into_table_values.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[hive-array_types.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[hive-insert_overwrite_table_partition.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[hive-select_cluster_distribute_sort_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[hive-msck_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[hive-insert_overwrite_directory.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[hive-select_sampling_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[hive-insert_overwrite_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[hive-create_table_temporary_properties.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[hive-create_table_temporary_external.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[hive-drop_schema.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[hive-set.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[hive-alter_schema.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[hive-create_database.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[hive-create_schema.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[hive-create_table_clustered_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[hive-truncate_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[hive-create_table_constraints.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[hive-create_table_row_format_serde.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[hive-create_table_row_format_delimited.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[hive-create_table_with.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[hive-create_table_datatypes.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[hive-alter_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[hive-drop_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[hive-use.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[hive-alter_database.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[hive-create_table_skewed_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[hive-insert_into_table_partition.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[hive-msck_repair_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sqlite-create_table_autoincrement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sqlite-delete.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sqlite-update.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sqlite-create_table_check.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sqlite-create_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sqlite-is_clause.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sqlite-drop_trigger.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sqlite-block_comment_end_of_input.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sqlite-insert.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sqlite-arithmetric_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sqlite-create_index.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sqlite-pattern_matching.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sqlite-create_table_constraint_default.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sqlite-create_table_constraint_regexp.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sqlite-create_table_table_end.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sqlite-create_trigger.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sqlite-create_table_deferrable.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sqlite-pragma.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sqlite-select.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sqlite-quoted_identifiers.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[databricks-select_from_lateral_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[databricks-set_time_zone.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[databricks-create_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[databricks-unpivot.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[databricks-pivot.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[databricks-alter_catalog.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[databricks-create_catalog.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[databricks-date_functions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[databricks-use_database.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[databricks-create_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[databricks-use_catalog.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[databricks-select_window.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[databricks-drop_catalog.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[databricks-select.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[clickhouse-select_except.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[clickhouse-drop_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[clickhouse-back_quoted_identifier.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[clickhouse-create_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[clickhouse-cte.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[clickhouse-create_database.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[clickhouse-lambda_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[clickhouse-cte_columns.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[clickhouse-join.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[clickhouse-system_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[clickhouse-select_distinct_on.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[clickhouse-in_operator.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[clickhouse-final.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[clickhouse-dollar_quoted_literal.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[clickhouse-create_materialized_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[materialize-create_source_statements.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[materialize-create_views.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[materialize-grant_statements.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[materialize-create_connection_statement.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[materialize-explain_statements.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[materialize-copy_to_from_statements.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[materialize-insert_statements.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[materialize-create_cluster_replica_statements.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[materialize-create_index.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[materialize-alter_statements.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[materialize-show_statements.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[materialize-drop_statements.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[materialize-subscribe_fetch_statements.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[materialize-begin_close_statements.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[materialize-create_sink_statements.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[athena-show_create_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[athena-create_external_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[athena-insert_into.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[athena-select_cast_withtimezone.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[athena-select_base_operators.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[athena-create_table_as_select.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[athena-show_tblproperties.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[athena-select_b.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[athena-select_group_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[athena-create_external_table_struct.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[athena-select_row.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[athena-create_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[athena-prepared_statements.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[athena-create_array_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[athena-select_reduce.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[athena-show_tables.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[athena-element_at.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[athena-select_filter.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[athena-select_map_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[athena-create_map_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[athena-show_create_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[athena-create_database_if_not_exists.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[athena-select_widow_functions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[athena-show_columns.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[athena-select_datetime_functions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[athena-create_external_table_input_format.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[athena-select_unnest.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[athena-create_database.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[athena-select_map_type.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[athena-select_underscore.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[athena-unload_select.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[athena-select_a.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[athena-show_databases.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[athena-show_partitions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[athena-select_array_of_rows.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[athena-create_struct_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[athena-show_views.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[athena-msck_repair_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[athena-create_partitioned_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[greenplum-create_table_as.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[greenplum-create_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[greenplum-declare.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[greenplum-fetch.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[greenplum-analize.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[greenplum-close.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[greenplum-copy.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-unpivot_clause.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-join_types.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-delta_create_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-select_like_clause.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-clear_cache.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-drop_database.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-select_from_lateral_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-create_table_like.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-select_delimited_identifier.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-select_having.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-bytes_literal.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-parse_timestamp_ltz_ntz_type.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-iceberg_alter_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-delta_read_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-show_functions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-common_table_expressions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-select_union.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-show_tblproperties.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-select_group_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-describe_query.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-create_table_select.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-select_aggregate.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-delta_constraints.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-load_data.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-issue_3484.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-refresh.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-quoted_literal.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-refresh_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-explain.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-delta_vacuum.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-create_table_datasource.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-databricks_dlt_apply_changes_into.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-refresh_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-insert_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-table_alias.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-databricks_dlt_create_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-select_cluster_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-analyze_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-create_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-select_distribute_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-delta_update_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-select_from_where_clause.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-cache_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-select_reduce.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-delta_update_table_schema.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-values_with_alias.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-insert_overwrite_directory_hive.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-databricks_dlt_create_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-delta_describe_history.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-select_from_values.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-delta_change_data_feed.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-select_lateral_view_supported_tvf.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-values.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-uncache_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-iceberg_replace_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-insert_overwrite_directory.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-describe_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-describe_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-from_supported_tvf.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-show_tables.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-reset.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-select_star_except.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-date_functions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-delta_write_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-repair_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-show_create_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-merge_into.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-show_columns.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-delta_delete_from.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-create_table_complex_datatypes.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-exclamation_mark.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-add_jar.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-drop_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-create_table_primitive_datatypes.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-drop_schema.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-create_widget.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-delta_restore.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-select_delimited_identifier_with_escaped_backticks.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-select_transform_clause.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-set.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-create_database.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-pivot_clause.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-select_from_multiple_values_clauses.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-alter_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-select_from_file.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-list_file.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-truncate_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-drop_view.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-delta_drop_column_metadata_change.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-databricks_operator_colon_sign.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-select_star_in_multiparameter_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-show_table_extended.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-describe_database.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-show_databases.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-numeric_literal.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-create_table_hiveformat.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-use_database.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-show_partitions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-window_functions.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-delta_convert_to.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-select_limit_clause.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-delta_describe_detail.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-create_function.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-alter_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-delta_merge.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-select_tablesample.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-select_set_operators.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-drop_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-select_sort_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-list_jar.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-case_clause.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-databricks_dlt_constraint.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-select_div.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-alter_database.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-add_file.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-select_order_by.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-iceberg_create_table.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-show_views.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-delta_generate_manifest.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-select_qualify.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-literals.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-remove_widget.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-select_hints.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_broad_fix[sparksql-parse_integer_type.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[trino-array.sql-True-array.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[trino-range_offset.sql-True-range_offset.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[trino-select_interval.sql-True-select_interval.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[trino-integer_types.sql-True-integer_types.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[trino-bare_functions.sql-True-bare_functions.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[trino-regexp_replace_with_lambda.sql-True-regexp_replace_with_lambda.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[trino-within_group.sql-True-within_group.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[trino-values.sql-True-values.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[trino-timestamp_resolutions.sql-True-timestamp_resolutions.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[trino-analyze.sql-True-analyze.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-update.sql-True-update.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-truncate_a.sql-True-truncate_a.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-semicolon_delimiters.sql-True-semicolon_delimiters.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-drop_cast.sql-True-drop_cast.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_where_in_unnest.sql-True-select_where_in_unnest.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-from_fetch.sql-True-from_fetch.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_table_a_pk_unique_fk_constraints.sql-True-create_table_a_pk_unique_fk_constraints.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_simple_j.sql-True-select_simple_j.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_union_distinct.sql-True-select_union_distinct.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_h.sql-True-select_h.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_p.sql-True-select_p.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_named_window.sql-True-select_named_window.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-arithmetic_a.sql-True-arithmetic_a.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_user.sql-True-create_user.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_nested_join.sql-True-select_nested_join.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-drop_type.sql-True-drop_type.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-rollback_work.sql-True-rollback_work.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-transactions.sql-True-transactions.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_database_a.sql-True-create_database_a.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-functions_a.sql-True-functions_a.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_with_b.sql-True-select_with_b.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-set_order_by_complex.sql-True-set_order_by_complex.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_fetch.sql-True-select_fetch.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_schema_a.sql-True-create_schema_a.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_sample_bernoulli_10_aliased.sql-True-select_sample_bernoulli_10_aliased.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-with_compound_select_union.sql-True-with_compound_select_union.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-commit_and_no_chain.sql-True-commit_and_no_chain.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_except.sql-True-select_except.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-double_dot.sql-True-double_dot.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_g.sql-True-select_g.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_union.sql-True-select_union.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_c.sql-True-select_c.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_b.sql-True-select_b.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-rollback_work_and_no_chain.sql-True-rollback_work_and_no_chain.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-set_order_by.sql-True-set_order_by.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-bracket_in_comment.sql-True-bracket_in_comment.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-insert_default_values.sql-True-insert_default_values.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-having_fetch.sql-True-having_fetch.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_table_as.sql-True-create_table_as.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_s.sql-True-select_s.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_natural_join.sql-True-select_natural_join.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_table.sql-True-create_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_function_no_args.sql-True-create_function_no_args.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-insert_using_subquery.sql-True-insert_using_subquery.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-delete_from.sql-True-delete_from.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_with_offset_limit.sql-True-select_with_offset_limit.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-drop_index_simple.sql-True-drop_index_simple.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-grant_all_on_mytable_to_role.sql-True-grant_all_on_mytable_to_role.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_multiple_named_windows.sql-True-select_multiple_named_windows.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-grant_select_col1_col2_update_col1_on_mytable_to_public.sql-True-grant_select_col1_col2_update_col1_on_mytable_to_public.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-naked_identifiers.sql-True-naked_identifiers.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-drop_table_a.sql-True-drop_table_a.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_intersect.sql-True-select_intersect.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-unaliased_using_subquery.sql-True-unaliased_using_subquery.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_n.sql-True-select_n.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_u.sql-True-select_u.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-rollback.sql-True-rollback.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_numeric_literal_exponential_format.sql-True-select_numeric_literal_exponential_format.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-drop_trigger.sql-True-drop_trigger.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_sample_bernoulli_order_limit.sql-True-select_sample_bernoulli_order_limit.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-comments.sql-True-comments.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_r.sql-True-select_r.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-grant_update_on_all_tables_in_schema_a_to_public.sql-True-grant_update_on_all_tables_in_schema_a_to_public.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-with_insert_with_statement.sql-True-with_insert_with_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_case_b.sql-True-select_case_b.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-grant_select_on_mytable_to_public.sql-True-grant_select_on_mytable_to_public.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-commit_work_and_no_chain.sql-True-commit_work_and_no_chain.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-with_nested_in_with_statement.sql-True-with_nested_in_with_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-with_insert_statement_b.sql-True-with_insert_statement_b.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-commit_work.sql-True-commit_work.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_cast.sql-True-create_cast.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-group_by_fetch.sql-True-group_by_fetch.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_index_simple.sql-True-create_index_simple.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_trailing_comma_column_list.sql-True-select_trailing_comma_column_list.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_view_a.sql-True-create_view_a.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-update_with_from_clause.sql-True-update_with_from_clause.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-functions_b.sql-True-functions_b.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-drop_model.sql-True-drop_model.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_table_table_comment.sql-True-create_table_table_comment.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-empty_file.sql-True-empty_file.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-drop_view_a_cascade.sql-True-drop_view_a_cascade.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_with_limit_and_offset.sql-True-select_with_limit_and_offset.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_cross_join.sql-True-select_cross_join.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_in_multiline_comment.sql-True-select_in_multiline_comment.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_v.sql-True-select_v.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_l.sql-True-select_l.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-grant_all_privileges_on_mytable_to_role.sql-True-grant_all_privileges_on_mytable_to_role.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_with_recursive.sql-True-select_with_recursive.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_simple_i.sql-True-select_simple_i.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-multi_statement_c.sql-True-multi_statement_c.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-like_operators.sql-True-like_operators.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-describe_table.sql-True-describe_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-drop_view_a.sql-True-drop_view_a.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_simple_b.sql-True-select_simple_b.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_a_and_not_b.sql-True-select_a_and_not_b.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-truncate_table_a.sql-True-truncate_table_a.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_table_varchar.sql-True-create_table_varchar.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_table_as_select_cte_parentheses.sql-True-create_table_as_select_cte_parentheses.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-drop_index_if_exists.sql-True-drop_index_if_exists.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_simple_g.sql-True-select_simple_g.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-with_insert_statement_a.sql-True-with_insert_statement_a.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_j.sql-True-select_j.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_f.sql-True-select_f.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-drop_view_a_restrict.sql-True-drop_view_a_restrict.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_function_in_group_by.sql-True-select_function_in_group_by.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-update_set_case.sql-True-update_set_case.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-ansi_cast_with_whitespaces.sql-True-ansi_cast_with_whitespaces.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_table_constraint_default.sql-True-create_table_constraint_default.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_table_column_comment.sql-True-create_table_column_comment.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-grant_multiple_tables.sql-True-grant_multiple_tables.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-non_breaking_space.sql-True-non_breaking_space.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-drop_table_a_restrict.sql-True-drop_table_a_restrict.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_d.sql-True-select_d.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_with_simple_limit.sql-True-select_with_simple_limit.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_database_if_not_exists.sql-True-create_database_if_not_exists.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-with_update_statement.sql-True-with_update_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-alter_table_rename_to.sql-True-alter_table_rename_to.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_zero_argument_function.sql-True-create_zero_argument_function.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-merge_into.sql-True-merge_into.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_sample_system_10.sql-True-select_sample_system_10.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-trim_functions.sql-True-trim_functions.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_sample_system_10_repeatable.sql-True-select_sample_system_10_repeatable.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_t.sql-True-select_t.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_table_a_c1_c2.sql-True-create_table_a_c1_c2.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_case_c.sql-True-select_case_c.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_simple_e.sql-True-select_simple_e.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_with_a.sql-True-select_with_a.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-rollback_and_no_chain.sql-True-rollback_and_no_chain.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_table_constraint_reference_option.sql-True-create_table_constraint_reference_option.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-drop_schema.sql-True-drop_schema.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_m.sql-True-select_m.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_o.sql-True-select_o.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-drop_table_a_cascade.sql-True-drop_table_a_cascade.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-expression_recursion.sql-True-expression_recursion.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_order_fetch.sql-True-select_order_fetch.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-where_fetch.sql-True-where_fetch.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-escaped_quotes.sql-True-escaped_quotes.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_trigger.sql-True-create_trigger.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-escape.sql-True-escape.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_with_brackets.sql-True-select_with_brackets.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_table_double_precision.sql-True-create_table_double_precision.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_g_fetch.sql-True-select_g_fetch.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-bracketed_statement.sql-True-bracketed_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_q.sql-True-select_q.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_simple_d.sql-True-select_simple_d.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_overlaps.sql-True-select_overlaps.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_true_and_not_false.sql-True-select_true_and_not_false.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_sample_bernoulli_10.sql-True-select_sample_bernoulli_10.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_table_as_select_cte_no_parentheses.sql-True-create_table_as_select_cte_no_parentheses.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-shorthand_cast.sql-True-shorthand_cast.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_named_window_no_parentheses.sql-True-select_named_window_no_parentheses.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-expression_recursion_2.sql-True-expression_recursion_2.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-multi_statement_a.sql-True-multi_statement_a.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_from_where_overlaps.sql-True-select_from_where_overlaps.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_named_window_with_parentheses.sql-True-select_named_window_with_parentheses.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_table_named_group.sql-True-select_table_named_group.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_a.sql-True-select_a.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_sequence.sql-True-create_sequence.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-multi_statement_b.sql-True-multi_statement_b.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_union_bracketed.sql-True-select_union_bracketed.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-numeric_literal.sql-True-numeric_literal.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_e.sql-True-select_e.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-insert_a.sql-True-insert_a.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_index_if_not_exists.sql-True-create_index_if_not_exists.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_function.sql-True-create_function.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-with_no_schema_binding.sql-True-with_no_schema_binding.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-update_with_table_alias.sql-True-update_with_table_alias.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_many_join.sql-True-select_many_join.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_schema_if_not_exists.sql-True-create_schema_if_not_exists.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_sample_system_10_aliased.sql-True-select_sample_system_10_aliased.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-with_insert_bracketed_with_statement.sql-True-with_insert_bracketed_with_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_table_default_function.sql-True-create_table_default_function.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_table_a_column_constraints.sql-True-create_table_a_column_constraints.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_bitwise_operators.sql-True-select_bitwise_operators.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_fn_square_bracket_array_parameter.sql-True-select_fn_square_bracket_array_parameter.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-alter_sequence.sql-True-alter_sequence.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_simple_f.sql-True-select_simple_f.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-table_expression.sql-True-table_expression.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_right.sql-True-select_right.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_with_where_clause_functions.sql-True-select_with_where_clause_functions.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-revoke_select_on_table_a_from_group_b.sql-True-revoke_select_on_table_a_from_group_b.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-grant_all_on_table_mytable_to_role.sql-True-grant_all_on_table_mytable_to_role.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-drop_sequence.sql-True-drop_sequence.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-insert_with_statement.sql-True-insert_with_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_sample_bernoulli_10_repeatable.sql-True-select_sample_bernoulli_10_repeatable.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-grant_select_update_insert_on_mytable_to_public.sql-True-grant_select_update_insert_on_mytable_to_public.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-modulo.sql-True-modulo.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_case_a.sql-True-select_case_a.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_named_windows_each_window_specification.sql-True-select_named_windows_each_window_specification.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-drop_table_if_exists_a.sql-True-drop_table_if_exists_a.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_table_auto_increment.sql-True-create_table_auto_increment.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_simple_h.sql-True-select_simple_h.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_union_all.sql-True-select_union_all.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_simple_a.sql-True-select_simple_a.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-commit.sql-True-commit.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_view_if_not_exists.sql-True-create_view_if_not_exists.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_role.sql-True-create_role.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-grant_select_on_mytable_to_public_with_grant_option.sql-True-grant_select_on_mytable_to_public_with_grant_option.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_table_column_constraint.sql-True-create_table_column_constraint.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-create_model_options.sql-True-create_model_options.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-set_schema_a.sql-True-set_schema_a.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[ansi-select_simple_c.sql-True-select_simple_c.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-is_not_distinct.sql-True-is_not_distinct.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-delete.sql-True-delete.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-for_in.sql-True-for_in.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_1_lt_0.sql-True-select_1_lt_0.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-create_external_table.sql-True-create_external_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_case.sql-True-select_case.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_where_array_element_less_than.sql-True-select_where_array_element_less_than.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_quoting.sql-True-select_quoting.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_function_object_fields.sql-True-select_function_object_fields.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-drop_materialized_view.sql-True-drop_materialized_view.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_udf_quote_project_and_datasetfunctionname.sql-True-select_udf_quote_project_and_datasetfunctionname.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_udf_quote_project_name.sql-True-select_udf_quote_project_name.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-handle_exception.sql-True-handle_exception.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-array_agg_ignore_nulls.sql-True-array_agg_ignore_nulls.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-typeless_array.sql-True-typeless_array.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-create_view_options_as.sql-True-create_view_options_as.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_except_replace.sql-True-select_except_replace.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_except.sql-True-select_except.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_interval_expression.sql-True-select_interval_expression.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_group_by.sql-True-select_group_by.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-set_variable_single.sql-True-set_variable_single.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-create_js_function_underscore_name.sql-True-create_js_function_underscore_name.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-literals_with_data_type_and_quoted.sql-True-literals_with_data_type_and_quoted.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-alter_materialized_view_set_options.sql-True-alter_materialized_view_set_options.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_where_greater_than.sql-True-select_where_greater_than.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_natural_join.sql-True-select_natural_join.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-create_table_options_as.sql-True-create_table_options_as.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-create_function_no_args.sql-True-create_function_no_args.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-create_table_partition_by_cluster_by_as.sql-True-create_table_partition_by_cluster_by_as.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_multi_except.sql-True-select_multi_except.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-create_js_function_complex_types.sql-True-create_js_function_complex_types.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_with_date_literal_coercion_and_two_part_string_interval.sql-True-select_with_date_literal_coercion_and_two_part_string_interval.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-create_function_with_args.sql-True-create_function_with_args.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-array_agg_distinct_ignore_nulls.sql-True-array_agg_distinct_ignore_nulls.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_ml_predict_with_select.sql-True-select_ml_predict_with_select.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-array_agg_respect_nulls.sql-True-array_agg_respect_nulls.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-call_procedure.sql-True-call_procedure.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_if.sql-True-select_if.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_example.sql-True-select_example.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_less_than_greater_than.sql-True-select_less_than_greater_than.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_for_system_time.sql-True-select_for_system_time.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-create_or_replace_table_options_as.sql-True-create_or_replace_table_options_as.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_identifiers.sql-True-select_identifiers.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-export_statement.sql-True-export_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_with_offset_3.sql-True-select_with_offset_3.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_with_offset_2.sql-True-select_with_offset_2.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-declare_variable_with_default.sql-True-declare_variable_with_default.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_with_window.sql-True-select_with_window.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-create_temp_function_with_select.sql-True-create_temp_function_with_select.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-interval_function.sql-True-interval_function.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_with_union_and_qualify.sql-True-select_with_union_and_qualify.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-create_table_column_options.sql-True-create_table_column_options.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-procedural_statements.sql-True-procedural_statements.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_struct.sql-True-select_struct.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_where_less_than.sql-True-select_where_less_than.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-insert.sql-True-insert.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_with_qualify.sql-True-select_with_qualify.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-normalize_function.sql-True-normalize_function.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_rows_between.sql-True-select_rows_between.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-create_table_keys.sql-True-create_table_keys.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-alter_table_set_options.sql-True-alter_table_set_options.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-alter_table_alter_column.sql-True-alter_table_alter_column.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-typeless_struct.sql-True-typeless_struct.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_mixture_of_array_literals.sql-True-select_mixture_of_array_literals.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_datetime.sql-True-select_datetime.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-dateparts.sql-True-dateparts.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-create_table_trailing_comma.sql-True-create_table_trailing_comma.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_udf_quote_everything.sql-True-select_udf_quote_everything.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-execute_immediate.sql-True-execute_immediate.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-alter_table_rename_to.sql-True-alter_table_rename_to.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-merge_into.sql-True-merge_into.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-begin.sql-True-begin.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_function_with_named_arguments.sql-True-select_function_with_named_arguments.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_1_gt_0.sql-True-select_1_gt_0.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-drop_function.sql-True-drop_function.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_with_offset.sql-True-select_with_offset.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_extract.sql-True-select_extract.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-create_snapshot_table.sql-True-create_snapshot_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_gt_lt.sql-True-select_gt_lt.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-create_js_function_simple.sql-True-create_js_function_simple.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_ml_weights.sql-True-select_ml_weights.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_typeless_struct_inside_function.sql-True-select_typeless_struct_inside_function.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-alter_schema.sql-True-alter_schema.yml]",
        "status": "FAILED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-any_value_having.sql-True-any_value_having.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-create_row_access_policy.sql-True-create_row_access_policy.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-create_table_columns_partition_options.sql-True-create_table_columns_partition_options.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_function_parameter_order_by_multiple_columns.sql-True-select_function_parameter_order_by_multiple_columns.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_replace.sql-True-select_replace.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_column_object_with_keyword.sql-True-select_column_object_with_keyword.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-declare_variable.sql-True-declare_variable.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-create_js_function_options_library_array.sql-True-create_js_function_options_library_array.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-alter_table_add_column.sql-True-alter_table_add_column.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-alter_view_set_options.sql-True-alter_view_set_options.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_safe_function.sql-True-select_safe_function.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-create_schema.sql-True-create_schema.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-create_js_function_deterministic.sql-True-create_js_function_deterministic.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_udf_quote_nothing.sql-True-select_udf_quote_nothing.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-create_procedure.sql-True-create_procedure.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-create_or_replace_sql_function_any_type.sql-True-create_or_replace_sql_function_any_type.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_unpivot.sql-True-select_unpivot.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-parameters.sql-True-parameters.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-set_variable_multiple.sql-True-set_variable_multiple.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-assert.sql-True-assert.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-create_materialized_view_as_replica_of.sql-True-create_materialized_view_as_replica_of.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-create_table_options.sql-True-create_table_options.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_set_operators.sql-True-select_set_operators.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-alter_table_rename_column.sql-True-alter_table_rename_column.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_lt_gt.sql-True-select_lt_gt.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-create_table_default_collate.sql-True-create_table_default_collate.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_pivot.sql-True-select_pivot.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-create_table_like_copy_clone.sql-True-create_table_like_copy_clone.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-tablesample.sql-True-tablesample.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select.sql-True-select.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_hyphenated_table_name_in_from.sql-True-select_hyphenated_table_name_in_from.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-alter_table_drop_column.sql-True-alter_table_drop_column.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-string_literals.sql-True-string_literals.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-create_table_hyphen_project.sql-True-create_table_hyphen_project.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-create_materialized_view.sql-True-create_materialized_view.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-create_table_partition_by_as.sql-True-create_table_partition_by_as.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-select_empty_array_literal.sql-True-select_empty_array_literal.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[bigquery-create_js_function_quoted_name.sql-True-create_js_function_quoted_name.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-create_external_file_format.sql-True-create_external_file_format.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-delete.sql-True-delete.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-update.sql-True-update.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-begin_end_nested.sql-True-begin_end_nested.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-join_hints.sql-True-join_hints.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-create_table_with_sequence_bracketed.sql-True-create_table_with_sequence_bracketed.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-begin_end_no_semicolon.sql-True-begin_end_no_semicolon.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-delete_azure_synapse_analytics.sql-True-delete_azure_synapse_analytics.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-create_external_table.sql-True-create_external_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-create_user.sql-True-create_user.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-raiserror.sql-True-raiserror.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-nested_joins.sql-True-nested_joins.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-drop_procedure.sql-True-drop_procedure.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-alter_and_drop.sql-True-alter_and_drop.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-select_into.sql-True-select_into.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-begin_end.sql-True-begin_end.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-functions_a.sql-True-functions_a.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-temp_tables.sql-True-temp_tables.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-create_table_as_select.sql-True-create_table_as_select.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-create_table_with_sequence.sql-True-create_table_with_sequence.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-set_statements.sql-True-set_statements.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-create_view_with_cte.sql-True-create_view_with_cte.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-transaction.sql-True-transaction.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-convert.sql-True-convert.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-goto_statement.sql-True-goto_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-hints.sql-True-hints.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-create_view_with_set_statements.sql-True-create_view_with_set_statements.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-datepart.sql-True-datepart.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-temporal_tables.sql-True-temporal_tables.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-comment_blocks.sql-True-comment_blocks.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-create_table_with_distribution.sql-True-create_table_with_distribution.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-select_top.sql-True-select_top.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-stored_procedured_mixed_statements.sql-True-stored_procedured_mixed_statements.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-multi_statement_without_semicolon.sql-True-multi_statement_without_semicolon.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-select_natural_join.sql-True-select_natural_join.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-create_table.sql-True-create_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-bulk_insert.sql-True-bulk_insert.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-select_cross_apply.sql-True-select_cross_apply.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-print.sql-True-print.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-cte_s.sql-True-cte_s.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-select_date_functions.sql-True-select_date_functions.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-stored_procedure_begin_end.sql-True-stored_procedure_begin_end.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-stored_procedure_single_statement.sql-True-stored_procedure_single_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-create_view_with_unpivot.sql-True-create_view_with_unpivot.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-openjson.sql-True-openjson.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-collate.sql-True-collate.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-create_view.sql-True-create_view.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-if_else_begin_end.sql-True-if_else_begin_end.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-insert_with_identity_insert.sql-True-insert_with_identity_insert.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-synonym.sql-True-synonym.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-while_statement.sql-True-while_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-cast_variable.sql-True-cast_variable.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-triggers.sql-True-triggers.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-create_view_with_pivot.sql-True-create_view_with_pivot.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-merge.sql-True-merge.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-table_variables.sql-True-table_variables.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-create_type.sql-True-create_type.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-create_view_with_columns.sql-True-create_view_with_columns.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-create_table_with_trailing_comma.sql-True-create_table_with_trailing_comma.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-rename_table.sql-True-rename_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-execute.sql-True-execute.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-create_fulltext_index.sql-True-create_fulltext_index.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-create_table_with_table_option_segment.sql-True-create_table_with_table_option_segment.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-sequence.sql-True-sequence.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-create_table_on_filegroup.sql-True-create_table_on_filegroup.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-waitfor.sql-True-waitfor.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-add_index.sql-True-add_index.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-group_by.sql-True-group_by.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-drop_external_table.sql-True-drop_external_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-insert_default.sql-True-insert_default.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-date_functions.sql-True-date_functions.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-function_default_params.sql-True-function_default_params.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-minimal_function_no_alter.sql-True-minimal_function_no_alter.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-outer_apply.sql-True-outer_apply.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-drop_function.sql-True-drop_function.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-create_columnstore_index.sql-True-create_columnstore_index.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-reconfigure.sql-True-reconfigure.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-create_external_data_source.sql-True-create_external_data_source.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-alter_table_switch.sql-True-alter_table_switch.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-minimal_function.sql-True-minimal_function.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-select_for.sql-True-select_for.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-insert_statement.sql-True-insert_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-if_else.sql-True-if_else.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-create_schema.sql-True-create_schema.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-create_master_key.sql-True-create_master_key.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-declare_with_following_statements.sql-True-declare_with_following_statements.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-create_table_constraints.sql-True-create_table_constraints.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-drop_view.sql-True-drop_view.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-create_procedure.sql-True-create_procedure.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-create_partition_function.sql-True-create_partition_function.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-try_catch.sql-True-try_catch.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-functions_agg.sql-True-functions_agg.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-window_functions.sql-True-window_functions.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-system-variables.sql-True-system-variables.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-create_function.sql-True-create_function.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-alter_table.sql-True-alter_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-openrowset.sql-True-openrowset.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-drop_table.sql-True-drop_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-function_no_return.sql-True-function_no_return.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-create_database_scoped_credential.sql-True-create_database_scoped_credential.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-cursor.sql-True-cursor.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-grant_deny_revoke.sql-True-grant_deny_revoke.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-alter_index.sql-True-alter_index.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-select_pivot.sql-True-select_pivot.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-go_delimiters.sql-True-go_delimiters.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-tablesample.sql-True-tablesample.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-declare_table_type.sql-True-declare_table_type.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-select.sql-True-select.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-function_with_variable.sql-True-function_with_variable.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-copy.sql-True-copy.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-drop_user.sql-True-drop_user.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-sqlcmd_command.sql-True-sqlcmd_command.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-stored_procedure_simple.sql-True-stored_procedure_simple.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-create_partition_scheme.sql-True-create_partition_scheme.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[tsql-create_role.sql-True-create_role.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[vertica-delete.sql-True-delete.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[vertica-join_types.sql-True-join_types.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[vertica-array.sql-True-array.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[vertica-create_table_like.sql-True-create_table_like.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[vertica-join_no_space.sql-True-join_no_space.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[vertica-null_cast_with_whitespaces.sql-True-null_cast_with_whitespaces.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[vertica-datetime_units.sql-True-datetime_units.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[vertica-cast_with_whitespaces.sql-True-cast_with_whitespaces.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[vertica-bare_functions.sql-True-bare_functions.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[vertica-create_table_as.sql-True-create_table_as.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[vertica-single_quote.sql-True-single_quote.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[vertica-create_table.sql-True-create_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[vertica-create_projection.sql-True-create_projection.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[vertica-create_view.sql-True-create_view.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[vertica-within_group.sql-True-within_group.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[vertica-select_case_null_cast.sql-True-select_case_null_cast.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[vertica-limit_clause.sql-True-limit_clause.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[vertica-insert.sql-True-insert.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[vertica-position.sql-True-position.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[vertica-select_frame_clause.sql-True-select_frame_clause.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[vertica-flex_functions.sql-True-flex_functions.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[vertica-group_by.sql-True-group_by.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[vertica-datatypes.sql-True-datatypes.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[vertica-comment_on.sql-True-comment_on.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[vertica-select_case_cast.sql-True-select_case_cast.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[vertica-json_operators.sql-True-json_operators.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[vertica-update_table.sql-True-update_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[vertica-escape.sql-True-escape.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[vertica-set.sql-True-set.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[vertica-alter_schema.sql-True-alter_schema.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[vertica-alter_view.sql-True-alter_view.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[vertica-create_schema.sql-True-create_schema.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[vertica-drop_view.sql-True-drop_view.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[vertica-alter_table.sql-True-alter_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[vertica-subquery.sql-True-subquery.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[vertica-with.sql-True-with.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[vertica-select.sql-True-select.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[vertica-null_filters.sql-True-null_filters.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[vertica-copy.sql-True-copy.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[vertica-grant_privileges.sql-True-grant_privileges.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[vertica-revoke.sql-True-revoke.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[soql-date_literals.sql-True-date_literals.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[soql-select_where_date_n_literals.sql-True-select_where_date_n_literals.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[soql-select_where_date_literals.sql-True-select_where_date_literals.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[db2-labeled_duration.sql-True-labeled_duration.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[db2-join_types.sql-True-join_types.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[db2-case.sql-True-case.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[db2-declare_global_temporary_table.sql-True-declare_global_temporary_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[db2-offset_fetch_limit.sql-True-offset_fetch_limit.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[db2-create_table_field_name_with_pound_sign.sql-True-create_table_field_name_with_pound_sign.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[db2-call_stored_proc.sql-True-call_stored_proc.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[db2-day_unit.sql-True-day_unit.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[db2-values.sql-True-values.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[db2-function_within_group.sql-True-function_within_group.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[db2-lateral.sql-True-lateral.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[db2-create_index.sql-True-create_index.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[db2-select_ordered_nested_sets.sql-True-select_ordered_nested_sets.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[db2-special_registers.sql-True-special_registers.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[db2-over.sql-True-over.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[db2-where_like.sql-True-where_like.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[db2-select.sql-True-select.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-delete.sql-True-delete.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-copy_into_location_partitionby.sql-True-copy_into_location_partitionby.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-create_resource_monitor.sql-True-create_resource_monitor.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-cast_datatype_accessor.sql-True-cast_datatype_accessor.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-set_call_variable.sql-True-set_call_variable.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-copy_into_location_GoogleCloud.sql-True-copy_into_location_GoogleCloud.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-select_like_clause.sql-True-select_like_clause.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-create_external_table.sql-True-create_external_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-select_rename.sql-True-select_rename.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-create_user.sql-True-create_user.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-col_position.sql-True-col_position.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-list_statement.sql-True-list_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-identifier_pseudo_function.sql-True-identifier_pseudo_function.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-transactions.sql-True-transactions.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-multiple_shorthand_casts.sql-True-multiple_shorthand_casts.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-begin_end.sql-True-begin_end.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-return.sql-True-return.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-copy_into_location.sql-True-copy_into_location.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-call.sql-True-call.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_storage_integration.sql-True-alter_storage_integration.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-select_group_by_cube_rollup.sql-True-select_group_by_cube_rollup.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-select_except.sql-True-select_except.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-frame_clause.sql-True-frame_clause.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-datetime_units.sql-True-datetime_units.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-select_union.sql-True-select_union.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-object_literals.sql-True-object_literals.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_pipe.sql-True-alter_pipe.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-bare_functions.sql-True-bare_functions.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-create_task.sql-True-create_task.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-create_stage.sql-True-create_stage.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-semi_structured_4.sql-True-semi_structured_4.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-match_recognize.sql-True-match_recognize.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_session_set_timezone.sql-True-alter_session_set_timezone.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-set_command.sql-True-set_command.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-select_where_is_distinct_from.sql-True-select_where_is_distinct_from.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-non_reserved_keywords.sql-True-non_reserved_keywords.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_task_set_special_simple.sql-True-alter_task_set_special_simple.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_table_column.sql-True-alter_table_column.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-create_table.sql-True-create_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-create_external_function.sql-True-create_external_function.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_streamlit.sql-True-alter_streamlit.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-json_underscore_key.sql-True-json_underscore_key.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-remove_statement.sql-True-remove_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-string_literal.sql-True-string_literal.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_network_policy.sql-True-alter_network_policy.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-copy_into_table.sql-True-copy_into_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-qualify.sql-True-qualify.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_session_unset_parameters.sql-True-alter_session_unset_parameters.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-unset.sql-True-unset.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-semi_structured_3.sql-True-semi_structured_3.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_file_format.sql-True-alter_file_format.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-create_masking_policy.sql-True-create_masking_policy.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-explain.sql-True-explain.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_stage.sql-True-alter_stage.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_task_set_special_full.sql-True-alter_task_set_special_full.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_warehouse.sql-True-alter_warehouse.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_masking_policy.sql-True-alter_masking_policy.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-select_transient_table.sql-True-select_transient_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-first_value_ignore_nulls.sql-True-first_value_ignore_nulls.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_task_if_exists_resume.sql-True-alter_task_if_exists_resume.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-create_view.sql-True-create_view.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-pivot.sql-True-pivot.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-within_group.sql-True-within_group.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_task_unset_full.sql-True-alter_task_unset_full.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-select_values.sql-True-select_values.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-group_by_all.sql-True-group_by_all.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-lateral_flatten_after_join.sql-True-lateral_flatten_after_join.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-call_statement.sql-True-call_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_resource_monitor.sql-True-alter_resource_monitor.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-changes_clause.sql-True-changes_clause.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-sample.sql-True-sample.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-create_table_with_partition_as_column_name.sql-True-create_table_with_partition_as_column_name.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-execute_task.sql-True-execute_task.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_task_resume.sql-True-alter_task_resume.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-select_grouping_sets.sql-True-select_grouping_sets.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-comment_statement.sql-True-comment_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_function.sql-True-alter_function.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-select_system_function.sql-True-select_system_function.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-for_in_loop.sql-True-for_in_loop.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-datetime_intervals.sql-True-datetime_intervals.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_stream.sql-True-alter_stream.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-grant_revoke.sql-True-grant_revoke.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-get_statement.sql-True-get_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_materialized_view.sql-True-alter_materialized_view.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-insert.sql-True-insert.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_external_function.sql-True-alter_external_function.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-semi_structured.sql-True-semi_structured.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-create_warehouse.sql-True-create_warehouse.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_user_remove_delegate_auth.sql-True-alter_user_remove_delegate_auth.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-execute_immediate.sql-True-execute_immediate.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-create_stream.sql-True-create_stream.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_task_modify_as.sql-True-alter_task_modify_as.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-merge_into.sql-True-merge_into.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_task_unset_simple.sql-True-alter_task_unset_simple.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-select_clause_modifiers.sql-True-select_clause_modifiers.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-copy_into_location_Azure.sql-True-copy_into_location_Azure.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-create_tag.sql-True-create_tag.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-let.sql-True-let.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-escape.sql-True-escape.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-window_function_ignore_nulls.sql-True-window_function_ignore_nulls.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-select_asof_join.sql-True-select_asof_join.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_schema.sql-True-alter_schema.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-drop_statements.sql-True-drop_statements.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-create_database.sql-True-create_database.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_task_remove_after.sql-True-alter_task_remove_after.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-select_exclude.sql-True-select_exclude.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-create_network_policy.sql-True-create_network_policy.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-undrop.sql-True-undrop.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-select_replace.sql-True-select_replace.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-copy_into_location_Amazon_SC3.sql-True-copy_into_location_Amazon_SC3.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-create_pipe.sql-True-create_pipe.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_view.sql-True-alter_view.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-create_schema.sql-True-create_schema.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_external_volume.sql-True-alter_external_volume.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-create_notification_integration.sql-True-create_notification_integration.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-create_streamlit.sql-True-create_streamlit.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-truncate_table.sql-True-truncate_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_user_delegate_auth.sql-True-alter_user_delegate_auth.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-create_procedure.sql-True-create_procedure.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-describe_statements.sql-True-describe_statements.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_task_set_simple.sql-True-alter_task_set_simple.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-select_exclude_rename.sql-True-select_exclude_rename.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-create_sequence.sql-True-create_sequence.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-create_database_role.sql-True-create_database_role.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_share.sql-True-alter_share.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-create_clone.sql-True-create_clone.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_procedure.sql-True-alter_procedure.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_user_reset_password.sql-True-alter_user_reset_password.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_user_delegate_auth_role.sql-True-alter_user_delegate_auth_role.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_user_rename.sql-True-alter_user_rename.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-put_statement.sql-True-put_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-create_function.sql-True-create_function.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_table.sql-True-alter_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_user_unset_values.sql-True-alter_user_unset_values.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-limit.sql-True-limit.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_account.sql-True-alter_account.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-semi_structured_2.sql-True-semi_structured_2.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-use.sql-True-use.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-qualify_union.sql-True-qualify_union.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_database.sql-True-alter_database.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_sequence.sql-True-alter_sequence.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_user_set_values.sql-True-alter_user_set_values.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-select_stages_files.sql-True-select_stages_files.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_task_set_full.sql-True-alter_task_set_full.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_external_table.sql-True-alter_external_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-connect_by.sql-True-connect_by.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_role.sql-True-alter_role.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_task_suspend.sql-True-alter_task_suspend.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-create_file_format.sql-True-create_file_format.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-select.sql-True-select.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_task_modify_when.sql-True-alter_task_modify_when.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-copy_files_into_location_statement.sql-True-copy_files_into_location_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-inline_comment.sql-True-inline_comment.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-create_external_volume.sql-True-create_external_volume.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_task_add_after.sql-True-alter_task_add_after.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_table_clustering_action.sql-True-alter_table_clustering_action.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-create_table_comments.sql-True-create_table_comments.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-create_storage_integration.sql-True-create_storage_integration.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-alter_user_abort_query.sql-True-alter_user_abort_query.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[snowflake-create_role.sql-True-create_role.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[duckdb-asof_join.sql-True-asof_join.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[duckdb-create_table.sql-True-create_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[duckdb-unpivot.sql-True-unpivot.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[duckdb-select_quoted.sql-True-select_quoted.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[duckdb-qualify.sql-True-qualify.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[duckdb-select_exclude_replace.sql-True-select_exclude_replace.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[duckdb-anti_semi_join.sql-True-anti_semi_join.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[duckdb-group_order_by_all.sql-True-group_order_by_all.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[duckdb-select_columns.sql-True-select_columns.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[duckdb-pivot.sql-True-pivot.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[duckdb-from_first.sql-True-from_first.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[duckdb-extract_temporal.sql-True-extract_temporal.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[duckdb-list_struct.sql-True-list_struct.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[duckdb-json_operators.sql-True-json_operators.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[duckdb-select_exclude.sql-True-select_exclude.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[duckdb-select_replace.sql-True-select_replace.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[duckdb-select_lambda.sql-True-select_lambda.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[duckdb-select.sql-True-select.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[duckdb-positional_join.sql-True-positional_join.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-update.sql-True-update.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-set_sql_log_bin.sql-True-set_sql_log_bin.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-declare_default_quotedliteral.sql-True-declare_default_quotedliteral.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-delete_multitable.sql-True-delete_multitable.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-use_key.sql-True-use_key.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-handler_sqlstate_value.sql-True-handler_sqlstate_value.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-ignore_key.sql-True-ignore_key.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-loop_label.sql-True-loop_label.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-drop_index_with_algorithm.sql-True-drop_index_with_algorithm.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-grant.sql-True-grant.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-set_session_variable.sql-True-set_session_variable.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-get_diagnostics_condition_session_variable.sql-True-get_diagnostics_condition_session_variable.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-create_user.sql-True-create_user.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-resignal_set_signal_info.sql-True-resignal_set_signal_info.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-drop_procedure.sql-True-drop_procedure.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-prepare_session_variable.sql-True-prepare_session_variable.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-declare_condition.sql-True-declare_condition.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-if_multiple_expression.sql-True-if_multiple_expression.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-line_comment.sql-True-line_comment.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-use_index_for_join.sql-True-use_index_for_join.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_into_outfile_lines_starting.sql-True-select_into_outfile_lines_starting.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-function_no_sql.sql-True-function_no_sql.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-hexadecimal_literal.sql-True-hexadecimal_literal.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-if_session_variable.sql-True-if_session_variable.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-execute_prepared_stmt.sql-True-execute_prepared_stmt.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-delimiter_procedure.sql-True-delimiter_procedure.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_for_update.sql-True-select_for_update.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-declare_cursor.sql-True-declare_cursor.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-function_sql_security_invoker.sql-True-function_sql_security_invoker.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-procedure_in_param.sql-True-procedure_in_param.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-close_qualified.sql-True-close_qualified.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-function_return.sql-True-function_return.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-system_variables.sql-True-system_variables.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-function_sql_security_definer.sql-True-function_sql_security_definer.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-signal_condition_sqlstate_value.sql-True-signal_condition_sqlstate_value.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-function_definer.sql-True-function_definer.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-force_index_left_join.sql-True-force_index_left_join.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-ignore_index_for_group_by.sql-True-ignore_index_for_group_by.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-create_table.sql-True-create_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_into_outfile_fields_escaped.sql-True-select_into_outfile_fields_escaped.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-execute_prepared_stmt_using_multiple_variable.sql-True-execute_prepared_stmt_using_multiple_variable.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-use_index_for_order_by.sql-True-use_index_for_order_by.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-load_data.sql-True-load_data.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_sql_buffer_result.sql-True-select_sql_buffer_result.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_for_update_of_multiple.sql-True-select_for_update_of_multiple.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-procedure_inout_param.sql-True-procedure_inout_param.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-use_index.sql-True-use_index.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-quoted_literal.sql-True-quoted_literal.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-get_diagnostics_condition_local_variable.sql-True-get_diagnostics_condition_local_variable.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_into_outfile.sql-True-select_into_outfile.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-create_table_primary_foreign_keys.sql-True-create_table_primary_foreign_keys.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-explain.sql-True-explain.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-delimiter_select.sql-True-delimiter_select.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-interval.sql-True-interval.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-force_index_for_order_by.sql-True-force_index_for_order_by.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_into_outfile_fields_terminated.sql-True-select_into_outfile_fields_terminated.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-analyze_table.sql-True-analyze_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-create_view.sql-True-create_view.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-drop_trigger.sql-True-drop_trigger.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-open_qualified.sql-True-open_qualified.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_local_variable.sql-True-select_local_variable.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-set_multiple_variables.sql-True-set_multiple_variables.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-optimize_table.sql-True-optimize_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-handler_error_code.sql-True-handler_error_code.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-drop_prepare.sql-True-drop_prepare.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_for_update_skip_locked.sql-True-select_for_update_skip_locked.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-call_statement.sql-True-call_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-if_subquery_expression.sql-True-if_subquery_expression.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-create_table_constraint_unique.sql-True-create_table_constraint_unique.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-signal_set_signal_info_multiple.sql-True-signal_set_signal_info_multiple.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-flush.sql-True-flush.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-reset_master.sql-True-reset_master.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-set_session_variable_expression.sql-True-set_session_variable_expression.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-create_table_unique_key.sql-True-create_table_unique_key.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-if_nested.sql-True-if_nested.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-prepare_local_variable.sql-True-prepare_local_variable.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-function_notdeterministic.sql-True-function_notdeterministic.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-rename_table.sql-True-rename_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-create_table_null_position.sql-True-create_table_null_position.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-signal.sql-True-signal.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-loop_no_label.sql-True-loop_no_label.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-insert.sql-True-insert.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-check_constraint.sql-True-check_constraint.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-execute_prepared_stmt_using.sql-True-execute_prepared_stmt_using.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-force_index.sql-True-force_index.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-fetch_session_multiple.sql-True-fetch_session_multiple.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-declare_exit_handler_sqlexception.sql-True-declare_exit_handler_sqlexception.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-checksum_table.sql-True-checksum_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_sql_calc_found_rows.sql-True-select_sql_calc_found_rows.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-handler_not_found.sql-True-handler_not_found.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-signal_condition_name.sql-True-signal_condition_name.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-repeat_no_label.sql-True-repeat_no_label.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-while_label.sql-True-while_label.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-create_index.sql-True-create_index.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_into_outfile_fields_optionally_enclosed.sql-True-select_into_outfile_fields_optionally_enclosed.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-get_diagnostics_condition_info_multiple_variable.sql-True-get_diagnostics_condition_info_multiple_variable.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-create_table_index.sql-True-create_table_index.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-resignal_condition_name.sql-True-resignal_condition_name.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_for_update_nowait.sql-True-select_for_update_nowait.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-force_key.sql-True-force_key.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-help_statement.sql-True-help_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_into_session_variable.sql-True-select_into_session_variable.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-resignal.sql-True-resignal.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-declare_continue_handler_sqlexception.sql-True-declare_continue_handler_sqlexception.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-get_diagnostics_condition_info_session_variable.sql-True-get_diagnostics_condition_info_session_variable.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-repair_table.sql-True-repair_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-set_names.sql-True-set_names.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-create_table_datetime.sql-True-create_table_datetime.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-force_index_for_group_by.sql-True-force_index_for_group_by.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-begin.sql-True-begin.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-drop_function.sql-True-drop_function.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-check_table.sql-True-check_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_sql_cache.sql-True-select_sql_cache.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-fetch.sql-True-fetch.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-bit_value_literal.sql-True-bit_value_literal.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-create_trigger.sql-True-create_trigger.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-get_diagnostics_condition_info_local_variable.sql-True-get_diagnostics_condition_info_local_variable.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_sql_no_cache.sql-True-select_sql_no_cache.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-create_table_equals_optional.sql-True-create_table_equals_optional.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_straight_join.sql-True-select_straight_join.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_for_update_lock_in_share_mode.sql-True-select_for_update_lock_in_share_mode.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-create_database.sql-True-create_database.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-variable_assignment.sql-True-variable_assignment.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_lock_in_share_mode.sql-True-select_lock_in_share_mode.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-if.sql-True-if.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-signal_condition_sqlstate.sql-True-signal_condition_sqlstate.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-delimiter_function.sql-True-delimiter_function.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-handler_condition_name.sql-True-handler_condition_name.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-if_else.sql-True-if_else.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-alter_view.sql-True-alter_view.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-procedure_out_param.sql-True-procedure_out_param.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-function_modifies_sql.sql-True-function_modifies_sql.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_into_multiple_variable.sql-True-select_into_multiple_variable.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-purge_binary_logs.sql-True-purge_binary_logs.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_for_share.sql-True-select_for_share.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-ignore_index.sql-True-ignore_index.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_into_outfile_lines_terminated.sql-True-select_into_outfile_lines_terminated.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-function_comment.sql-True-function_comment.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-resignal_set_signal_info_multiple.sql-True-resignal_set_signal_info_multiple.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-get_diagnostics_condition_numeric.sql-True-get_diagnostics_condition_numeric.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-declare_undo_handler_sqlexception.sql-True-declare_undo_handler_sqlexception.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_sql_small_result.sql-True-select_sql_small_result.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-fetch_next_from.sql-True-fetch_next_from.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-force_index_for_join.sql-True-force_index_for_join.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_multiple_partition.sql-True-select_multiple_partition.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-get_diagnostics_row_count.sql-True-get_diagnostics_row_count.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-function_reads_sql.sql-True-function_reads_sql.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-use_database.sql-True-use_database.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_partition.sql-True-select_partition.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-use_index_for_group_by.sql-True-use_index_for_group_by.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-replace.sql-True-replace.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-resignal_condition_sqlstate_value.sql-True-resignal_condition_sqlstate_value.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-get_diagnostics_number.sql-True-get_diagnostics_number.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_into_outfile_fields_enclosed.sql-True-select_into_outfile_fields_enclosed.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-repeat_label.sql-True-repeat_label.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-fetch_from.sql-True-fetch_from.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-close.sql-True-close.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-alter_table.sql-True-alter_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-procedure_definer.sql-True-procedure_definer.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-repeat_multiple_statements.sql-True-repeat_multiple_statements.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_distinctrow.sql-True-select_distinctrow.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-fetch_multiple.sql-True-fetch_multiple.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_high_priority.sql-True-select_high_priority.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-drop_table.sql-True-drop_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-drop_index.sql-True-drop_index.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-handler_sqlwarning.sql-True-handler_sqlwarning.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_session_variable.sql-True-select_session_variable.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-use_statement.sql-True-use_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-values_statement.sql-True-values_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-alter_database.sql-True-alter_database.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-declare_default_numeric.sql-True-declare_default_numeric.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-ignore_index_for_join.sql-True-ignore_index_for_join.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_sql_big_result.sql-True-select_sql_big_result.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-handler_sqlstate.sql-True-handler_sqlstate.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-ignore_index_for_order_by.sql-True-ignore_index_for_order_by.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-if_elseif.sql-True-if_elseif.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_into_dumpfile.sql-True-select_into_dumpfile.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-resignal_condition_sqlstate.sql-True-resignal_condition_sqlstate.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-while_no_label.sql-True-while_no_label.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-nested_begin.sql-True-nested_begin.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-json.sql-True-json.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-create_table_column_charset.sql-True-create_table_column_charset.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-loop_multiple_statements.sql-True-loop_multiple_statements.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-fetch_session.sql-True-fetch_session.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-declare_local_variable.sql-True-declare_local_variable.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-open.sql-True-open.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_for_update_of.sql-True-select_for_update_of.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-deallocate_prepare.sql-True-deallocate_prepare.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-column_alias.sql-True-column_alias.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-drop_index_with_lock.sql-True-drop_index_with_lock.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-prepare_statement.sql-True-prepare_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-signal_set_signal_info.sql-True-signal_set_signal_info.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-set_booleans.sql-True-set_booleans.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-create_role.sql-True-create_role.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[mysql-select_boolean_operators.sql-True-select_boolean_operators.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-update.sql-True-update.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-alter_user.sql-True-alter_user.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-create_external_table.sql-True-create_external_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-create_user.sql-True-create_user.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-insert_into.sql-True-insert_into.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-drop_procedure.sql-True-drop_procedure.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-select_into.sql-True-select_into.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-transactions.sql-True-transactions.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-create_group.sql-True-create_group.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-array_unnest.sql-True-array_unnest.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-call.sql-True-call.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-select_dateadd.sql-True-select_dateadd.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-temporary_tables.sql-True-temporary_tables.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-cast_with_whitespaces.sql-True-cast_with_whitespaces.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-create_table_as.sql-True-create_table_as.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-select_top.sql-True-select_top.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-single_quote.sql-True-single_quote.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-create_table.sql-True-create_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-create_external_function.sql-True-create_external_function.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-unpivot.sql-True-unpivot.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-qualify.sql-True-qualify.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-create_datashare.sql-True-create_datashare.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-datetime_cast.sql-True-datetime_cast.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-create_view.sql-True-create_view.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-desc_datashare.sql-True-desc_datashare.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-pivot.sql-True-pivot.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-create_model.sql-True-create_model.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-alter_group.sql-True-alter_group.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-cast_conversion.sql-True-cast_conversion.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-attach_rls_policy.sql-True-attach_rls_policy.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-lock_table.sql-True-lock_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-dateparts.sql-True-dateparts.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-detach_rls_policy.sql-True-detach_rls_policy.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-approximate_functions.sql-True-approximate_functions.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-select_from_with_parenthesis.sql-True-select_from_with_parenthesis.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-declare.sql-True-declare.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-unload.sql-True-unload.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-show_model.sql-True-show_model.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-create_rls_policy.sql-True-create_rls_policy.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-create_external_schema.sql-True-create_external_schema.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-fetch.sql-True-fetch.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-create_external_table_as.sql-True-create_external_table_as.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-select_datetime_functions.sql-True-select_datetime_functions.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-grant_datashare_usage.sql-True-grant_datashare_usage.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-alter_schema.sql-True-alter_schema.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-alter_datashare.sql-True-alter_datashare.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-show_datashares.sql-True-show_datashares.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-alter_default_privileges.sql-True-alter_default_privileges.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-drop_datashare.sql-True-drop_datashare.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-object_unpivot.sql-True-object_unpivot.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-create_schema.sql-True-create_schema.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-select_first_value.sql-True-select_first_value.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-create_library.sql-True-create_library.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-create_procedure.sql-True-create_procedure.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-unreserved_keywords.sql-True-unreserved_keywords.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-window_functions.sql-True-window_functions.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-alter_procedure.sql-True-alter_procedure.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-close.sql-True-close.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-create_function.sql-True-create_function.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-alter_table.sql-True-alter_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-analyze_compression.sql-True-analyze_compression.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-drop_rls_policy.sql-True-drop_rls_policy.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-super_data_type.sql-True-super_data_type.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-select_keywords.sql-True-select_keywords.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-vacuum.sql-True-vacuum.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-copy.sql-True-copy.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-create_materialized_view.sql-True-create_materialized_view.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-pattern_match_expressions.sql-True-pattern_match_expressions.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[redshift-percentile_cont.sql-True-percentile_cont.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-drop_table_statement.sql-True-drop_table_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-alter_system.sql-True-alter_system.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-select_statement.sql-True-select_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-create_consumer_group.sql-True-create_consumer_group.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-explain_virtual.sql-True-explain_virtual.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-alter_user.sql-True-alter_user.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-drop_script_statement.sql-True-drop_script_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-kill_statement.sql-True-kill_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-rename_statement.sql-True-rename_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-create_adapter_script_statement.sql-True-create_adapter_script_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-create_user.sql-True-create_user.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-create_scripting_lua_script_statement2.sql-True-create_scripting_lua_script_statement2.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-drop_schema_statement.sql-True-drop_schema_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-create_scripting_lua_script_statement1.sql-True-create_scripting_lua_script_statement1.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-open_close_schema.sql-True-open_close_schema.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-preload_statement.sql-True-preload_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-alter_table_column.sql-True-alter_table_column.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-create_function_statement.sql-True-create_function_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-create_udfscript_statement4.sql-True-create_udfscript_statement4.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-create_udfscript_statement5.sql-True-create_udfscript_statement5.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-Add_Days.sql-True-Add_Days.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-create_udfscript_statement2.sql-True-create_udfscript_statement2.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-export_statement.sql-True-export_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-flush_statistics.sql-True-flush_statistics.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-alter_session.sql-True-alter_session.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-drop_consumer_group.sql-True-drop_consumer_group.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-access_statement.sql-True-access_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-create_connection.sql-True-create_connection.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-comment_statement.sql-True-comment_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-alter_virtual_schema_statement.sql-True-alter_virtual_schema_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-execute_script.sql-True-execute_script.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-drop_connection_statement.sql-True-drop_connection_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-import_statement.sql-True-import_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-create_table_statement.sql-True-create_table_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-alter_table_distribute_partition.sql-True-alter_table_distribute_partition.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-delete_statement.sql-True-delete_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-truncate_statement.sql-True-truncate_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-recompress_statement.sql-True-recompress_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-create_scripting_lua_script_statement3.sql-True-create_scripting_lua_script_statement3.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-update_statement.sql-True-update_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-insert_statement.sql-True-insert_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-create_schema.sql-True-create_schema.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-create_udfscript_dot_syntax.sql-True-create_udfscript_dot_syntax.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-create_udfscript_statement1.sql-True-create_udfscript_statement1.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-alter_schema_statement.sql-True-alter_schema_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-create_virtual_schema_statement.sql-True-create_virtual_schema_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-drop_cascade_restrict_statement.sql-True-drop_cascade_restrict_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-values_in_subquery.sql-True-values_in_subquery.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-create_udfscript_statement3.sql-True-create_udfscript_statement3.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-alter_consumer_group.sql-True-alter_consumer_group.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-alter_role.sql-True-alter_role.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-alter_table_constraint.sql-True-alter_table_constraint.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-create_view_statement.sql-True-create_view_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-alter_connection.sql-True-alter_connection.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-merge_statement.sql-True-merge_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-data_type_test.sql-True-data_type_test.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-create_python_scalar_script.sql-True-create_python_scalar_script.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-create_lua_script_bracket.sql-True-create_lua_script_bracket.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-drop_cascade_statement.sql-True-drop_cascade_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[exasol-create_role.sql-True-create_role.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[oracle-join_types.sql-True-join_types.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[oracle-comment.sql-True-comment.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[oracle-prompt.sql-True-prompt.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[oracle-bare_functions.sql-True-bare_functions.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[oracle-select_natural_join.sql-True-select_natural_join.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[oracle-create_table.sql-True-create_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[oracle-fetch_first_row_only.sql-True-fetch_first_row_only.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[oracle-named_argument.sql-True-named_argument.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[oracle-create_view.sql-True-create_view.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[oracle-non_ansi_joins.sql-True-non_ansi_joins.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[oracle-within_group.sql-True-within_group.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[oracle-interval_operations.sql-True-interval_operations.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[oracle-space_between_alias_and_column.sql-True-space_between_alias_and_column.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[oracle-lateral.sql-True-lateral.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[oracle-temporary_table.sql-True-temporary_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[oracle-pivot_unpivot.sql-True-pivot_unpivot.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[oracle-hierarchical_queries.sql-True-hierarchical_queries.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[oracle-database_link.sql-True-database_link.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[oracle-quoted_slash.sql-True-quoted_slash.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[oracle-alter_table.sql-True-alter_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[oracle-drop_table.sql-True-drop_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[oracle-comparison_operators_with_space.sql-True-comparison_operators_with_space.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[oracle-at_signs.sql-True-at_signs.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[oracle-bind_variables.sql-True-bind_variables.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[teradata-set_query_band.sql-True-set_query_band.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[teradata-create_table.sql-True-create_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[teradata-set_session.sql-True-set_session.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[teradata-update_from.sql-True-update_from.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[teradata-database.sql-True-database.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[teradata-comparison_operators.sql-True-comparison_operators.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[teradata-collect_stats.sql-True-collect_stats.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[teradata-comment_on_column_stmt.sql-True-comment_on_column_stmt.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[teradata-create_table_stmt_4.sql-True-create_table_stmt_4.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[teradata-create_table_stmt_2.sql-True-create_table_stmt_2.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[teradata-select_stmt.sql-True-select_stmt.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[teradata-qualify_expression_union.sql-True-qualify_expression_union.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[teradata-qualify_expression.sql-True-qualify_expression.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[teradata-select_top.sql-True-select_top.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[teradata-select_stmt_normalize.sql-True-select_stmt_normalize.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[teradata-collect_stats_2.sql-True-collect_stats_2.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[teradata-delete_stmt.sql-True-delete_stmt.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[teradata-create_table_stmt_3.sql-True-create_table_stmt_3.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[teradata-create_table_with_data.sql-True-create_table_with_data.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[teradata-qualify_over.sql-True-qualify_over.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[teradata-create_table_stmt.sql-True-create_table_stmt.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[teradata-select_date.sql-True-select_date.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[teradata-comment_on_table_stmt.sql-True-comment_on_table_stmt.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[teradata-select_stmt_cast.sql-True-select_stmt_cast.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[teradata-bteq_stmt.sql-True-bteq_stmt.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-delete.sql-True-delete.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-join_types.sql-True-join_types.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-array.sql-True-array.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-drop_cast.sql-True-drop_cast.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-range_operators.sql-True-range_operators.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-drop_database.sql-True-drop_database.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-drop_materialized_view.sql-True-drop_materialized_view.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-drop_type.sql-True-drop_type.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-join_no_space.sql-True-join_no_space.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-drop_procedure.sql-True-drop_procedure.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-drop_aggregate.sql-True-drop_aggregate.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-select_into.sql-True-select_into.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-psql_variable.sql-True-psql_variable.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-call.sql-True-call.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-overlaps.sql-True-overlaps.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-create_publication.sql-True-create_publication.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-drop_owned.sql-True-drop_owned.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-datetime_units.sql-True-datetime_units.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-cast_with_whitespaces.sql-True-cast_with_whitespaces.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-postgres_postgis_operators.sql-True-postgres_postgis_operators.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-bare_functions.sql-True-bare_functions.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-create_table_as.sql-True-create_table_as.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-select_natural_join.sql-True-select_natural_join.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-single_quote.sql-True-single_quote.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-postgis.sql-True-postgis.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-create_table.sql-True-create_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-explain.sql-True-explain.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-values_alias.sql-True-values_alias.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-create_view.sql-True-create_view.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-drop_trigger.sql-True-drop_trigger.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-create_statistics.sql-True-create_statistics.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-create_policy.sql-True-create_policy.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-within_group.sql-True-within_group.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-pgvector.sql-True-pgvector.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-truncate.sql-True-truncate.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-create_cast.sql-True-create_cast.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-alter_trigger.sql-True-alter_trigger.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-reassign_owned.sql-True-reassign_owned.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-alter_function.sql-True-alter_function.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-limit_clause.sql-True-limit_clause.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-create_type.sql-True-create_type.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-create_collation.sql-True-create_collation.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-values.sql-True-values.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-alter_materialized_view.sql-True-alter_materialized_view.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-create_dollar_quoted_function.sql-True-create_dollar_quoted_function.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-insert.sql-True-insert.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-refresh_materialized_view.sql-True-refresh_materialized_view.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-alter_policy.sql-True-alter_policy.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-drop_statistics.sql-True-drop_statistics.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-position.sql-True-position.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-drop_domain.sql-True-drop_domain.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-create_server.sql-True-create_server.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-cluster.sql-True-cluster.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-table_functions.sql-True-table_functions.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-select_frame_clause.sql-True-select_frame_clause.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-create_aggregate.sql-True-create_aggregate.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-cte_in_materialized_view.sql-True-cte_in_materialized_view.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-create_index.sql-True-create_index.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-reset.sql-True-reset.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-group_by.sql-True-group_by.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-load.sql-True-load.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-lock_table.sql-True-lock_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-select_ordered_nested_sets.sql-True-select_ordered_nested_sets.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-discard.sql-True-discard.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-create_extension.sql-True-create_extension.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-datatypes.sql-True-datatypes.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-create_zero_argument_function.sql-True-create_zero_argument_function.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-comment_on.sql-True-comment_on.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-create_foreign_table.sql-True-create_foreign_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-select_case_cast.sql-True-select_case_cast.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-json_operators.sql-True-json_operators.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-unicode_double_quote.sql-True-unicode_double_quote.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-alter_domain.sql-True-alter_domain.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-drop_function.sql-True-drop_function.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-update_table.sql-True-update_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-create_trigger.sql-True-create_trigger.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-escape.sql-True-escape.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-set.sql-True-set.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-alter_schema.sql-True-alter_schema.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-create_database.sql-True-create_database.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-alter_extension.sql-True-alter_extension.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-notifications.sql-True-notifications.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-unicode_single_quote.sql-True-unicode_single_quote.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-drop_publication.sql-True-drop_publication.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-alter_default_privileges.sql-True-alter_default_privileges.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-alter_view.sql-True-alter_view.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-create_schema.sql-True-create_schema.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-import_foreign_schema.sql-True-import_foreign_schema.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-drop_view.sql-True-drop_view.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-alter_type.sql-True-alter_type.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-create_procedure.sql-True-create_procedure.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-create_sequence.sql-True-create_sequence.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-join_lateral.sql-True-join_lateral.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-drop_policy.sql-True-drop_policy.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-alter_procedure.sql-True-alter_procedure.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-psql_meta_command.sql-True-psql_meta_command.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-create_function.sql-True-create_function.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-alter_table.sql-True-alter_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-values_in_subquery.sql-True-values_in_subquery.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-do.sql-True-do.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-drop_index.sql-True-drop_index.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-alter_database.sql-True-alter_database.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-subquery.sql-True-subquery.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-alter_sequence.sql-True-alter_sequence.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-create_user_mapping.sql-True-create_user_mapping.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-alter_role.sql-True-alter_role.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-with.sql-True-with.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-filter.sql-True-filter.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-alter_index.sql-True-alter_index.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-drop_sequence.sql-True-drop_sequence.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-select.sql-True-select.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-substring.sql-True-substring.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-vacuum.sql-True-vacuum.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-reindex.sql-True-reindex.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-null_filters.sql-True-null_filters.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-copy.sql-True-copy.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-create_materialized_view.sql-True-create_materialized_view.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-alter_publication.sql-True-alter_publication.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-grant_privileges.sql-True-grant_privileges.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-composite_types.sql-True-composite_types.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-revoke.sql-True-revoke.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-pattern_match_expressions.sql-True-pattern_match_expressions.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-create_domain.sql-True-create_domain.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-alter_statistics.sql-True-alter_statistics.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-analyze.sql-True-analyze.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[postgres-create_role.sql-True-create_role.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-create_table_external_partitioned.sql-True-create_table_external_partitioned.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-insert_overwrite_table_dynamic_partition.sql-True-insert_overwrite_table_dynamic_partition.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-drop_database.sql-True-drop_database.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-create_table_like.sql-True-create_table_like.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-select_interval.sql-True-select_interval.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-create_table_as_select.sql-True-create_table_as_select.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-insert_into_table.sql-True-insert_into_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-select_lateral_view.sql-True-select_lateral_view.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-select_left_semi_join.sql-True-select_left_semi_join.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-quoted_literal.sql-True-quoted_literal.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-select_regexp.sql-True-select_regexp.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-select_cast.sql-True-select_cast.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-insert_into_table_values.sql-True-insert_into_table_values.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-array_types.sql-True-array_types.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-insert_overwrite_table_partition.sql-True-insert_overwrite_table_partition.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-select_cluster_distribute_sort_by.sql-True-select_cluster_distribute_sort_by.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-msck_table.sql-True-msck_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-insert_overwrite_directory.sql-True-insert_overwrite_directory.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-select_sampling_table.sql-True-select_sampling_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-insert_overwrite_table.sql-True-insert_overwrite_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-create_table_temporary_properties.sql-True-create_table_temporary_properties.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-create_table_temporary_external.sql-True-create_table_temporary_external.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-drop_schema.sql-True-drop_schema.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-set.sql-True-set.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-alter_schema.sql-True-alter_schema.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-create_database.sql-True-create_database.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-create_schema.sql-True-create_schema.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-create_table_clustered_by.sql-True-create_table_clustered_by.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-truncate_table.sql-True-truncate_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-create_table_constraints.sql-True-create_table_constraints.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-create_table_row_format_serde.sql-True-create_table_row_format_serde.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-create_table_row_format_delimited.sql-True-create_table_row_format_delimited.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-create_table_with.sql-True-create_table_with.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-create_table_datatypes.sql-True-create_table_datatypes.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-alter_table.sql-True-alter_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-drop_table.sql-True-drop_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-use.sql-True-use.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-alter_database.sql-True-alter_database.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-create_table_skewed_by.sql-True-create_table_skewed_by.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-insert_into_table_partition.sql-True-insert_into_table_partition.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[hive-msck_repair_table.sql-True-msck_repair_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sqlite-create_table_autoincrement.sql-True-create_table_autoincrement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sqlite-delete.sql-True-delete.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sqlite-update.sql-True-update.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sqlite-create_table_check.sql-True-create_table_check.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sqlite-create_table.sql-True-create_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sqlite-is_clause.sql-True-is_clause.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sqlite-drop_trigger.sql-True-drop_trigger.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sqlite-block_comment_end_of_input.sql-True-block_comment_end_of_input.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sqlite-insert.sql-True-insert.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sqlite-arithmetric_a.sql-True-arithmetric_a.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sqlite-create_index.sql-True-create_index.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sqlite-pattern_matching.sql-True-pattern_matching.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sqlite-create_table_constraint_default.sql-True-create_table_constraint_default.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sqlite-create_table_constraint_regexp.sql-True-create_table_constraint_regexp.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sqlite-create_table_table_end.sql-True-create_table_table_end.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sqlite-create_trigger.sql-True-create_trigger.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sqlite-create_table_deferrable.sql-True-create_table_deferrable.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sqlite-pragma.sql-True-pragma.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sqlite-select.sql-True-select.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sqlite-quoted_identifiers.sql-True-quoted_identifiers.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[databricks-select_from_lateral_view.sql-True-select_from_lateral_view.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[databricks-set_time_zone.sql-True-set_time_zone.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[databricks-create_table.sql-True-create_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[databricks-unpivot.sql-True-unpivot.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[databricks-pivot.sql-True-pivot.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[databricks-alter_catalog.sql-True-alter_catalog.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[databricks-create_catalog.sql-True-create_catalog.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[databricks-date_functions.sql-True-date_functions.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[databricks-use_database.sql-True-use_database.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[databricks-create_function.sql-True-create_function.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[databricks-use_catalog.sql-True-use_catalog.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[databricks-select_window.sql-True-select_window.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[databricks-drop_catalog.sql-True-drop_catalog.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[databricks-select.sql-True-select.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[clickhouse-select_except.sql-True-select_except.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[clickhouse-drop_statement.sql-True-drop_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[clickhouse-back_quoted_identifier.sql-True-back_quoted_identifier.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[clickhouse-create_table.sql-True-create_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[clickhouse-cte.sql-True-cte.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[clickhouse-create_database.sql-True-create_database.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[clickhouse-lambda_function.sql-True-lambda_function.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[clickhouse-cte_columns.sql-True-cte_columns.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[clickhouse-join.sql-True-join.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[clickhouse-system_statement.sql-True-system_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[clickhouse-select_distinct_on.sql-True-select_distinct_on.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[clickhouse-in_operator.sql-True-in_operator.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[clickhouse-final.sql-True-final.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[clickhouse-dollar_quoted_literal.sql-True-dollar_quoted_literal.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[clickhouse-create_materialized_view.sql-True-create_materialized_view.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[materialize-create_source_statements.sql-True-create_source_statements.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[materialize-create_views.sql-True-create_views.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[materialize-grant_statements.sql-True-grant_statements.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[materialize-create_connection_statement.sql-True-create_connection_statement.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[materialize-explain_statements.sql-True-explain_statements.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[materialize-copy_to_from_statements.sql-True-copy_to_from_statements.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[materialize-insert_statements.sql-True-insert_statements.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[materialize-create_cluster_replica_statements.sql-True-create_cluster_replica_statements.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[materialize-create_index.sql-True-create_index.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[materialize-alter_statements.sql-True-alter_statements.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[materialize-show_statements.sql-True-show_statements.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[materialize-drop_statements.sql-True-drop_statements.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[materialize-subscribe_fetch_statements.sql-True-subscribe_fetch_statements.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[materialize-begin_close_statements.sql-True-begin_close_statements.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[materialize-create_sink_statements.sql-True-create_sink_statements.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[athena-show_create_view.sql-True-show_create_view.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[athena-create_external_table.sql-True-create_external_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[athena-insert_into.sql-True-insert_into.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[athena-select_cast_withtimezone.sql-True-select_cast_withtimezone.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[athena-select_base_operators.sql-True-select_base_operators.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[athena-create_table_as_select.sql-True-create_table_as_select.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[athena-show_tblproperties.sql-True-show_tblproperties.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[athena-select_b.sql-True-select_b.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[athena-select_group_by.sql-True-select_group_by.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[athena-create_external_table_struct.sql-True-create_external_table_struct.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[athena-select_row.sql-True-select_row.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[athena-create_view.sql-True-create_view.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[athena-prepared_statements.sql-True-prepared_statements.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[athena-create_array_table.sql-True-create_array_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[athena-select_reduce.sql-True-select_reduce.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[athena-show_tables.sql-True-show_tables.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[athena-element_at.sql-True-element_at.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[athena-select_filter.sql-True-select_filter.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[athena-select_map_function.sql-True-select_map_function.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[athena-create_map_table.sql-True-create_map_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[athena-show_create_table.sql-True-show_create_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[athena-create_database_if_not_exists.sql-True-create_database_if_not_exists.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[athena-select_widow_functions.sql-True-select_widow_functions.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[athena-show_columns.sql-True-show_columns.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[athena-select_datetime_functions.sql-True-select_datetime_functions.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[athena-create_external_table_input_format.sql-True-create_external_table_input_format.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[athena-select_unnest.sql-True-select_unnest.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[athena-create_database.sql-True-create_database.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[athena-select_map_type.sql-True-select_map_type.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[athena-select_underscore.sql-True-select_underscore.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[athena-unload_select.sql-True-unload_select.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[athena-select_a.sql-True-select_a.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[athena-show_databases.sql-True-show_databases.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[athena-show_partitions.sql-True-show_partitions.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[athena-select_array_of_rows.sql-True-select_array_of_rows.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[athena-create_struct_table.sql-True-create_struct_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[athena-show_views.sql-True-show_views.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[athena-msck_repair_table.sql-True-msck_repair_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[athena-create_partitioned_table.sql-True-create_partitioned_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[greenplum-create_table_as.sql-True-create_table_as.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[greenplum-create_table.sql-True-create_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[greenplum-declare.sql-True-declare.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[greenplum-fetch.sql-True-fetch.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[greenplum-analize.sql-True-analize.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[greenplum-close.sql-True-close.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[greenplum-copy.sql-True-copy.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-unpivot_clause.sql-True-unpivot_clause.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-join_types.sql-True-join_types.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-delta_create_table.sql-True-delta_create_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-select_like_clause.sql-True-select_like_clause.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-clear_cache.sql-True-clear_cache.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-drop_database.sql-True-drop_database.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-select_from_lateral_view.sql-True-select_from_lateral_view.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-create_table_like.sql-True-create_table_like.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-select_delimited_identifier.sql-True-select_delimited_identifier.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-select_having.sql-True-select_having.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-bytes_literal.sql-True-bytes_literal.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-parse_timestamp_ltz_ntz_type.sql-True-parse_timestamp_ltz_ntz_type.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-iceberg_alter_table.sql-True-iceberg_alter_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-delta_read_table.sql-True-delta_read_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-show_functions.sql-True-show_functions.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-common_table_expressions.sql-True-common_table_expressions.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-select_union.sql-True-select_union.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-show_tblproperties.sql-True-show_tblproperties.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-select_group_by.sql-True-select_group_by.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-describe_query.sql-True-describe_query.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-create_table_select.sql-True-create_table_select.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-select_aggregate.sql-True-select_aggregate.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-delta_constraints.sql-True-delta_constraints.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-load_data.sql-True-load_data.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-issue_3484.sql-True-issue_3484.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-refresh.sql-True-refresh.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-quoted_literal.sql-True-quoted_literal.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-refresh_table.sql-True-refresh_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-explain.sql-True-explain.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-delta_vacuum.sql-True-delta_vacuum.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-create_table_datasource.sql-True-create_table_datasource.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-databricks_dlt_apply_changes_into.sql-True-databricks_dlt_apply_changes_into.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-refresh_function.sql-True-refresh_function.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-insert_table.sql-True-insert_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-table_alias.sql-True-table_alias.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-databricks_dlt_create_view.sql-True-databricks_dlt_create_view.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-select_cluster_by.sql-True-select_cluster_by.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-analyze_table.sql-True-analyze_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-create_view.sql-True-create_view.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-select_distribute_by.sql-True-select_distribute_by.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-delta_update_table.sql-True-delta_update_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-select_from_where_clause.sql-True-select_from_where_clause.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-cache_table.sql-True-cache_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-select_reduce.sql-True-select_reduce.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-delta_update_table_schema.sql-True-delta_update_table_schema.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-values_with_alias.sql-True-values_with_alias.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-insert_overwrite_directory_hive.sql-True-insert_overwrite_directory_hive.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-databricks_dlt_create_table.sql-True-databricks_dlt_create_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-delta_describe_history.sql-True-delta_describe_history.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-select_from_values.sql-True-select_from_values.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-delta_change_data_feed.sql-True-delta_change_data_feed.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-select_lateral_view_supported_tvf.sql-True-select_lateral_view_supported_tvf.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-values.sql-True-values.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-uncache_table.sql-True-uncache_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-iceberg_replace_table.sql-True-iceberg_replace_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-insert_overwrite_directory.sql-True-insert_overwrite_directory.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-describe_table.sql-True-describe_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-describe_function.sql-True-describe_function.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-from_supported_tvf.sql-True-from_supported_tvf.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-show_tables.sql-True-show_tables.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-reset.sql-True-reset.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-select_star_except.sql-True-select_star_except.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-date_functions.sql-True-date_functions.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-delta_write_table.sql-True-delta_write_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-repair_table.sql-True-repair_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-show_create_table.sql-True-show_create_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-merge_into.sql-True-merge_into.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-show_columns.sql-True-show_columns.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-delta_delete_from.sql-True-delta_delete_from.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-create_table_complex_datatypes.sql-True-create_table_complex_datatypes.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-exclamation_mark.sql-True-exclamation_mark.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-add_jar.sql-True-add_jar.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-drop_function.sql-True-drop_function.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-create_table_primitive_datatypes.sql-True-create_table_primitive_datatypes.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-drop_schema.sql-True-drop_schema.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-create_widget.sql-True-create_widget.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-delta_restore.sql-True-delta_restore.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-select_delimited_identifier_with_escaped_backticks.sql-True-select_delimited_identifier_with_escaped_backticks.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-select_transform_clause.sql-True-select_transform_clause.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-set.sql-True-set.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-create_database.sql-True-create_database.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-pivot_clause.sql-True-pivot_clause.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-select_from_multiple_values_clauses.sql-True-select_from_multiple_values_clauses.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-alter_view.sql-True-alter_view.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-select_from_file.sql-True-select_from_file.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-list_file.sql-True-list_file.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-truncate_table.sql-True-truncate_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-drop_view.sql-True-drop_view.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-delta_drop_column_metadata_change.sql-True-delta_drop_column_metadata_change.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-databricks_operator_colon_sign.sql-True-databricks_operator_colon_sign.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-select_star_in_multiparameter_function.sql-True-select_star_in_multiparameter_function.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-show_table_extended.sql-True-show_table_extended.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-describe_database.sql-True-describe_database.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-show_databases.sql-True-show_databases.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-numeric_literal.sql-True-numeric_literal.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-create_table_hiveformat.sql-True-create_table_hiveformat.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-use_database.sql-True-use_database.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-show_partitions.sql-True-show_partitions.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-window_functions.sql-True-window_functions.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-delta_convert_to.sql-True-delta_convert_to.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-select_limit_clause.sql-True-select_limit_clause.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-delta_describe_detail.sql-True-delta_describe_detail.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-create_function.sql-True-create_function.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-alter_table.sql-True-alter_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-delta_merge.sql-True-delta_merge.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-select_tablesample.sql-True-select_tablesample.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-select_set_operators.sql-True-select_set_operators.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-drop_table.sql-True-drop_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-select_sort_by.sql-True-select_sort_by.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-list_jar.sql-True-list_jar.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-case_clause.sql-True-case_clause.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-databricks_dlt_constraint.sql-True-databricks_dlt_constraint.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-select_div.sql-True-select_div.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-alter_database.sql-True-alter_database.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-add_file.sql-True-add_file.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-select_order_by.sql-True-select_order_by.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-iceberg_create_table.sql-True-iceberg_create_table.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-show_views.sql-True-show_views.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-delta_generate_manifest.sql-True-delta_generate_manifest.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-select_qualify.sql-True-select_qualify.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-literals.sql-True-literals.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-remove_widget.sql-True-remove_widget.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-select_hints.sql-True-select_hints.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/dialects_test.py::test__dialect__base_parse_struct[sparksql-parse_integer_type.sql-True-parse_integer_type.yml]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/exasol_test.py::test_dialect_exasol_specific_segment_parses[RangeOperator-..]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/exasol_test.py::test_dialect_exasol_specific_segment_parses[WalrusOperatorSegment-:=]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/exasol_test.py::test_dialect_exasol_specific_segment_parses[VariableNameSegment-var1]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/postgres_test.py::test_dialect_postgres_specific_segment_parses[SelectClauseElementSegment-c_column AT TIME ZONE 'UTC']",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/postgres_test.py::test_dialect_postgres_specific_segment_parses[SelectClauseElementSegment-(c_column AT TIME ZONE 'UTC')::time]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/postgres_test.py::test_dialect_postgres_specific_segment_parses[SelectClauseElementSegment-timestamp with time zone '2021-10-01' AT TIME ZONE 'UTC']",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/postgres_test.py::test_dialect_postgres_specific_segment_parses[ExpressionSegment-c is null]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/postgres_test.py::test_dialect_postgres_specific_segment_parses[ExpressionSegment-c is not null]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/postgres_test.py::test_dialect_postgres_specific_segment_parses[ExpressionSegment-c isnull]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/postgres_test.py::test_dialect_postgres_specific_segment_parses[ExpressionSegment-c notnull]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/postgres_test.py::test_dialect_postgres_specific_segment_parses[SelectClauseElementSegment-c is null as c_isnull]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/postgres_test.py::test_dialect_postgres_specific_segment_parses[SelectClauseElementSegment-c is not null as c_notnull]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/postgres_test.py::test_dialect_postgres_specific_segment_parses[SelectClauseElementSegment-c isnull as c_isnull]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/postgres_test.py::test_dialect_postgres_specific_segment_parses[SelectClauseElementSegment-c notnull as c_notnull]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/postgres_test.py::test_dialect_postgres_specific_segment_parses[ArrayAccessorSegment-[2:10]]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/postgres_test.py::test_dialect_postgres_specific_segment_parses[ArrayAccessorSegment-[:10]]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/postgres_test.py::test_dialect_postgres_specific_segment_parses[ArrayAccessorSegment-[2:]]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/postgres_test.py::test_dialect_postgres_specific_segment_parses[ArrayAccessorSegment-[2]]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/postgres_test.py::test_epoch_datetime_unit[SELECT t1.field, EXTRACT(EPOCH FROM t1.sometime) AS myepoch FROM t1]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/postgres_test.py::test_epoch_datetime_unit[SELECT t1.field, EXTRACT(EPOCH FROM t1.sometime - t1.othertime) AS myepoch FROM t1]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/postgres_test.py::test_space_is_not_reserved[SELECT foo AS space FROM t1]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/postgres_test.py::test_space_is_not_reserved[SELECT space.something FROM t1 AS space]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/postgres_test.py::test_priority_keyword_merge",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/postgres_test.py::test_get_keywords",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/snowflake_test.py::test_snowflake_queries[CreateCloneStatementSegment-create table orders_clone_restore clone orders at (timestamp => to_timestamp_tz('04/05/2013 01:02:03', 'mm/dd/yyyy hh24:mi:ss'));]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/snowflake_test.py::test_snowflake_queries[ShowStatementSegment-SHOW GRANTS ON ACCOUNT;]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/snowflake_test.py::test_snowflake_queries[ShowStatementSegment-show tables history in tpch.public;]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/snowflake_test.py::test_snowflake_queries[ShowStatementSegment-show future grants in schema sales.public;]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/snowflake_test.py::test_snowflake_queries[ShowStatementSegment-show replication databases with primary aws_us_west_2.myaccount1.mydb1;]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/snowflake_test.py::test_snowflake_queries[ShowStatementSegment-SHOW TERSE SCHEMAS HISTORY LIKE '%META%' IN DATABASE MYDB STARTS WITH 'INT' LIMIT 10 FROM 'LAST_SCHEMA';]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/snowflake_test.py::test_snowflake_queries[ShowStatementSegment-SHOW GRANTS TO ROLE SECURITYADMIN;]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/snowflake_test.py::test_snowflake_queries[ShowStatementSegment-SHOW GRANTS OF SHARE MY_SHARE;]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/snowflake_test.py::test_snowflake_queries[SemiStructuredAccessorSegment-SELECT ID :: VARCHAR as id, OBJ : userId :: VARCHAR as user_id from x]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/snowflake_test.py::test_snowflake_queries[DropUserStatementSegment-DROP USER my_user;]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/snowflake_test.py::test_snowflake_queries[AlterSessionStatementSegment-ALTER SESSION SET TIMEZONE = 'UTC']",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/snowflake_test.py::test_snowflake_queries[AlterSessionStatementSegment-ALTER SESSION SET ABORT_DETACHED_QUERY = FALSE]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/snowflake_test.py::test_snowflake_queries[AlterSessionStatementSegment-ALTER SESSION SET JSON_INDENT = 5]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/snowflake_test.py::test_snowflake_queries[AlterSessionStatementSegment-ALTER SESSION UNSET",
        "status": "ERROR"
    },
    {
        "name": "test/dialects/snowflake_test.py::test_snowflake_queries[AlterSessionStatementSegment-ALTER SESSION UNSET TIME_OUTPUT_FORMAT, TWO_DIGIT_CENTURY_START;]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/soql_test.py::test_non_selects_unparseable[ALTER TABLE foo DROP COLUMN bar\\n]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/soql_test.py::test_non_selects_unparseable[CREATE USER my_user\\n]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/soql_test.py::test_non_selects_unparseable[TRUNCATE TABLE foo\\n]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/soql_test.py::test_non_selects_unparseable[EXPLAIN SELECT Id FROM Contact\\n]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/soql_test.py::test_non_selects_unparseable[DROP TABLE foo\\n]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/soql_test.py::test_non_selects_unparseable[DROP USER my_user\\n]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/unparsable_test.py::test_dialect_unparsable[None-ansi-SELECT 1 1-structure0]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/unparsable_test.py::test_dialect_unparsable[SelectClauseSegment-ansi-SELECT 1 1-structure1]",
        "status": "PASSED"
    },
    {
        "name": "test/dialects/unparsable_test.py::test_dialect_unparsable[SelectClauseSegment-ansi-SELECT 1 + (2 2 2)-structure2]",
        "status": "PASSED"
    },
    {
        "name": "test/diff_quality_plugin_test.py::test_diff_quality_plugin[sql_paths0-expected_violations_lines0]",
        "status": "PASSED"
    },
    {
        "name": "test/diff_quality_plugin_test.py::test_diff_quality_plugin[sql_paths1-expected_violations_lines1]",
        "status": "PASSED"
    },
    {
        "name": "test/diff_quality_plugin_test.py::test_diff_quality_plugin[sql_paths2-expected_violations_lines2]",
        "status": "PASSED"
    },
    {
        "name": "test/diff_quality_plugin_test.py::test_diff_quality_plugin[sql_paths3-expected_violations_lines3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_AL04_test.py::test__rules__std_AL04_one_aliases_one_duplicate",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_AL04_test.py::test__rules__std_AL04_one_aliases_two_duplicate",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_AL04_test.py::test__rules__std_AL04_complex",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_AM06_test.py::test__rules__std_AM06_raised",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_AM06_test.py::test__rules__std_AM06_unparsable",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_AM06_test.py::test__rules__std_AM06_noqa",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_CV02_test.py::test__rules__std_CV02_raised",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_CV09_test.py::test__rules__std_CV09_raised",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_LT01_LT02_LT09_combo_test.py::test__rules__std_LT02_LT09_LT01",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_LT01_LT04_test.py::test__rules__std_LT01_single_raise",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_LT02_LT11_combo_test.py::test__rules__std_LT02_LT11_union_all_in_subquery_lint",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_LT02_LT11_combo_test.py::test__rules__std_LT02_LT11_union_all_in_subquery_fix",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_LT03_test.py::test__rules__std_LT03_default",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_LT03_test.py::test__rules__std_LT03_leading",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_LT03_test.py::test__rules__std_LT03_trailing",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_LT04_test.py::test__rules__std_LT04_unparseable",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_LT05_LT09_combo_test.py::test__rules__std_LT05_LT09_long_line_lint",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_LT05_LT09_combo_test.py::test__rules__std_LT05_LT09_long_line_fix",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_LT05_LT09_combo_test.py::test__rules__std_LT05_LT09_long_line_fix2",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_LT12_CV06_test.py::test__rules__std_LT12_and_CV06_interaction",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_RF01_LT09_test.py::test__rules__std_RF01_LT09_copy",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_RF02_test.py::test__rules__std_RF02_wildcard_single_count",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_ST03_test.py::test__rules__std_ST03_multiple_unused_ctes",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-020_L008_trailing_comma]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-027_LT02_LT07_wrong_indent_with]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-010_CTEs_and_newlines]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-019_trailing_comma_to_leading]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-024_remove_templated_errors]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-016_index_error_with_jinja_if2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-009_keyword_capitalisation]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-003_long_line]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-002_indentation]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-022_LT04_corrupts_parse_tree_and_causes_ST06_to_corrupt_sql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-macro_file_jinja_include_undefined_variable]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-026_LT05_line_length_includes_earlier_fixes]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-027_LT02_LT07_templated_block_without_newline_cte]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-013_order_by_explicit]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-015_jinja_leading_whitespace]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-004_indentation]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-011_indentation]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-027_LT02_LT07_LT08_wrong_indent_cte]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-021_fix_respects_noqa]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-006_indentation]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-018_LT02_indent_templated_code]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-005_function_spacing]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-016_index_error_with_jinja_if]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-ST05_subqueries_in_joins]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-023_LT05_confuses_LT10]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-008_with_clause]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-008_looping_rules_LT02_LT04_LT05]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-007_with_clause]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-014_looping_interaction_between_l008_and_l030]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-001_long_line]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-012_templating]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-025_ST02_and_ST01_interaction]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[ansi-027_LT02_LT07_templated_block_wrong_indent_cte]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[bigquery-001_templating]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[bigquery-006_fix_ignore_templating]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[bigquery-005_unnest_spacing]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[bigquery-002_templating]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[bigquery-003_templating]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[bigquery-004_templating]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[snowflake-002_previously_parse_tree_damaging]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[snowflake-003_previously_parse_tree_damaging]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_fix_auto_test.py::test__std_fix_auto[snowflake-001_semi_structured]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_roundtrip_test.py::test__cli__command__fix[LT01-test/fixtures/linter/indentation_errors.sql0]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_roundtrip_test.py::test__cli__command__fix[LT01-test/fixtures/linter/whitespace_errors.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_roundtrip_test.py::test__cli__command__fix[LT01-test/fixtures/linter/indentation_errors.sql1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_roundtrip_test.py::test__cli__command__fix[CP01-test/fixtures/linter/whitespace_errors.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_roundtrip_test.py::test__cli__command__fix[AL01-test/fixtures/dialects/ansi/select_simple_i.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_roundtrip_test.py::test__cli__command__fix[AL02-test/fixtures/dialects/ansi/select_simple_i.sql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_roundtrip_test.py::test__cli__command__fix_templated[CP01]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_roundtrip_test.py::test__cli__command__fix_templated[LT01]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test__rules__std_file[LT01-indentation_errors.sql-violations0]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test__rules__std_file[LT02-indentation_errors.sql-violations1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test__rules__std_file[LT01-whitespace_errors.sql-violations2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test__rules__std_file[LT01-operator_errors.sql-violations3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test__rules__std_file[LT03-operator_errors.sql-violations4]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test__rules__std_file[LT01-operator_errors_negative.sql-violations5]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test__rules__std_file[LT02-indentation_error_hard.sql-violations6]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test__rules__std_file[LT02-indentation_error_contained.sql-violations7]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test__rules__std_file[LT05-block_comment_errors.sql-violations8]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test__rules__std_file[LT05-block_comment_errors_2.sql-violations9]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test__rules__std_file[RF02-column_references.sql-violations10]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test__rules__std_file[RF02-column_references_bare_function.sql-violations11]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test__rules__std_file[RF01-column_references.sql-violations12]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test__rules__std_file[AL05-column_references.sql-violations13]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test__rules__std_file[AM01-select_distinct_group_by.sql-violations14]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test__rules__std_file[LT01-operator_errors_ignore.sql-violations15]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test__rules__std_file[JJ01-heavy_templating.sql-violations16]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test_improper_configs_are_rejected[rule_config_dict0]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test_improper_configs_are_rejected[rule_config_dict1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test_improper_configs_are_rejected[rule_config_dict2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test_improper_configs_are_rejected[rule_config_dict3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test_improper_configs_are_rejected[rule_config_dict4]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test_improper_configs_are_rejected[rule_config_dict5]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test_improper_configs_are_rejected[rule_config_dict6]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/std_test.py::test_improper_configs_are_rejected[rule_config_dict7]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL01_test_fail_default_explicit]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL01_test_fail_explicit]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL01_test_fail_implicit]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL01_test_fail_implicit_alias]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL01_test_fail_implicit_alias_space]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL01_test_fail_implicit_alias_explicit]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL01_test_fail_implicit_alias_implicit]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL01_test_fail_implicit_alias_implicit_multiple]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL01_test_fail_implicit_alias_implicit_newline]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL01_test_fail_default_explicit_alias_merge]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL01_test_fail_explicit_alias_merge]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL01_test_pass_implicit_alias_merge]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL01_test_alias_expression_4492]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL01_test_alias_expression_4089]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL01_test_pass_alias_expression_oracle_tables]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL02_issue_561]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL02_test_fail_explicit_column_default]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL02_test_fail_explicit_column_explicit]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL02_test_fail_explicit_column_implicit]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL02_test_pass_tsql_alternative_alias]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL02_test_fail_alias_ending_equals]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL02_test_fail_alias_ending_raw_equals]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL02_test_alias_expression_align_4515_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL02_test_alias_expression_align_4515_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL02_test_alias_expression_align_4515_3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL02_test_fail_alias_expression_oracle_columns]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL03_test_pass_column_exp_without_alias_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL03_test_pass_column_exp_without_alias_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL03_test_pass_column_exp_without_alias_allow_scalar_true]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL03_test_fail_column_exp_without_alias]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL03_test_pass_column_exp_without_alias_if_only_cast]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL03_test_pass_column_exp_without_alias_if_only_cast_inc_double_cast]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL03_test_pass_column_exp_without_alias_if_bracketed]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL03_test_fail_column_exp_without_alias_and_cast_fn]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL03_test_fail_column_exp_without_alias_allow_scalar_false]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL03_test_pass_column_exp_with_alias]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL03_test_pass_function_emits]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL03_test_fail_cte_no_column_list]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL03_test_pass_cte_column_list]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL03_test_pass_duckdb_columns_expression]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL03_test_pass_duckdb_nested_columns_expression]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL03_test_pass_duckdb_exclude_expression]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL03_test_pass_duckdb_replace_expression]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL04_test_fail_exactly_once_duplicated_aliases]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL04_test_fail_two_duplicated_aliases]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL04_test_fail_subquery]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL04_test_pass_subquery]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL04_test_pass_bigquery_function]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL04_test_pass_tsql_table_variable]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_fail_table_alias_not_referenced_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_fail_table_alias_not_referenced_1_subquery]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_table_alias_referenced_subquery]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_table_alias_referenced]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_unaliased_table_referenced]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_ignore_bigquery_value_table_functions]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_ignore_postgres_value_table_functions]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_ignore_postgres_value_table_functions_generate_series]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_fail_table_alias_not_referenced_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_fail_table_alias_not_referenced_2_subquery]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_subquery_alias_not_referenced]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_bigquery_unaliased_table_with_hyphens]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_bigquery_aliased_table_with_ticks_referenced]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_tsql_object_reference_override]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_subselect_uses_alias_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_subselect_uses_alias_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_subselect_uses_alias_3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_ansi_function_not_table_parameter]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_bigquery_function_takes_tablealias_parameter]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_bigquery_function_takes_tablealias_column_parameter]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_bigquery_function_takes_tablealias_column_struct_parameter]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_snowflake_delete_cte]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_exasol_values_clause]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_fail_exasol_values_clause]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_sparksql_values_clause]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_fail_sparksql_values_clause]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_snowflake_values]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_tsql_values_clause_in_parentheses]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_join_on_expression_in_parentheses]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_bigquery_qualify_clause]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_bigquery_nested_inner_join]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_fail_snowflake_flatten_function]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_derived_query_requires_alias_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_derived_query_requires_alias_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_derived_query_requires_alias_3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_redshift_semi_structured_op]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_postgres_values_clause]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_naked_select_single_quoted_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_fail_naked_select_single_quoted_table_wrong_case]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_naked_select_single_quoted_table_ci]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_naked_select_single_quoted_table_qcs_nup]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_fail_naked_select_single_quoted_table_wrong_case_qcs_nup]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_naked_select_single_quoted_table_qcs_nlow]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_fail_naked_select_single_quoted_table_wrong_case_qcs_nlow]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_naked_select_single_quoted_table_lower_cs]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_naked_select_single_quoted_table_upper_cs]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_fail_naked_select_single_quoted_table_wrong_case_cs]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_naked_select_quoted_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_quoted_select_naked_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_naked_select_quoted_table_subquery]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_quoted_select_naked_table_subquery]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_naked_select_double_quoted_table_ci]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_naked_select_double_quoted_table_qcs_nup]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_fail_naked_select_double_quoted_table_wrong_case_qcs_nup]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_naked_select_double_quoted_table_qcs_nlow]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_fail_naked_select_double_quoted_table_wrong_case_qcs_nlow]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_naked_select_double_quoted_table_lower_cs]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_naked_select_double_quoted_table_upper_cs]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_fail_naked_select_double_quoted_table_wrong_case_cs]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_athena_naked_select_quoted_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_athena_quoted_select_naked_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_athena_naked_select_back_quoted_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_athena_back_quoted_select_naked_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_bigquery_naked_select_quoted_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_bigquery_quoted_select_naked_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_bigquery_quoted_escapes]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_clickhouse_naked_select_quoted_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_clickhouse_quoted_select_naked_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_clickhouse_quoted_escapes]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_fail_clickhouse_naked_select_quoted_table_cs]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_clickhouse_quoted_select_naked_table_cs]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_db2_naked_select_double_quoted_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_fail_db2_naked_select_double_quoted_table_wrong_case]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_duckdb_naked_select_double_quoted_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_duckdb_quoted_select_naked_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_duckdb_quoted_select_single_quote_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_fail_duckdb_single_quote_select_naked_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_exasol_naked_select_double_quoted_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_exasol_quoted_select_naked_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_fail_exasol_quoted_select_naked_table_wrong_case]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_exasol_quoted_select_single_quote_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_hive_naked_select_quoted_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_hive_quoted_select_naked_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_mysql_quoted_select_quoted_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_mysql_naked_select_quoted_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_mysql_quoted_select_naked_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_oracle_naked_select_double_quoted_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_fail_oracle_naked_select_double_quoted_table_wrong_case]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_postgres_naked_select_double_quoted_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_fail_postgres_naked_select_double_quoted_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_postgres_quoted_select_naked_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_postgres_quoted_select_single_quote_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_redshift_naked_select_double_quoted_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_fail_redshift_naked_select_double_quoted_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_redshift_quoted_select_naked_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_redshift_quoted_select_single_quote_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_snowflake_naked_select_double_quoted_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_fail_snowflake_naked_select_double_quoted_table_wrong_case]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_sparksql_naked_select_double_quoted_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_sparksql_quoted_select_naked_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_sqlite_naked_select_quoted_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_sqlite_quoted_select_naked_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_sqlite_naked_select_quoted_table_subquery]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_sqlite_quoted_select_naked_table_subquery]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_sqlite_different_escaped_quotes]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_teradata_naked_select_double_quoted_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_teradata_quoted_select_naked_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_trino_naked_select_double_quoted_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_trino_quoted_select_naked_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_tsql_naked_select_quoted_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_tsql_quoted_select_naked_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_vertica_naked_select_double_quoted_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_vertica_quoted_select_naked_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_repeat_referenced_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_case_insensitive]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_quoted_case_insensitive]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_postgres_different_quoted_case_insensitive]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_snowflake_flatten_lateral]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_fail_snowflake_flatten_lateral]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_bigquery_cross_join_unnest]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_bigquery_cross_join_array]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_pass_redshift_qualify_follows_from]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_fail_redshift_qualify_follows_from]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL05_test_fail_redshift_qualify_does_not_follows_from]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL06_test_pass_no_config]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL06_test_fail_alias_too_short]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL06_test_fail_alias_too_long]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL06_test_fail_alias_min_and_max]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL06_test_pass_with_config]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL07_test_pass_allow_self_join_alias]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL07_test_fail_avoid_aliases_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL07_test_fail_avoid_aliases_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL07_test_fail_avoid_aliases_3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL07_alias_single_char_identifiers]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL07_alias_with_wildcard_identifier]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL07_select_from_values]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL07_select_from_table_generator]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL07_issue_635]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL07_issue_239]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL07_issue_610]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL07_issue_1589]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL07_issue_1639]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL07_test_fail_no_copy_code_out_of_template]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL07_test_bigquery_skip_multipart_names]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL07_test_bigquery_force_enable]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL07_test_violation_locations]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL07_test_fail_fix_command]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL08_test_fail_references]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL08_test_fail_aliases]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL08_test_fail_alias_refs]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL08_test_fail_locs]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL08_test_fail_alias_quoted]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL08_test_fail_alias_case]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL08_test_fail_qualified]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL08_test_pass_table_names]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL09_test_pass_no_alias]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL09_test_pass_no_self_alias]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL09_test_pass_no_self_alias_function]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL09_test_fail_self_alias]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL09_test_fail_self_alias_upper]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL09_test_fail_self_alias_implicit]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL09_test_fail_self_alias_and_table_aliased]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL09_test_fail_self_alias_quoted]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL09_test_pass_self_alias_case_insensitive]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AL09_test_pass_self_alias_case_sensitive]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM01_test_pass_only_group_by]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM01_test_fail_distinct_and_group_by]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM02_test_pass_union_all]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM02_test_fail_bare_union]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM02_test_pass_union_distinct]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM02_test_pass_union_distinct_with_comment]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM02_test_fail_triple_join_with_one_bad]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM02_test_fail_triple_join_with_one_bad_lowercase]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM02_test_exasol]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM02_test_exasol_union_all]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM02_test_postgres]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM02_test_redshift]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM03_test_unspecified]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM03_test_unspecified_unspecified]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM03_test_unspecified_desc]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM03_test_asc_desc]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM03_test_desc_unspecified]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM03_test_desc_asc]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM03_test_nulls_last]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM03_test_comment]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_pass_known_number_of_result_columns_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_fail_unknown_number_of_result_columns_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_pass_known_number_of_result_columns_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_fail_unknown_number_of_result_columns_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_pass_known_number_of_result_columns_3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_pass_known_number_of_result_columns_4]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_fail_unknown_number_of_result_columns_3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_pass_known_number_of_result_columns_5]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_fail_unknown_number_of_result_columns_4]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_fail_unknown_number_of_result_columns_5]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_pass_known_number_of_result_columns_6]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_fail_unknown_number_of_result_columns_6]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_pass_known_number_of_result_columns_7]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_fail_unknown_number_of_result_columns_7]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_pass_known_number_of_result_columns_8]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_fail_unknown_number_of_result_columns_8]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_fail_unknown_number_of_result_columns_9]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_fail_unknown_number_of_result_columns_10]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_pass_known_number_of_result_columns_9]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_pass_known_number_of_result_columns_10]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_pass_known_number_of_result_columns_11]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_fail_unknown_number_of_result_columns_11]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_fail_unknown_number_of_result_columns_12]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_fail_unknown_number_of_result_columns_13]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_pass_known_number_of_result_columns_12]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_fail_unknown_number_of_result_columns_14]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_fail_unknown_number_of_result_columns_15]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_pass_known_number_of_result_columns_13]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_pass_known_number_of_result_columns_14]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_fail_unknown_number_of_result_columns_16]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_pass_known_number_of_result_columns_15]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_fail_unknown_number_of_result_columns_17]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_fail_unknown_number_of_result_columns_18]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_pass_nested_ctes_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_fail_nested_ctes_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_fail_nested_ctes_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_pass_nested_ctes_3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_pass_nested_ctes_4]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_cte_reference_outer_5]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_cte_tricky_nesting_6]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_nested_and_same_level_ctes_7]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_nested_cte_references_outer_8]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_pass_join_inside_cte_with_unqualified]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_pass_known_number_of_columns_in_two_join_subqueries]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_fail_two_join_subqueries_one_with_unknown_number_of_columns]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_fail_no_source_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_query_on_snowflake_stage]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_snowflake_delete_cte]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_pass_exasol_values_clause_cte_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_pass_exasol_values_clause_cte_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_pass_exasol_values_clause]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_fail_exasol_invalid_foreign_key_from]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_pass_exasol_invalid_foreign_key_from]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_pass_cte_no_select_final_statement]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_tsql_select_system_as_identifier]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_pass_sparksql_values_clause_cte_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_pass_sparksql_values_clause_cte_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM04_test_pass_sparksql_values_clause]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM05_test_fail_lone_join_default]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM05_test_fail_lone_join_lowercase_default]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM05_test_pass_inner_join_default]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM05_test_pass_left_join_default]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM05_test_pass_right_join_default]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM05_test_pass_full_join_default]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM05_test_pass_left_outer_join_default]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM05_test_pass_right_outer_join_default]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM05_test_pass_full_outer_join_default]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM05_test_pass_cross_join_default]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM05_test_fail_lone_join_inner]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM05_test_fail_lone_join_lowercase_inner]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM05_test_pass_inner_join_inner]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM05_test_pass_left_join_inner]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM05_test_pass_right_join_inner]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM05_test_pass_full_join_inner]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM05_test_pass_left_outer_join_inner]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM05_test_pass_right_outer_join_inner]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM05_test_pass_full_outer_join_inner]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM05_test_pass_lone_join_outer]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM05_test_pass_inner_join_outer]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM05_test_fail_left_join_outer]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM05_test_fail_right_join_outer]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM05_test_fail_full_join_outer]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM05_test_fail_full_join_lowercase_outer]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM05_test_pass_left_outer_join_outer]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM05_test_pass_right_outer_join_outer]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM05_test_pass_full_outer_join_outer]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM05_test_fail_lone_join_both]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM05_test_fail_lone_join_lowercase_both]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM05_test_pass_inner_join_both]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM05_test_fail_left_join_both]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM05_test_fail_right_join_both]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM05_test_fail_full_join_both]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM05_test_fail_full_join_lowercase_both]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM05_test_pass_left_outer_join_both]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM05_test_pass_right_outer_join_both]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM05_test_pass_full_outer_join_both]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_pass_explicit_group_by_default]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_pass_implicit_group_by_default]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_pass_explicit_order_by_default]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_fail_implicit_order_by_default]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_fail_mix_group_by_default]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_pass_implicit_group_by_and_order_by_default]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_pass_explicit_group_by_and_order_by_default]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_fail_within_line_mix_group_by_and_order_by_default]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_fail_across_line_mix_group_by_and_order_by_default]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_pass_explicit_expression_order_by_default]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_fail_implicit_expression_order_by_default]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_pass_explicit_group_by_custom_explicit]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_fail_implicit_group_by_custom_explicit]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_fail_mix_group_by_custom_explicit]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_pass_explicit_order_by_custom_explicit]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_fail_implicit_order_by_custom_explicit]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_pass_explicit_group_by_and_order_by_custom_explicit]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_fail_implicit_group_by_and_order_by_custom_explicit]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_fail_within_line_mix_group_by_and_order_by_custom_explicit]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_fail_across_line_mix_group_by_and_order_by_custom_explicit]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_pass_explicit_expression_order_by_custom_explicit]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_fail_implicit_expression_order_by_custom_explicit]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_pass_explicit_group_by_custom_implicit]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_fail_implicit_group_by_custom_implicit]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_pass_explicit_order_by_custom_implicit]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_fail_implicit_order_by_custom_implicit]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_fail_mix_group_by_custom_implicit]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_pass_implicit_group_by_and_order_by_custom_implicit]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_fail_explicit_group_by_and_order_by_custom_implicit]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_fail_within_line_mix_group_by_and_order_by_custom_implicit]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_fail_across_line_mix_group_by_and_order_by_custom_implicit]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_fail_explicit_expression_order_by_custom_implicit]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_fail_implicit_expression_order_by_custom_implicit]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_fail_consistent_snowflake]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_fail_consistent_exasol]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_pass_window]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_pass_window_snowflake]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_pass_withingroup_snowflake]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_pass_groupby_rollup_bigquery]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_fail_groupby_rollup_bigquery]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_pass_groupby_rollup_postgres]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_fail_groupby_rollup_postgres]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_pass_groupby_rollup_exasol]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_fail_groupby_rollup_exasol]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_pass_groupby_rollup_athena]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_fail_groupby_rollup_athena]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_pass_groupby_rollup_sparksql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_fail_groupby_rollup_sparksql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM06_test_pass_array_agg_bigquery]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM07_test_pass_known_number_of_result_columns_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM07_test_fail_known_number_of_result_columns_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM07_test_pass_known_number_of_result_columns_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM07_test_fail_known_number_of_result_columns_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM07_test_pass_known_number_of_result_columns_3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM07_test_pass_known_number_of_result_columns_4]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM07_test_fail_known_number_of_result_columns_3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM07_test_pass_known_number_of_result_columns_5]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM07_test_pass_known_number_of_result_columns_6]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM07_test_fail_unknown_number_of_result_columns_4]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM07_test_pass_known_number_of_result_columns_7]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM07_test_pass_unknown_wildcard_number_of_result_columns_8]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM07_test_pass_known_number_of_result_columns_9]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM07_test_pass_known_number_of_result_columns_10]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM07_test_pass_known_number_of_result_columns_11]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM07_test_fail_unknown_number_of_result_columns_5]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM07_test_pass_known_number_of_result_columns_13]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM07_test_pass_known_number_of_result_columns_14]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM07_test_pass_known_number_of_result_columns_15]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM07_test_fail_unknown_number_of_result_columns_6]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM07_test_pass_known_number_of_result_columns_16]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM07_test_pass_known_number_of_result_columns_17]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM07_test_fail_known_number_of_result_columns_7]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM07_test_pass_nested_ctes_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM07_test_fail_nested_ctes_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM07_test_cte_reference_outer_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM07_test_cte_tricky_nesting_3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM07_test_nested_and_same_level_ctes_4]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM07_test_nested_cte_references_outer_5]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM07_test_pass_join_inside_cte_with_unqualified]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM07_test_pass_known_number_of_columns_in_two_join_subqueries]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM07_test_fail_two_join_subqueries_one_with_unknown_number_of_columns]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM07_test_query_on_snowflake_stage]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM07_test_pass_cte_no_select_final_statement]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM07_test_fail_cte_no_select_final_statement]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[AM07_test_tsql_select_system_as_identifier]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP01_test_fail_inconsistent_capitalisation_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP01_test_fail_inconsistent_capitalisation_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP01_test_fail_capitalisation_policy_lower]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP01_test_fail_capitalisation_policy_upper]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP01_test_fail_capitalisation_policy_capitalise]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP01_test_fail_date_part_inconsistent_capitalisation]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP01_test_fail_date_part_capitalisation_policy_lower]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP01_test_fail_date_part_capitalisation_policy_upper]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP01_test_pass_date_part_consistent_capitalisation]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP01_test_pass_data_type_inconsistent_capitalisation]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP01_test_pass_bigquery_date]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP01_test_pass_ignore_word]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP01_test_pass_ignore_words]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP01_test_pass_ignore_words_regex_simple]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP01_test_fail_ignore_words_regex_simple]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP01_test_pass_ignore_words_complex]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP01_test_pass_ignore_templated_code_true]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP01_test_fail_ignore_templated_code_false]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP01_test_fail_snowflake_group_by_cube]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP01_test_pass_ignore_null]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP01_test_pass_ignore_true]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP01_test_pass_ignore_false]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP01_test_fail_bigquery_week]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP01_test_fail_select_lower]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP01_test_fail_select_lower_keyword_functions]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP02_test_pass_consistent_capitalisation_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP02_test_pass_consistent_capitalisation_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP02_test_pass_consistent_capitalisation_with_null]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP02_test_pass_consistent_capitalisation_with_single_letter_upper]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP02_test_pass_consistent_capitalisation_with_single_word_snake]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP02_test_pass_consistent_capitalisation_with_single_word_pascal]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP02_test_pass_consistent_capitalisation_with_multiple_words_with_numbers]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP02_test_pass_consistent_capitalisation_with_leading_underscore]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP02_test_fail_inconsistent_capitalisation_lower_case]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP02_test_fail_inconsistent_capitalisation_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP02_test_pass_consistent_capitalisation_policy_pascal_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP02_test_pass_consistent_capitalisation_policy_pascal_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP02_test_pass_consistent_capitalisation_policy_pascal_3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP02_test_pass_consistent_capitalisation_policy_pascal_4]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP02_test_pass_consistent_capitalisation_policy_pascal_5]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP02_test_pass_consistent_capitalisation_policy_pascal_6]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP02_test_fail_inconsistent_capitalisation_policy_pascal_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP02_test_fail_inconsistent_capitalisation_policy_pascal_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP02_test_fail_inconsistent_capitalisation_policy_pascal_3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP02_test_fail_inconsistent_capitalisation_policy_pascal_4]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP02_test_fail_consistent_capitalisation_policy_pascal_5]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP02_test_fail_inconsistent_capitalisation_pascal_v_capitalise]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP02_test_pass_policy_unquoted_identifiers_aliases_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP02_test_pass_policy_unquoted_identifiers_aliases_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP02_test_pass_policy_unquoted_identifiers_aliases_3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP02_test_pass_policy_unquoted_identifiers_aliases_4]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP02_test_policy_unquoted_identifiers_aliases_5]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP02_test_policy_unquoted_identifiers_aliases_6]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP02_test_policy_unquoted_identifiers_aliases_7]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP02_test_policy_unquoted_identifiers_aliases_8]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP02_test_policy_unquoted_identifiers_column_aliases_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP02_test_policy_unquoted_identifiers_aliases_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP02_test_pass_ignore_word]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP02_test_pass_consistent_capitalisation_properties_naked_identifier]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP02_test_fail_inconsistent_capitalisation_properties_naked_identifier]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP02_test_fail_inconsistent_capitalisation_properties_naked_identifier_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP02_test_pass_bigquery_safe_does_not_trigger]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP02_test_pass_databricks_case_sensitive_property]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP02_test_fail_snake_aliases]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP03_test_fail_inconsistent_function_capitalisation_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP03_test_fail_inconsistent_function_capitalisation_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP03_test_bare_functions]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP03_test_bare_functions_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP03_test_bare_functions_3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP03_test_fail_capitalization_after_comma]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP03_test_pass_fully_qualified_function_mixed_functions]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP03_test_pass_fully_qualified_function_pascal_case]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP03_test_pass_ignore_word]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP03_test_pass_ignore_templated_code_true]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP03_test_fail_ignore_templated_code_false]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP03_test_pass_func_name_templated_literal_mix]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP03_test_pass_ignore_words_regex_simple]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP03_test_pass_ignore_words_regex_complex]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP03_test_pass_ignore_words_regex_bigquery_simple]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP03_test_pass_ignore_words_regex_bigquery_complex]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP03_test_bare_functions_4]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP04_test_fail_inconsistent_boolean_capitalisation]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP04_test_pass_ignore_word]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP05_test_pass_default_consistent_lower]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP05_test_pass_default_consistent_upper]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP05_test_pass_default_consistent_capitalised]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP05_test_pass_default_consistent_pascal]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP05_test_fail_data_type_inconsistent_capitalisation_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP05_test_fail_data_type_inconsistent_capitalisation_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP05_test_fail_data_type_inconsistent_capitalisation_3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP05_test_fail_data_type_capitalisation_policy_lower]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP05_test_fail_data_type_capitalisation_policy_lower_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP05_test_fail_data_type_capitalisation_policy_upper]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP05_test_fail_data_type_capitalisation_policy_upper_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP05_test_fail_data_type_capitalisation_policy_capitalise]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP05_test_fail_data_type_capitalisation_policy_keywords_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP05_test_fail_data_type_capitalisation_policy_keywords_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP05_test_pass_sparksql_complex_data_types]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP05_test_pass_bigquery_struct_params]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CP05_test_pass_typless_structs_dont_trigger_rule]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV01_test_pass_consistent_c_style_not_equal_to]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV01_test_fail_consistent_ansi_not_equal_to]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV01_test_pass_consistent_less_than]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV01_test_pass_consistent_non_comparison]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV01_test_fail_consistent_c_style_not_equal_to_multi]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV01_test_fail_consistent_ansi_not_equal_to_multi]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV01_test_pass_consistent_c_style_not_equal_to_tsql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV01_test_pass_consistent_ansi_not_equal_to_tsql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV01_test_pass_c_style_not_equal_to]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV01_test_fail_c_style_not_equal_to]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV01_test_pass_c_style_less_than]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV01_test_pass_c_style_non_comparison]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV01_test_fail_c_style_not_equal_to_multi]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV01_test_pass_c_style_not_equal_to_tsql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV01_test_fail_c_style_not_equal_to_tsql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV01_test_pass_ansi_not_equal_to]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV01_test_fail_ansi_not_equal_to]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV01_test_pass_ansi_less_than]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV01_test_pass_ansi_non_comparison]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV01_test_fail_ansi_not_equal_to_multi]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV01_test_pass_ansi_not_equal_to_tsql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV01_test_fail_ansi_not_equal_to_tsql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV02_test_pass_coalesce]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV02_test_fail_ifnull]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV02_test_fail_nvl]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV03_test_require_pass]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV03_test_require_fail]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV03_test_forbid_pass]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV03_test_forbid_fail]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV03_test_fail_templated]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV04_passes_on_count_star]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV04_passes_on_count_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV04_changes_count_0_to_count_star]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV04_passes_on_count_0]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV04_passes_on_count_1_if_both_present]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV04_changes_to_count_1_if_both_present]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV04_changes_count_1_to_count_star]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV04_handles_whitespaces]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV04_changes_count_star_to_count_0]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV04_changes_count_star_to_count_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV04_changes_count_1_to_count_0]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV04_changes_count_0_to_count_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV04_changes_count_star_to_count_1_handle_new_line]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV04_no_false_positive_on_count_col]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV04_no_false_positive_on_expression]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV05_test_is_null]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV05_test_is_not_null]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV05_test_not_equals_null_upper]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV05_test_not_equals_null_multi_nulls]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV05_test_not_equals_null_lower]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV05_test_equals_null_spaces]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV05_test_equals_null_no_spaces]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV05_test_complex_case_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV05_test_set_clause]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV05_test_bigquery_set_options]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV05_test_tsql_exec_clause]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV05_test_tsql_alternate_alias_syntax]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV05_test_exclude_constraint]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV06_test_pass_semi_colon_same_line_default]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV06_test_pass_semi_colon_custom_newline]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV06_test_fail_semi_colon_same_line_custom_newline]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV06_test_pass_no_semi_colon_default]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV06_test_pass_no_semi_colon_custom_newline]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV06_test_fail_no_semi_colon_custom_require]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV06_test_fail_no_semi_colon_custom_require_oneline]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV06_test_fail_no_semi_colon_custom_require_multiline]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV06_test_pass_multi_statement_semi_colon_default]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV06_test_pass_multi_statement_semi_colon_custom_oneline]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV06_test_fail_multi_statement_semi_colon_custom_multiline]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV06_test_pass_multi_statement_no_trailing_semi_colon_default]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV06_test_pass_multi_statement_no_trailing_semi_colon_custom_require]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV06_test_fail_multi_statement_no_trailing_semi_colon_custom_require_oneline]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV06_test_fail_multi_statement_no_trailing_semi_colon_custom_require_multiline]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV06_test_fail_space_semi_colon_default]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV06_test_fail_newline_semi_colon_default]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV06_test_pass_newline_semi_colon_custom_newline]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV06_test_fail_multi_statement_semi_colon_default]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV06_test_fail_multi_statement_semi_colon_custom_require_multiline]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV06_test_fail_multiple_newlines_semi_colon_custom_require_newline]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV06_test_fail_final_semi_colon_same_line_inline_comment]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV06_test_fail_final_semi_colon_same_line_inline_comment_custom_oneline]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV06_test_fail_final_semi_colon_newline_inline_comment_custom_multiline]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV06_test_fail_same_line_inline_comment]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV06_test_fail_same_line_multiple_inline_comment]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV06_test_pass_newline_inline_comment]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV06_test_fail_newline_inline_comment]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV06_test_fail_newline_multiple_inline_comments_custom_oneline]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV06_test_fail_newline_multiple_inline_comments_custom_multiline]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV06_test_fail_newline_trailing_inline_comment]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV06_test_fail_newline_preceding_block_comment_custom_oneline]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV06_test_fail_newline_preceding_block_comment_custom_multiline]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV06_test_fail_newline_trailing_block_comment]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV06_test_fail_newline_block_comment_semi_colon_before]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV06_test_fail_newline_block_comment_semi_colon_after]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV06_test_fail_newline_create_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV06_test_fail_newline_create_table_inline_comment]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV06_test_fail_whitespace_after_simple_select]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV06_test_fail_whitespace_after_snowflake_set]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV06_test_fail_templated_fix_crosses_block_boundary]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV06_test_pass_empty_file]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV06_test_pass_empty_file_with_require_final_semicolon]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV06_test_pass_file_with_only_comments]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV06_test_pass_file_with_only_comments_with_require_final_semicolon]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV07_test_pass_no_outer_brackets]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV07_test_fail_outer_brackets]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV07_test_fail_outer_brackets_inner_subquery]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV07_test_pass_set_statement_brackets]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV07_test_pass_no_outer_brackets_tsql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV07_test_fail_outer_brackets_tsql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV07_test_fail_outer_brackets_inner_subquery_tsql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV07_test_pass_begin_end_statement_brackets_tsql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV07_test_fail_leading_trailing_whitespace]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV07_test_fail_leading_whitespace_and_comment]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV08_test_fail_right_join]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV08_test_pass_left_join]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV08_test_pass_inner_join]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV08_test_fail_right_and_right_join]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV08_test_fail_right_and_left_join]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV08_test_fail_right_and_inner_join]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV08_test_pass_left_inner_join]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV08_test_fail_subquery_right_join]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV08_test_pass_subquery_left_join]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV08_test_pass_subquery_inner_join]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV08_test_fail_with_right_join]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV08_test_pass_with_left_join]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV08_test_pass_with_inner_join]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV09_test_pass_default_none]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV09_test_fail_deny_word]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV09_test_fail_deny_word_case_difference1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV09_test_fail_deny_word_case_difference2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV09_test_fail_multiple_deny_words1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV09_test_fail_multiple_deny_words2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV09_test_pass_not_complete_match]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV09_test_pass_is_comment]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV09_test_pass_in_comment]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV09_test_fail_bool]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV09_test_pass_bool]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV09_test_pass_bigquery]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV09_test_fail_bigquery]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV09_test_fail_bigquery2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV09_test_fail_bigquery3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV09_test_pass_comment_word1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV09_test_pass_comment_word2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV09_test_pass_comment_word3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV09_test_pass_comment_regex1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV09_test_pass_comment_regex2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV09_test_pass_comment_regex3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV09_test_pass_match_source1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV09_test_pass_match_source2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV09_test_fail_match_source1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV10_test_fail_result_of_fix_is_valid_bigquery]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV10_test_fail_result_of_fix_is_valid_hive]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV10_test_fail_result_of_fix_is_valid_mysql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV10_test_fail_result_of_fix_is_valid_sparksql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV10_test_pass_preferred_tripple_quotes]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV10_test_fail_alternate_tripple_quotes]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV10_test_fail_unnecessary_escaping]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV10_test_fail_bigquery_string_prefixes]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV10_test_fail_bigquery_string_prefixes_when_style_is_consistent]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV10_test_fail_tripple_quoted_strings_with_quotes_in_them]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV10_test_fail_tripple_quoted_strings_dont_remove_escapes_single_quotes]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV10_test_fail_tripple_quoted_strings_dont_remove_escapes_double_quotes]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV10_test_fail_edge_case_tripple_quoted_string_ending_with_double_quote]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV10_test_pass_lots_of_quotes]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV10_test_fail_lots_of_quotes]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV10_test_fail_quote_replace_in_raw_strings]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV10_test_pass_dollar_quoted_strings_are_ignored]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV10_test_pass_date_constructor_strings_are_ignored_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV10_test_pass_date_constructor_strings_are_ignored_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV10_test_pass_empty_string]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV10_test_fail_empty_string]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV10_test_pass_partially_templated_quoted_literals_simple]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV10_test_fail_partially_templated_quoted_literals_simple]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV10_test_pass_partially_templated_quoted_literals_complex]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV10_test_fail_partially_templated_quoted_literals_complex]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV10_test_pass_partially_templated_quoted_literals_with_multiple_templates]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV10_test_fail_partially_templated_quoted_literals_with_multiple_templates]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV10_test_fail_partially_templated_quoted_literals_inside_blocks]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV10_test_pass_fully_templated_quoted_literals_are_ignored]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV10_test_pass_partially_templated_literals_are_ignored_when_some_quotes_are_inside_the_template_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV10_test_pass_partially_templated_literals_are_ignored_when_some_quotes_are_inside_the_template_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV10_test_pass_prefix_chars_are_correctly_detected_as_unlintable]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV11_test_pass_cast]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV11_test_pass_casting_operator]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV11_test_pass_multi_casting_operator]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV11_test_pass_convert]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV11_test_pass_3_argument_convert]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV11_test_pass_convert_with_comment]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV11_test_pass_cast_with_comment]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV11_test_fail_cast_with_comment_when_config_is_set_to_convert]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV11_test_fail_cast_with_comment_when_config_is_set_to_shorthand]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV11_test_fail_3_argument_convert_when_config_is_set_to_cast]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV11_test_fail_3_argument_convert_when_config_is_set_to_shorthand]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV11_test_fail_inconsistent_type_casting_prior_convert]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV11_test_fail_inconsistent_type_casting_with_comment]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV11_test_fail_inconsistent_type_casting_prior_cast]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV11_test_fail_inconsistent_type_casting_prior_cast_3_arguments_convert]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV11_test_fail_inconsistent_type_casting_prior_convert_cast_with_comment]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV11_test_fail_inconsistent_type_casting_prior_shorthand]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV11_test_fail_inconsistent_type_casting_prior_shorthand_3_arguments_convert]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV11_test_fail_inconsistent_type_casting_prior_shorthand_cast_with_comment]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV11_test_fail_inconsistent_type_casting_when_config_cast]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV11_test_fail_inconsistent_type_casting_3_arguments_convert_when_config_cast]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV11_test_fail_inconsistent_type_casting_when_config_convert]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV11_test_fail_inconsistent_type_casting_when_config_shorthand]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV11_test_fail_inconsistent_type_casting_3_arguments_convert_when_config_shorthand]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV11_test_pass_when_dialect_is_teradata]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV11_test_fail_parenthesize_expression_when_config_shorthand_from_cast]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV11_test_fail_parenthesize_expression_when_config_shorthand_from_convert]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[CV11_test_fail_snowflake_semi_structured_cast_4453]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[JJ01_test_simple]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[JJ01_test_simple_modified]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[JJ01_test_simple_modified_fail]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[JJ01_test_fail_jinja_tags_no_space]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[JJ01_test_fail_jinja_tags_multiple_spaces]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[JJ01_test_fail_jinja_tags_no_space_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[JJ01_test_pass_newlines]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[JJ01_test_fail_templated_segment_contains_leading_literal]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[JJ01_test_fail_segment_contains_multiple_templated_slices_last_one_bad]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[JJ01_test_fail_jinja_tags_no_space_no_content]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[JJ01_test_fail_jinja_tags_across_segment_boundaries]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[JJ01_test_pass_python_templater]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_excess_space_without_align_alias]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_excess_space_with_align_alias]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_missing_keyword_with_align_alias]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_skip_alias_with_align_alias]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_excess_space_with_align_alias_wider]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_align_alias_boundary]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_align_alias_inline_pass]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_align_alias_inline_fail]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_align_multiple_a]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_align_multiple_b]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_align_multiple_multiple_lines_a]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_align_multiple_multiple_lines_b]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_align_multiple_all]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_align_multiple_operators]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_pass_parenthesis_block_isolated]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_pass_parenthesis_block_isolated_template]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_fail_parenthesis_block_not_isolated]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_fail_parenthesis_block_not_isolated_templated]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_pass_parenthesis_function]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_fail_whitespace_before_comma]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_fail_whitespace_before_comma_template]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_pass_errors_only_in_templated_and_ignore]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_fail_errors_only_in_non_templated_and_ignore]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_pass_single_whitespace_after_comma]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_pass_single_whitespace_after_comma_template]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_fail_multiple_whitespace_after_comma]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_fail_no_whitespace_after_comma]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_fail_no_whitespace_after_comma_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_pass_bigquery_trailing_comma]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_basic]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_basic_template]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_basic_fix]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_basic_fail_template]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_simple_fix]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_identifier_fix]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_comparison_operator_fix]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_comparison_operator_pass]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_casting_operator_fix]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_casting_operator_pass]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_fix_tsql_spaced_chars]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_pass_postgres_case_statement]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_excess_space_cast]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_redshift_at_time_zone]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_pass_snowflake_semi_structured]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_fail_snowflake_semi_structured_single]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_fail_snowflake_semi_structured_multi]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_pass_bigquery_specific]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_pass_bigquery_specific_arrays_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_pass_bigquery_specific_arrays_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_pass_bigquery_array_function]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_pass_bigquery_specific_structs]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_pass_bigquery_specific_struct_access]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_pass_bigquery_struct_function_no_spaces]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_postgres_datatype]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_redshift_datatype]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_bigquery_datatype]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_athena_datatype]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_hive_datatype]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_sqlite_datatype]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_sparksql_datatype]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_exasol_datatype]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_teradata_datatype]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_tsql_datatype]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_snowflake_match_pattern]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_hive_set_statement]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_spark_set_statement]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_clickhouse_system_path]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_pass_simple_select]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_pass_expression0]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_fail_as]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_fail_expression0]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_pass_comma]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_pass_semicolon]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_pass_bigquery_udf_triple_single_quote]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_pass_bigquery_udf_triple_double_quote]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_pass_ansi_single_quote]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_fail_ansi_single_quote]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_pass_tsql_unicode_single_quote]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_fail_tsql_unicode_single_quote]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_fail_ansi_unicode_single_quote]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_pass_casting_expression]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_fail_bigquery_casting]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_fail_teradata_casting_type1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_pass_teradata_casting_type2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_pass_sparksql_ansi_interval_minus]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_pass_sparksql_multi_units_interval_minus0]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_fail_old_python_test]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_fail_no_space_after_using_clause]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_pass_newline_after_using_clause]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_fail_cte_no_space_after_as]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_fail_multiple_spaces_after_as]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_fail_cte_newline_after_as]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_fail_cte_newline_and_spaces_after_as]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_pass_brackets]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_pass_expression1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_fail_expression1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_pass_newline_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_pass_newline_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_pass_newline_\\xa3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_pass_sign_indicators]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_pass_tilde]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_fail_simple]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_pass_bigquery_hyphen]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_pass_sparksql_ansi_interval_minus]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_pass_sparksql_multi_units_interval_minus1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_pass_tsql_assignment_operator]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_pass_concat_string]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_pass_placeholder_spacing]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_fail_bigquery_whitespaces_in_function_reference]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_pass_bigquery_safe_prefix_function]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_fail_bigquery_safe_prefix_function]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_fail_trailing_whitespace]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_fail_trailing_whitespace_on_initial_blank_line]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_pass_trailing_whitespace_before_template_code]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_fail_trailing_whitespace_and_whitespace_control]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT01_test_pass_macro_trailing]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fail_reindent_first_line_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fail_reindent_first_line_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_pass_indentation_of_comments_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_pass_indentation_of_comments_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fail_tab_indentation]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_pass_indented_joins_default]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_pass_indented_joins_false]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_pass_indented_joins_true]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fail_indented_joins_true_fix]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fail_indented_joins_false_fix]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_pass_indented_using_on_default]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_pass_indented_using_on_true]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_pass_indented_using_on_false]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fail_indented_using_on_false]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fail_indented_joins_using_on_true]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fail_indented_joins_using_on_false]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fail_indented_using_on_merge_statment_default]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_pass_indented_using_on_merge_statment_false]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_pass_indented_on_contents_default]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_pass_indented_on_contents_true]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_pass_indented_on_contents_false]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fail_indented_on_contents_default_fix_a]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fail_indented_on_contents_default_fix_b]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fail_indented_on_contents_false_fix]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_pass_indented_from_with_comment]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_pass_ignored_comment]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fail_indented_from_with_comment_alternate]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fail_indented_from_with_comment_fix]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fail_indented_multi_line_comment]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_jinja_with_disbalanced_pairs]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fail_attempted_hanger_fix]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fail_possible_hanger_fix]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fail_consecutive_hangers]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fail_consecutive_hangers_implicit]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fail_clean_reindent_fix]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_pass_indent_snowflake]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_pass_indent_indent_bigquery]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_jinja_indent_templated_table_name_a]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_jinja_indent_templated_table_name_b]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_jinja_nested_blocks]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_limit_and_qualify_and_window_indent]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_limit_and_qualify_and_window_single_line]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_pass_cte]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fail_indented_cte]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_exasol_script]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_pass_tsql_else_if]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fail_tsql_else_if]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fail_tsql_else_if_successive]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_tsql_function]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_pass_ignore_templated_whitespace]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fail_ignore_templated_whitespace_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fail_ignore_templated_whitespace_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fail_ignore_templated_whitespace_3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_pass_ignore_templated_whitespace_4]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_pass_ignore_templated_newline_not_last_line]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_pass_ignore_templated_newline_last_line]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fail_fix_template_indentation_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fail_fix_template_indentation_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_pass_tsql_update_indent]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_pass_tsql_declare_indent]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_pass_tsql_set_indent]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_pass_tsql_set_indent_multiple_params]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_pass_tsql_if_indent]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_pass_exasol_func_indent]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fail_fix_exa_func_format]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_pass_tsql_index_indent]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_pass_tsql_statistics_indent]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fail_snowflake_merge_statement]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fail_hanging_indents_convert_to_normal_indent]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fail_hanging_indents_fix_mixed_indents]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_pass_indented_procedure_parameters]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fail_unindented_procedure_parameters]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_tsql_bubble_up_newline_after_fix]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_tsql_cross_apply_indentation]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_tsql_cross_join_indentation]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_tsql_nested_join]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_tsql_outer_apply_indentation]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_tsql_outer_apply_indentation_fix]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fail_consuming_whitespace_a]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fail_consuming_whitespace_b]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_pass_consuming_whitespace_stable]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fail_trailing_comments]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fail_case_statement]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_pass_templated_case_statement]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_pass_jinja_tag_multiline]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_pass_trailing_inline_noqa]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_pass_implicit_indent]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fail_deny_implicit_indent]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_pass_templated_newlines]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fail_fix_beside_templated]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_pass_block_comment]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fix_block_comment]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fail_case_else_end_clause]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fail_hard_templated_indents]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fail_fix_consistency_around_comments]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fail_coverage_indent_trough]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_pass_combined_comment_impulses]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_indented_comment_tsql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_pass_join_comment_indents_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_pass_join_comment_indents_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_comment_effect_indents_default]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_comment_effect_indents_implicit]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_untaken_negative_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_untaken_negative_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_untaken_negative_implicit]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fail_mixed_tabs_and_spaces]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fix_implicit_indents_4467_a]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fix_implicit_indents_4467_b]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fix_macro_indents_4367]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fix_untaken_positive_4433]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_implicit_case_4542]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_indented_joins_4484]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_tsql_where_implicit_4559]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_jinja_nested_tracking]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_configure_no_indent_before_then_4589]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_bigquery_insert_statement_values_clause]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_bigquery_merge_statement_values_clause]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fail_issue_4680]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_implicit_indent_when]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_implicit_indent_nested_when]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fail_issue_4745]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_pass_trailing_comment_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_pass_trailing_comment_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_pass_issue_4582]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_pass_issue_4540]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_pass_closed_bracketed_implicit]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_fix_unclosed_bracketed_implicit]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_pass_implicit_where]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_pass_templated_join]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_whitespace_control_issue_5277]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_test_inconsistent_indent]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_spaces_pass_default]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_spaces_fail]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_spaces_fail_custom_tab_space_size]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_tabs_fail_default]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_tabs_fail_default_set_tab_space_size]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_tabs_pass]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_indented_comments]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_indented_comments_default_config]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT02_indented_comments_tab_config]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT03_passes_on_before_default]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT03_fails_on_after_default]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT03_fails_on_after_default_on_and]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT03_fails_on_after_with_comment_order_preserved]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT03_passes_on_before_explicit]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT03_fails_on_after_explicit]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT03_fails_on_after_multi_explicit]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT03_fails_on_before_override]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT03_passes_on_after_override]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT03_fails_on_before_override_with_comment_order]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT03_fails_on_after_override_with_comment_order]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT03_fails_leading_with_comments]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT03_fails_trailing_with_comments]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT03_passes_templated_newline]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT03_fails_templated_code_non_templated_newline]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT03_passes_operator_alone_on_line]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT03_fixes_tuple_error_issue]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT04_leading_comma_violations]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT04_leading_comma_violation_with_inline_comment]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT04_leading_commas_allowed]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT04_leading_commas_allowed_with_header]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT04_leading_comma_violations_in_with_statement]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT04_leading_commas_allowed_in_with_statement]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT04_trailing_comma_violations]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT04_trailing_commas_allowed]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT04_trailing_comma_fixing_removes_extra_whitespace]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT04_leading_comma_fixing_flows_around_comments]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT04_trailing_comma_move_past_several_comment_lines]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT04_leading_comma_move_past_several_comment_lines]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT04_leading_comma_with_templated_column_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT04_leading_comma_with_templated_column_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT04_trailing_comma_with_templated_column_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT04_trailing_comma_with_templated_column_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT04_leading_comma_fix_mixed_indent]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT04_trailing_comma_fix_mixed_indent]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_pass_line_too_long_config_override]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_fail_line_too_long_with_comments_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_fail_line_too_long_with_comments_1_after]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_fail_line_too_long_with_comments_1_no_newline]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_fail_line_too_long_with_comments_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_fail_line_too_long_with_comments_3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_fail_line_too_long_with_comments_4]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_pass_line_too_long_with_comments_ignore_comment_lines]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_fail_line_too_long_only_comments]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_fail_line_too_long_handling_indents]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_pass_line_too_long_ignore_comments_true]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_pass_line_too_long_ignore_comments_false]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_compute_line_length_before_template_expansion_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_compute_line_length_before_template_expansion_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_long_jinja_comment]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_long_jinja_comment_ignore]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_for_loop]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_for_loop_repeating_elements_starts_with_literal]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_for_loop_starting_with_templated_piece]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_for_loop_fail_complex_match]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_for_loop_fail_simple_match]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_set_statement]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_issue_1666_line_too_long_unfixable_jinja]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_fail_ignore_comment_clauses_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_fail_ignore_comment_clauses_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_pass_ignore_comment_clauses]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_pass_ignore_comment_clauses_teradata]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_pass_ignore_comment_clauses_exasol]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_pass_ignore_comment_clauses_snowflake]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_pass_ignore_comment_clauses_postgres]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_fail_templated_comment_line]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_pass_ignore_templated_comment_lines]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_fail_operator_precedence_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_fail_operator_precedence_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_fail_operator_precedence_3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_pass_long_multiline_jinja]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_fail_long_inline_statement]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_pass_check_off_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_pass_check_off_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_comment_move_mid_query]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_fix_implicit_indent]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_fix_no_implicit_indent]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_fix_window_function]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_fail_do_not_fix_noqa]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_block_comment_single_line_noqa]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_fail_block_comment_single_line_noqa]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_fail_block_comment_multi_line_noqa]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_fail_block_comment_noqa_following_preceding_text_noqa]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_fail_block_comment_noqa_not_at_end_of_line_noqa]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_operator_precedence]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_long_functions_and_aliases]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_order_by_rebreak_span]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_trailing_semicolon_moves]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_pass_window_function]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT05_test_fail_no_fix_long_templated]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT06_passing_example]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT06_passing_example_window_function]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT06_simple_fail]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT06_complex_fail_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT06_complex_fail_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT07_test_pass_with_clause_closing_aligned]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT07_test_pass_with_clause_closing_oneline]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT07_test_pass_with_clause_closing_misaligned_indentation]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT07_test_pass_with_clause_closing_misaligned_negative_indentation]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT07_test_move_parenthesis_to_next_line]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT07_test_pass_cte_with_column_list]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT07_test_pass_with_clause_closing_misaligned_indentation_in_templated_block]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT07_test_move_parenthesis_to_next_line_in_templated_block]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT07_test_pass_templated_clauses]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT08_test_pass_blank_line_after_cte_trailing_comma]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT08_test_pass_blank_line_after_cte_leading_comma]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT08_test_fail_no_blank_line_after_each_cte]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT08_test_fail_no_blank_line_after_cte_before_comment]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT08_test_fail_no_blank_line_after_cte_and_comment]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT08_test_fail_no_blank_line_after_last_cte_trailing_comma]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT08_test_fail_no_blank_line_after_last_cte_leading_comma]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT08_test_fail_oneline_cte_leading_comma]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT08_test_fail_cte_floating_comma]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT08_test_pass_column_name_definition]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT08_test_pass_column_name_definition_multiple]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT08_test_fail_column_name_definition_newline]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT08_test_fail_column_name_definition_comment]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT08_test_pass_recursive_with_argument_list]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT08_test_pass_recursive_with_argument_list_postgres]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT09_test_single_select_target_and_no_newline_between_select_and_select_target]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT09_test_single_wildcard_select_target_and_no_newline_between_select_and_select_target_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT09_test_single_wildcard_select_target_and_no_newline_between_select_and_select_target_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT09_test_single_select_target_and_newline_after_select_target_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT09_test_single_select_target_and_newline_after_select_target_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT09_test_single_select_target_and_newline_before_select_target]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT09_test_multiple_select_targets_on_newlines_and_newline_after_select]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT09_test_single_wildcard_select_target_and_newline_before_select_target_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT09_test_single_wildcard_select_target_and_newline_before_select_target_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT09_test_single_wildcard_select_target_and_newline_before_select_target_plus_from_on_same_line_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT09_test_single_wildcard_select_target_and_newline_before_select_target_plus_from_on_same_line_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT09_test_multiple_select_targets_all_on_the_same_line]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT09_test_multiple_select_targets_all_on_the_same_line_plus_from_clause]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT09_test_multiple_select_targets_including_wildcard_all_on_the_same_line_plus_from_clause]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT09_test_multiple_select_target_plus_from_clause_on_the_same_line]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT09_test_multiple_select_targets_trailing_whitespace_after_select]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT09_test_single_select_with_comment_after_select]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT09_test_comment_between_select_and_single_select_target]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT09_test_multiple_select_targets_some_newlines_missing_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT09_test_multiple_select_targets_some_newlines_missing_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT09_test_cte]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT09_test_single_newline_no_from]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT09_test_single_distinct_no_from]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT09_test_distinct_many]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT09_test_distinct_single_pass]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT09_test_distinct_single_fail_a]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT09_test_distinct_single_fail_b]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT09_test_single_select_with_no_from]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT09_test_single_select_with_no_from_previous_comment]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT09_test_single_select_with_comment_after_column]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT09_test_single_select_with_comment_after_column_no_space]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT09_test_single_select_with_multiple_mixed_comments]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT09_test_single_select_with_comment before]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT09_test_create_view]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT09_test_multiline_single]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT09_test_multiline_expressions]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT09_test_pass_leading_commas]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT10_test_fail_distinct_on_next_line_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT10_test_fail_distinct_on_next_line_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT10_test_fail_distinct_on_next_line_3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT10_test_fail_distinct_on_next_line_4]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT10_test_pass_distinct_on_same_line_with_select]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT11_test_fail_simple_fix_union_all_before]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT11_test_fail_simple_fix_union_all_after]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT11_test_fail_simple_fix_union_all_before_and_after]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT11_test_pass_multiple_newlines_are_allowed]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT11_test_fail_fix_works_in_subqueries]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT11_test_pass_fix_works_in_subqueries_after_LT02_fix]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT11_test_fail_simple_fix_union_before_and_after]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT11_test_fail_simple_fix_intersect_before_and_after]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT11_test_fail_simple_fix_except_before_and_after]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT11_test_fail_simple_fix_minus_before_and_after]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT11_test_fail_simple_fix_bigquery_intersect_distinct_before_and_after]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT12_test_pass_single_final_newline]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT12_test_fail_no_final_newline]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT12_test_fail_multiple_final_newlines]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT12_test_pass_templated_plus_raw_newlines]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT12_test_fail_templated_plus_raw_newlines]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT12_test_fail_templated_plus_raw_newlines_extra_newline]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT12_test_pass_templated_macro_newlines]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT12_test_fail_templated_no_newline]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT13_test_pass_leading_whitespace_statement]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT13_test_pass_leading_whitespace_comment]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT13_test_pass_leading_whitespace_inline_comment]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT13_test_pass_leading_whitespace_inline_comment_hash]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT13_test_pass_leading_whitespace_jinja_comment]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT13_test_pass_leading_whitespace_jinja_if]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT13_test_pass_leading_whitespace_jinja_for]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT13_test_fail_leading_whitespace_statement]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT13_test_fail_leading_whitespace_comment]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT13_test_fail_leading_whitespace_inline_comment]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT13_test_fail_leading_whitespace_jinja_comment]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT13_test_fail_leading_whitespace_jinja_if]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[LT13_test_fail_leading_whitespace_jinja_for]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF01_test_pass_object_referenced_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF01_test_fail_object_not_referenced_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF01_test_fail_object_not_referenced_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF01_test_pass_object_referenced_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF01_test_pass_object_referenced_3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF01_test_pass_object_referenced_4]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF01_test_pass_object_referenced_5a]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF01_test_pass_object_referenced_5b]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF01_test_pass_object_referenced_5c]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF01_test_pass_object_referenced_5d]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF01_test_pass_object_referenced_5e]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF01_test_pass_object_referenced_6]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF01_test_pass_object_referenced_7]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF01_test_fail_object_referenced_7]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF01_test_pass_object_referenced_8]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF01_test_pass_two_part_reference_8]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF01_test_pass_two_part_reference_9]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF01_test_fail_two_part_reference_10]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF01_test_fail_two_part_reference_11]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF01_test_pass_two_part_reference_11]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF01_test_pass_bigquery_dash]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF01_test_pass_exasol_select_into]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF01_test_pass_simple_delete]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF01_test_exasol_invalid_foreign_key_from]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF01_test_tsql_select_system_as_identifier]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF01_test_mysql_select_no_from_should_not_except]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF01_test_nested_join_clause_does_not_flag]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF01_test_nested_join_clauses_do_not_flag]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF01_test_parenthesized_join_clauses_do_not_flag]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF01_test_soql_ignore_rule]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF01_test_postgres_value_table_alias]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF01_test_pass_update_with_alias]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF01_test_pass_postgres_merge_with_alias]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF02_test_pass_qualified_references_multi_table_statements]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF02_test_fail_unqualified_references_multi_table_statements]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF02_test_pass_qualified_references_multi_table_statements_subquery]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF02_test_fail_unqualified_references_multi_table_statements_subquery]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF02_test_pass_qualified_references_multi_table_statements_subquery_mix]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF02_test_allow_date_parts_as_function_parameter_bigquery]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF02_test_allow_date_parts_as_function_parameter_snowflake]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF02_test_ignore_value_table_functions_when_counting_tables]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF02_test_ignore_value_table_functions_when_counting_unqualified_aliases]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF02_test_allow_unqualified_references_in_sparksql_lambdas]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF02_test_allow_unqualified_references_in_athena_lambdas]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF02_test_allow_unqualified_references_in_athena_lambdas_with_several_arguments]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF02_test_disallow_unqualified_references_in_malformed_lambdas]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF02_test_fail_column_and_alias_same_name]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF02_test_pass_column_and_alias_same_name_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF02_test_pass_column_and_alias_same_name_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF02_test_pass_qualified_references_multi_table_statements_mysql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF02_test_fail_unqualified_references_multi_table_statements_mysql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF02_test_fail_column_and_alias_same_name_mysql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF02_test_pass_column_and_alias_same_name_1_mysql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF02_test_pass_column_and_alias_same_name_2_mysql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF02_test_pass_qualified_references_multi_table_statements_tsql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF02_test_fail_unqualified_references_multi_table_statements_tsql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF02_test_fail_column_and_alias_same_name_tsql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF02_test_pass_column_and_alias_same_name_1_tsql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF02_test_pass_column_and_alias_same_name_2_tsql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF02_test_pass_rowtype_with_join]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF02_test_fail_table_plus_flatten_snowflake_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF02_test_fail_table_plus_flatten_snowflake_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF02_test_pass_table_plus_flatten_snowflake_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF02_test_pass_ignore_words_column_name]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF02_test_pass_ignore_words_regex_column_name]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF02_test_pass_ignore_words_regex_bigquery_declare_example]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF02_test_pass_redshift]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF02_test_pass_tsql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF02_test_pass_ansi]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF02_test_pass_redshift_convert]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF03_test_fail_single_table_mixed_qualification_of_references]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF03_test_pass_single_table_consistent_references_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF03_test_pass_single_table_consistent_references_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF03_test_pass_on_tableless_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF03_test_fail_single_table_mixed_qualification_of_references_subquery]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF03_test_pass_lateral_table_ref]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF03_test_pass_single_table_consistent_references_1_subquery]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF03_test_pass_single_table_consistent_references_2_subquery]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF03_test_fail_single_table_reference_when_unqualified_config]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF03_test_fail_single_table_reference_when_qualified_config]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF03_test_pass_single_table_reference_in_subquery]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF03_test_value_table_functions_do_not_require_qualification]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF03_test_object_references_1a]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF03_test_object_references_1b]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF03_test_object_references_1c]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF03_test_object_references_1d]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF03_test_object_references_1e]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF03_test_object_references_struct_inconsistent_fix_a]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF03_test_object_references_1f]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF03_test_object_references_1g]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF03_test_tsql_pivot_are_excluded]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF03_test_date_functions_are_excluded]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF03_test_select_alias_in_where_clause_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF03_test_select_alias_in_where_clause_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF03_test_pass_group_by_alias]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF03_test_pass_order_by_alias]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF03_test_pass_having]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF03_test_fail_select_alias_in_where_clause_5]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF03_test_pass_tsql_parameter]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF03_test_pass_tsql_pivot]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF03_test_unfixable_ambiguous_reference_subquery]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF03_test_pass_snowflake_flatten_function]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF03_passes_tql_table_variable]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF03_fail_but_dont_fix_templated_table_name_consistent]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF03_fail_but_dont_fix_templated_table_name_qualified]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF04_test_pass_valid_identifier]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF04_test_fail_keyword_as_identifier_column]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF04_test_fail_keyword_as_identifier_column_alias]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF04_test_fail_keyword_as_identifier_table_alias]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF04_test_pass_valid_identifier_not_alias]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF04_test_fail_keyword_as_identifier_not_alias_all]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF04_test_pass_valid_identifier_table_alias_column_alias_config]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF04_test_fail_keyword_as_identifier_column_alias_config]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF04_test_pass_valid_quoted_identifier]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF04_test_fail_keyword_as_quoted_identifier_column]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF04_test_pass_keyword_as_quoted_identifier_column_none_policy]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF04_test_fail_keyword_as_quoted_identifier_column_alias]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF04_test_fail_keyword_as_quoted_identifier_table_alias]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF04_test_pass_valid_quoted_identifier_not_alias]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF04_test_fail_keyword_as_quoted_identifier_not_alias_all]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF04_test_pass_valid_quoted_identifier_table_alias_column_alias_config]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF04_test_fail_keyword_as_quoted_identifier_column_alias_config]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF04_test_pass_ignore_word1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF04_test_pass_ignore_word2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF04_test_pass_ignore_words_regex1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF04_test_pass_ignore_words_regex2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF04_test_pass_one_character_identifier]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_fail_special_chars_create_table_space]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_fail_special_chars_create_table_gt]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_fail_special_chars_create_table_lt]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_fail_special_chars_create_table_lt_bigquery]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_fail_special_chars_create_table_hash_unquoted]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_pass_special_chars_create_table_none]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_pass_special_chars_create_table_none_quoted_tsql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_pass_special_chars_create_table_none_quoted_biquery]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_pass_special_chars_create_table_space_allowed]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_fail_special_chars_quoted_policy_alias]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_fail_special_chars_quoted_policy_column_alias]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_fail_special_chars_unquoted_policy_aliases]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_fail_special_chars_unquoted_policy_column_aliases]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_pass_special_chars_quoted_policy_aliases]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_pass_special_chars_quoted_policy_none]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_pass_special_chars_unquoted_policy_aliases]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_pass_special_chars_unquoted_policy_column_aliases]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_pass_special_chars_quoted_policy_column_aliases]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_pass_dots_bigquery]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_pass_star_bigquery]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_fail_star_bigquery]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_pass_hyphen_bigquery_quotes_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_pass_hyphen_bigquery_quotes_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_pass_hyphen_bigquery_no_quotes]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_pass_dot_bigquery]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_fail_single_quote_bigquery]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_pass_single_quote_bigquery]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_pass_single_quote2_bigquery]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_pass_dot_slash_identifier_in_file_reference_sparksql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_pass_star_identifier_in_file_reference_sparksql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_pass_question_mark_identifier_in_file_reference_sparksql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_pass_character_class_identifier_in_file_reference_sparksql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_pass_negated_character_class_identifier_in_file_reference_sparksql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_pass_character_range_identifier_in_file_reference_sparksql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_pass_negated_character_range_identifier_in_file_reference_sparksql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_pass_alteration_identifier_in_file_reference_sparksql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_pass_ignore_lists_quoted]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_pass_ignore_lists_quoted_fail]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_pass_ignore_lists_quoted_mixed_case]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_pass_ignore_lists_unquoted]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_pass_ignore_lists_unquoted_fail]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_pass_ignore_lists_unquoted_mixed_case]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_pass_ignore_words_regex_unquoted]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_pass_ignore_words_regex_quoted]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_fail_ignore_words_regex_quoted_mixed_case]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_pass_special_chars_show_tblproperties]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_fail_special_chars_show_tblproperties]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_pass_special_chars_redshift_hash_table]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF05_test_fail_special_chars_redshift_hash_column]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_pass_column_reference]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_fail_column_reference]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_fail_column_reference_tsql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_pass_table_reference]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_fail_table_reference]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_fail_table_reference_tsql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_pass_multiple_references]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_fail_multiple_references]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_fail_multiple_references_tsql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_pass_whitespace]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_pass_whitespace_tsql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_pass_special_symbols]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_pass_special_symbols_tsql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_pass_reserved_keyword]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_pass_reserved_keyword_tsql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_pass_column_reference_prefer_quoted_ansi]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_pass_column_reference_prefer_quoted_tsql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_fail_column_reference_prefer_quoted_ansi]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_pass_table_reference_prefer_quoted_ansi]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_pass_table_reference_prefer_quoted_tsql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_fail_table_reference_prefer_quoted_ansi]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_fail_table_reference_prefer_quoted_tsql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_pass_multiple_references_prefer_quoted_ansi]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_pass_multiple_references_prefer_quoted_tsql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_fail_multiple_references_prefer_quoted_ansi]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_fail_multiple_references_prefer_quoted_tsql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_pass_whitespace_prefer_quoted_ansi]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_pass_whitespace_prefer_quoted_tsql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_pass_special_symbols_prefer_quoted_ansi]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_pass_special_symbols_prefer_quoted_tsql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_pass_reserved_keyword_prefer_quoted_ansi]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_pass_reserved_keyword_prefer_quoted_tsql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_pass_column_reference_prefer_quoted_backticks]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_fail_column_reference_prefer_quoted_backticks]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_pass_table_reference_prefer_quoted_backticks]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_fail_table_reference_prefer_quoted_backticks]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_pass_multiple_references_prefer_quoted_backticks]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_fail_multiple_references_prefer_quoted_backticks]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_pass_whitespace_prefer_quoted_backticks]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_pass_special_symbols_prefer_quoted_backticks]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_pass_reserved_keyword_prefer_quoted_backticks]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_pass_datetime_redshift]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_pass_uppivot_bigquery]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_pass_quoted_identifier_keyword_tsql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_pass_create_user_quoted_password_exasol]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_fail_create_quoted_user_exasol]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_pass_ignore_lists]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_pass_ignore_lists_tsql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_pass_ignore_lists_mixed_case]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_pass_ignore_lists_mixed_case_tsql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_pass_ignore_words_regex]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_pass_ignore_words_regex_tsql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_pass_ignore_words_regex_mixed_case]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_pass_ignore_words_regex_mixed_case_tsql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_pass_ignore_if]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_pass_ignore_if_tsql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_fail_insert_overwrite_directory]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_pass_insert_overwrite_directory]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_fail_quoted_column_ansi]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_fail_quoted_column_tsql]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_pass_quoted_column_snowflake]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_fail_quoted_column_snowflake_force_enable]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_pass_quoted_column_postgres]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_fail_quoted_column_postgres_force_enable]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_pass_prefer_quoted_keywords_athena]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_fail_prefer_quoted_keywords_athena]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_pass_tsql_execute_as]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[RF06_test_pass_exasol_password_literals]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST01_no_redundant_else_null]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST01_redundant_else_null]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST01_alternate_case_when_syntax]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST01_alternate_case_when_syntax_boolean]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST01_else_expression]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST02_test_pass_case_cannot_be_reduced_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST02_test_pass_case_cannot_be_reduced_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST02_test_pass_case_cannot_be_reduced_3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST02_test_pass_case_cannot_be_reduced_4]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST02_test_pass_case_cannot_be_reduced_5]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST02_test_pass_case_cannot_be_reduced_6]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST02_test_pass_case_cannot_be_reduced_7]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST02_test_pass_case_cannot_be_reduced_8]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST02_test_pass_case_cannot_be_reduced_9]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST02_test_pass_case_cannot_be_reduced_10]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST02_test_pass_case_cannot_be_reduced_11]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST02_test_pass_case_cannot_be_reduced_12]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST02_test_pass_case_cannot_be_reduced_13]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST02_test_fail_unnecessary_case_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST02_test_fail_unnecessary_case_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST02_test_fail_unnecessary_case_3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST02_test_fail_unnecessary_case_4]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST02_test_fail_unnecessary_case_5]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST02_test_fail_unnecessary_case_6]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST02_test_fail_unnecessary_case_7]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST02_test_fail_unnecessary_case_8]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST02_test_fail_unnecessary_case_9]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST02_test_fail_unnecessary_case_10]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST02_test_fail_unnecessary_case_11]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST02_test_fail_no_copy_code_out_of_template]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST03_test_pass_no_cte_defined_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST03_test_pass_cte_defined_and_used_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST03_test_pass_cte_defined_and_used_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST03_test_pass_cte_defined_and_used_case_insensitive]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST03_test_fail_cte_defined_but_unused_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST03_test_fail_cte_defined_but_unused_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST03_test_pass_cte_defined_and_used_3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST03_test_fail_cte_defined_but_unused_3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST03_test_pass_no_cte_defined_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST03_test_pass_cte_defined_and_used_4]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST03_test_pass_cte_defined_and_used_5]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST03_test_pass_cte_defined_and_used_6]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST03_test_fail_cte_defined_but_unused_4]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST03_test_pass_cte_defined_and_used_7]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST03_test_snowflake_delete_cte]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST03_test_pass_exasol_values_clause_cte_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST03_test_pass_exasol_values_clause_cte_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST03_test_pass_sparksql_values_clause_cte_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST03_test_pass_sparksql_values_clause_cte_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST03_test_fail_query_uses_templating]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST03_test_pass_update_cte]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST03_test_fail_update_cte]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST03_test_fail_nested_cte]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST03_test_pass_nested_query]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST03_test_fail_nested_query]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST03_test_pass_nested_query_in_from_clause]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST03_test_fail_nested_query_in_from_clause]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST04_test_pass_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST04_test_pass_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST04_test_fail_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST04_test_fail_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST04_test_fail_3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST04_test_fail_4]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST04_test_fail_5]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST04_test_double_nesting_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST04_test_double_nesting_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST04_test_fail_no_copy_code_out_of_template]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST04_test_pass_different_case_expressions1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST04_test_pass_different_case_expressions2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST04_test_fail_nested_same_case]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST04_test_fail_retain_comments]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST04_test_fail_retain_comments_after_end]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST04_test_fail_retain_comments_after_else]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST05_select_fail]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST05_cte_select_fail]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST05_cte_with_clashing_name]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST05_double_nested_fail]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST05_double_nested_fail_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST05_unfixable_cte_clash]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST05_with_recursive_fail_no_fix]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST05_select_multijoin_fail]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST05_with_fail]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST05_set_fail]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST05_simple_pass]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST05_from_clause_pass]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST05_from_clause_fail]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST05_both_clause_fail]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST05_no_inner_from_pass]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST05_uses_templating]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST05_issue_2898_redshift_attribute_error]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST05_issue_3623_internal_error_multiple_templated_files]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST05_issue_3622_no_space_after_from]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST05_issue_3617_parentheses_around_ctas_select]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST05_issue_3572_correlated_subquery_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST05_issue_3572_correlated_subquery_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST05_issue_3572_correlated_subquery_3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST05_issue_3598_avoid_looping_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST05_issue_3598_avoid_looping_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST05_test_fail_subquery_in_cte]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST05_test_fail_subquery_in_cte_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST05_test_fail_subquery_in_cte_3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST06_test_pass_select_statement_order]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST06_test_fail_select_statement_order_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST06_test_fail_select_statement_order_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST06_test_fail_select_statement_order_3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST06_test_fail_select_statement_order_4]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST06_test_fail_select_statement_order_5]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST06_test_union_statements_ignored]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST06_test_insert_statements_ignored]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST06_test_insert_statement_with_cte_ignored]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST06_test_merge_statements_ignored]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST06_test_merge_statement_with_cte_ignored]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST06_test_create_table_as_select_statements_ignored]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST06_test_create_table_as_select_with_cte_ignored]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST06_test_fail_fix_explicit_column_references_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST06_test_fail_fix_explicit_column_references_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST06_test_fail_no_fix_implicit_column_references]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST07_test_pass_specify_join_keys]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST07_test_fail_specify_join_keys_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST07_test_fail_specify_join_keys_1_with_alias]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST07_test_fail_specify_join_keys_1_with_subquery]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST07_test_fail_specify_join_keys_1_with_multi_using]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST07_test_fail_specify_join_keys_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST07_test_partial_fixed_up_to_2nd_join]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST07_select_using_fail]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST07_test_fail_parent_child_positioning]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST07_fail_but_dont_fix_templated_table_names]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST07_test_pass_clickhouse]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST08_test_fail_distinct_with_parenthesis_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST08_test_fail_distinct_with_parenthesis_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST08_test_fail_distinct_with_parenthesis_3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST08_test_fail_distinct_with_parenthesis_4]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST08_test_fail_distinct_with_parenthesis_5]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST08_test_fail_distinct_with_parenthesis_6]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST08_test_fail_distinct_with_parenthesis_7]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST08_test_pass_no_distinct]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST08_test_fail_distinct_column_inside_count]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST08_test_fail_distinct_concat_inside_count]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST09_test_pass_no_join_clauses]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST09_test_pass_no_join_on_conditions]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST09_test_pass_ignored_subconditions]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST09_test_pass_unqualified_column_reference]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST09_test_pass_earlier_table_first]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST09_test_pass_later_table_first]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST09_test_fail_earlier_table_first]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST09_test_fail_later_table_first]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST09_test_fail_later_table_first_left_outer]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST09_test_fail_later_table_first_inner]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST09_test_fail_later_table_first_right]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST09_test_fail_later_table_first_right_outer]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST09_test_fail_later_table_first_full_outer]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST09_test_pass_later_table_first_cross]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST09_test_fail_later_table_first_multiple_subconditions]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST09_test_fail_later_table_first_multiple_comparison_operators]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST09_test_fail_later_table_first_subquery]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST09_test_fail_later_table_first_cte]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST09_test_fail_later_table_no_join_clause_in_cte]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST09_test_fail_later_table_no_join_clause_in_main_query]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST09_test_fail_later_table_first_brackets_after_on]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST09_test_fail_later_table_first_brackets_after_from]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[ST09_test_fail_later_table_first_quoted_table_and_column]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[TQ01_test_fail_sp_prefix_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[TQ01_test_fail_sp_prefix_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[TQ01_test_fail_sp_prefix_3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[TQ01_test_pass_non_sp_prefix_1]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[TQ01_test_pass_non_sp_prefix_2]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[TQ01_test_pass_non_sp_prefix_3]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_case[TQ01_test_pass_non_sp_prefix_4]",
        "status": "PASSED"
    },
    {
        "name": "test/rules/yaml_test_cases_test.py::test__rule_test_global_config",
        "status": "PASSED"
    },
    {
        "name": "test/testing_test.py::test_assert_rule_fail_in_sql_handle_parse_error",
        "status": "PASSED"
    },
    {
        "name": "test/testing_test.py::test_assert_rule_fail_in_sql_should_fail_queries_that_unexpectedly_pass",
        "status": "PASSED"
    },
    {
        "name": "test/testing_test.py::test_assert_rule_pass_in_sql_should_handle_parse_error",
        "status": "PASSED"
    },
    {
        "name": "test/testing_test.py::test_assert_rule_pass_in_sql_should_fail_when_there_are_violations",
        "status": "PASSED"
    },
    {
        "name": "test/testing_test.py::test_rules__test_helper_skipped_when_test_case_skipped",
        "status": "PASSED"
    },
    {
        "name": "test/testing_test.py::test_rules__test_helper_has_variable_introspection",
        "status": "PASSED"
    },
    {
        "name": "test/utils/analysis/query_test.py::test_select_crawler_constructor[select 1-expected_json0]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/analysis/query_test.py::test_select_crawler_constructor[select 1 union select 2-expected_json1]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/analysis/query_test.py::test_select_crawler_constructor[with cte1 as (select 1 as x), cte2 as (select 2 as y) select * from cte1 join cte2 using (x)-expected_json2]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/analysis/query_test.py::test_select_crawler_constructor[\\n        with a as (\\n            with b as (select 1 from c)\\n            select * from b\\n        )\\n        select * from a\\n        -expected_json3]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/analysis/query_test.py::test_select_crawler_constructor[\\n        with b as (select 1 from c)\\n        select * from (\\n            with a as (select * from b)\\n            select * from a\\n        )\\n        -expected_json4]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/analysis/query_test.py::test_select_crawler_constructor[select a.x from (select z from b)-expected_json5]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/analysis/query_test.py::test_select_crawler_constructor[select a.x from a join (select z from b) as b on (a.x = b.x)-expected_json6]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/analysis/query_test.py::test_select_crawler_constructor[with prep as (select 1) select a.x from (select z from b)-expected_json7]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/analysis/query_test.py::test_select_crawler_constructor[with prep as (select 1) select a.x from a join (select z from b) as b on (a.x = b.x)-expected_json8]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/analysis/query_test.py::test_select_crawler_constructor[with prep_1 as (\\n    with d as (\\n        select x, z from b\\n    )\\n    select * from d\\n)\\nselect\\n    a.x, a.y, b.z\\nfrom a\\njoin prep_1 using (x)\\n-expected_json9]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/analysis/query_test.py::test_select_crawler_constructor[with a as (select 1), b as (select 2) select * from a union select * from b\\n-expected_json10]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/analysis/query_test.py::test_select_crawler_constructor[WITH txt AS ( VALUES (1, 'foo') ) SELECT * FROM txt\\n-expected_json11]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/analysis/query_test.py::test_select_crawler_constructor[SELECT (\\n    SELECT other_table.other_table_field_1 FROM other_table\\n    WHERE other_table.id = field_2\\n) FROM\\n(SELECT * FROM some_table) AS my_alias\\n-expected_json12]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/analysis/query_test.py::test_select_crawler_constructor[MERGE INTO t USING (SELECT * FROM u) AS u ON (a = b)\\nWHEN MATCHED THEN\\nUPDATE SET a = b\\nWHEN NOT MATCHED THEN\\nINSERT (b) VALUES (c);-expected_json13]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/analysis/query_test.py::test_select_crawler_constructor[DELETE FROM agent1\\nWHERE EXISTS(\\n    SELECT customer.cust_id FROM customer\\n    WHERE agent1.agent_code <> customer.agent_code);-expected_json14]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/analysis/query_test.py::test_select_crawler_constructor[UPDATE my_table\\nSET row_sum = (\\n    SELECT COUNT(*) AS row_sum\\n    FROM\\n        another_table\\n    WHERE\\n        another_table.id = my_tableeee.id\\n)-expected_json15]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/analysis/query_test.py::test_select_crawler_nested",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/depthmap_test.py::test_reflow_depthmap_from_parent",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/depthmap_test.py::test_reflow_depthmap_from_raws_and_root",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/depthmap_test.py::test_reflow_depthmap_order_by",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/rebreak_test.py::test_reflow__sequence_rebreak_root[select 1-select 1]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/rebreak_test.py::test_reflow__sequence_rebreak_root[select 1\\n+2-select 1\\n+2]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/rebreak_test.py::test_reflow__sequence_rebreak_root[select 1+\\n2-select 1\\n+ 2]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/rebreak_test.py::test_reflow__sequence_rebreak_root[select\\n  1 +\\n  2-select\\n  1\\n  + 2]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/rebreak_test.py::test_reflow__sequence_rebreak_root[select\\n  1 +\\n  -- comment\\n  2-select\\n  1\\n  -- comment\\n  + 2]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/rebreak_test.py::test_reflow__sequence_rebreak_root[select a,b-select a,b]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/rebreak_test.py::test_reflow__sequence_rebreak_root[select a\\n,b-select a,\\nb]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/rebreak_test.py::test_reflow__sequence_rebreak_root[select\\n  a\\n  , b-select\\n  a,\\n  b]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/rebreak_test.py::test_reflow__sequence_rebreak_root[select\\n    a\\n    , b-select\\n    a,\\n    b]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/rebreak_test.py::test_reflow__sequence_rebreak_root[select\\n  a\\n    , b-select\\n  a,\\n    b]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/rebreak_test.py::test_reflow__sequence_rebreak_root[select\\n  a\\n  -- comment\\n  , b-select\\n  a,\\n  -- comment\\n  b]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/rebreak_test.py::test_reflow__sequence_rebreak_target[select 1+\\n(2+3)-4-1+\\n(-1\\n+ (]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/rebreak_test.py::test_reflow__sequence_rebreak_target[select a,\\n(b+c)-4-a,\\n(-a,\\n(]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/rebreak_test.py::test_reflow__sequence_rebreak_target[select a\\n  , (b+c)-6-a\\n  , (-a,\\n  (]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/rebreak_test.py::test_reflow__sequence_rebreak_target[select a,\\n(b+c)-6-,\\n(b-,\\n(b]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/rebreak_test.py::test_reflow__sequence_rebreak_target[select a<=b-4-a<=-a<=]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__point_indent_to[select\\n  1-1-  -\\n  ]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__point_indent_to[select\\n  1-1-    -\\n    ]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__point_indent_to[select\\n  1-1- -\\n ]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__point_indent_to[select\\n1-1-  -\\n  ]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__point_indent_to[select\\n  1-1--\\n]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__point_indent_to[select 1-1-  -\\n  ]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__point_indent_to[select 1-1- -\\n ]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__point_indent_to[select 1-1--\\n]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__point_indent_to[select      1-1-  -\\n  ]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__point_get_indent[select 1-1-None]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__point_get_indent[select\\n  1-1-  ]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__point_get_indent[select\\n \\n  \\n   1-1-   ]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__deduce_line_indent[select 1-select-]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__deduce_line_indent[select 1-1-]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__deduce_line_indent[select\\n  1-1-  ]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__deduce_line_indent[select\\n \\n  \\n   1-1-   ]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__deduce_line_indent[select\\n \\n  \\n   1+2+3+4-4-   ]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__deduce_line_indent[select\\n   1 + 2-2-   ]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__crawl_indent_points[select 1-points_out0]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__crawl_indent_points[\\nselect 1\\n-points_out1]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__crawl_indent_points[select\\n1-points_out2]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__crawl_indent_points[SELECT\\n    r.a,\\n    s.b\\nFROM r\\nJOIN s\\n    ON\\n        r.a = s.a\\n        AND true-points_out3]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__crawl_indent_points[SELECT *\\nFROM t1\\nJOIN t2 ON true\\nAND true-points_out4]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__crawl_indent_points[SELECT\\n    {{ 'a' }}\\n    {% for c in ['d', 'e'] %}\\n    ,{{ c }}_val\\n    {% endfor %}\\n-points_out5]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__crawl_indent_points[{% for item in [1, 2] -%}\\nSELECT *\\nFROM some_table\\n{{ 'UNION ALL\\n' if not loop.last }}\\n{%- endfor %}-points_out6]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__crawl_indent_points[SELECT\\n  {{'1 \\n, 2'}}\\nFROM foo-points_out7]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__lint_indent_points[select 1-select 1]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__lint_indent_points[      select 1-select 1]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__lint_indent_points[      select 1\\n-select 1\\n]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__lint_indent_points[select\\n1-select\\n  1]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__lint_indent_points[select\\n1+(\\n2+3\\n),\\n4\\nfrom foo-select\\n  1+(\\n    2+3\\n  ),\\n  4\\nfrom foo]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__lint_indent_points[select\\n    1+(\\n    2+3\\n    ),\\n    4\\n    from foo-select\\n  1+(\\n    2+3\\n  ),\\n  4\\nfrom foo]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__lint_indent_points[   select ((((\\n1\\n))))-select ((((\\n  1\\n))))]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__lint_indent_points[select (((\\n((\\n3\\n))\\n)))-select (((\\n  ((\\n    3\\n  ))\\n)))]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__lint_indent_points[select\\n1\\n{% if true %}\\n+ 2\\n{% endif %}-select\\n  1\\n  \\n    + 2\\n  ]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__lint_indent_points[select\\n1\\n{% if true %}\\n,2\\nFROM a\\n{% endif %}-select\\n  1\\n\\n  ,2\\nFROM a\\n]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__lint_indent_points[{% if true %}\\nSELECT 1\\n{% endif %}-\\n  SELECT 1\\n]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__lint_indent_points[select\\n  0,\\n  {% for i in [1, 2, 3] %}\\n    {{i}},\\n  {% endfor %}\\n  4-select\\n  0,\\n  \\n    1,\\n  \\n    2,\\n  \\n    3,\\n  \\n  4]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__lint_indent_points[select 1, 2-select 1, 2]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__lint_indent_points[select 1,\\n2-select\\n  1,\\n  2]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__lint_indent_points[select 1,\\n       2-select\\n  1,\\n  2]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__lint_indent_points[select greatest(1,\\n2)-select greatest(\\n  1,\\n  2\\n)]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__lint_indent_points[\\n\\n  \\n\\nselect\\n\\n\\n\\n    \\n\\n     1\\n\\n       \\n\\n-\\n\\n  \\n\\nselect\\n\\n\\n\\n    \\n\\n  1\\n\\n       \\n\\n]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__lint_indent_points[SELECT\\n    {{ 'a' }}\\n    {% for c in ['d', 'e'] %}\\n    ,{{ c }}_val\\n    {% endfor %}\\nFROM foo-SELECT\\n  a\\n  \\n    ,d_val\\n  \\n    ,e_val\\n  \\nFROM foo]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__lint_indent_points[SELECT\\n    {{ 'a' }}\\n    {% for c in ['d', 'e'] %}\\n    ,{{ c }}_val\\n    {% endfor %}\\n-SELECT\\n  a\\n  \\n    ,d_val\\n  \\n    ,e_val\\n  \\n]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__lint_indent_points[SELECT\\n  {{ 'a' }}\\n  {% for c in ['d', 'e'] %}\\n {% if c == 'd' %}\\n  ,{{ c }}_val_a\\n    {% else %}\\n  ,{{ c }}_val_b\\n{% endif %}\\n  {% endfor %}\\n-SELECT\\n  a\\n  \\n    \\n      ,d_val_a\\n    \\n  \\n    \\n      ,e_val_b\\n    \\n  \\n]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__lint_indent_points[{{ '\\\\n   \\\\n   ' }}\\nSELECT 1-\\n   \\n   \\nSELECT 1]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__desired_indent_units[indent_line0-forced_indents0-0]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__desired_indent_units[indent_line1-forced_indents1-3]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__desired_indent_units[indent_line2-forced_indents2-1]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__desired_indent_units[indent_line3-forced_indents3-3]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__desired_indent_units[indent_line4-forced_indents4-3]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__desired_indent_units[indent_line5-forced_indents5-2]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__desired_indent_units[indent_line6-forced_indents6-1]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__desired_indent_units[indent_line7-forced_indents7-3]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__desired_indent_units[indent_line8-forced_indents8-2]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/reindent_test.py::test_reflow__desired_indent_units[indent_line9-forced_indents9-3]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/respace_test.py::test_reflow__sequence_respace[select 1+2-kwargs0-select 1 + 2]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/respace_test.py::test_reflow__sequence_respace[select    1   +   2    -kwargs1-select 1 + 2]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/respace_test.py::test_reflow__sequence_respace[select\\n    1   +   2-kwargs2-select\\n    1 + 2]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/respace_test.py::test_reflow__sequence_respace[select\\n  1   +   2-kwargs3-select\\n  1 + 2]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/respace_test.py::test_reflow__sequence_respace[select\\n  1   +   2-kwargs4-select 1 + 2]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/respace_test.py::test_reflow__sequence_respace[select  \\n  1   +   2 \\n -kwargs5-select\\n  1 + 2\\n]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/respace_test.py::test_reflow__sequence_respace[select  \\n  1   +   2 \\n -kwargs6-select\\n  1 + 2\\n]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/respace_test.py::test_reflow__sequence_respace[select  \\n  1   +   2 \\n -kwargs7-select  \\n  1 + 2 \\n ]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/respace_test.py::test_reflow__sequence_respace[select  \\n  1   +   2 \\n -kwargs8-select\\n  1   +   2\\n]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/respace_test.py::test_reflow__point_respace_point[select    1-1-kwargs0- -fixes_out0]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/respace_test.py::test_reflow__point_respace_point[select 1+2-3-kwargs1- -fixes_out1]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/respace_test.py::test_reflow__point_respace_point[select (1+2)-3-kwargs2--fixes_out2]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/respace_test.py::test_reflow__point_respace_point[select (  1+2)-3-kwargs3--fixes_out3]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/respace_test.py::test_reflow__point_respace_point[select\\n1-1-kwargs4-\\n-fixes_out4]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/respace_test.py::test_reflow__point_respace_point[select\\n  1-1-kwargs5-\\n  -fixes_out5]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/respace_test.py::test_reflow__point_respace_point[select  \\n  1-1-kwargs6-\\n  -fixes_out6]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/respace_test.py::test_reflow__point_respace_point[select  \\n 1-1-kwargs7- -fixes_out7]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/respace_test.py::test_reflow__point_respace_point[select ( \\n  1)-3-kwargs8--fixes_out8]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/sequence_test.py::test_reflow_sequence_from_segments[select 1 +2-ReflowBlock-raw_elems0]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/sequence_test.py::test_reflow_sequence_from_around_target[select 1 +2-both-5-+-ReflowBlock-raw_elems0]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/sequence_test.py::test_reflow_sequence_from_around_target[select 1 +2-before-5-+-ReflowBlock-raw_elems1]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/sequence_test.py::test_reflow_sequence_from_around_target[select 1 +2-after-5-+-ReflowBlock-raw_elems2]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/sequence_test.py::test_reflow_sequence_from_around_target[select 1 +2-before-6-2-ReflowBlock-raw_elems3]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/sequence_test.py::test_reflow_sequence_from_around_target[select 1 +2-both-4- -ReflowBlock-raw_elems4]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/sequence_test.py::test_reflow_sequence_from_around_target[select (1+2)-both-5-1-ReflowBlock-raw_elems5]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/sequence_test.py::test_reflow_sequence_from_around_target[     SELECT 1     -both-1-SELECT-ReflowPoint-raw_elems6]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/sequence_test.py::test_reflow_sequence_from_around_target_non_raw",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/sequence_test.py::test_reflow_sequence_respace_filter[SELECT      \\n   4-all-delete_indices0-edit_indices0]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/sequence_test.py::test_reflow_sequence_respace_filter[SELECT \\n 4, \\n 6-all-delete_indices1-edit_indices1]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/sequence_test.py::test_reflow_sequence_respace_filter[SELECT \\n 4, \\n 6  -all-delete_indices2-edit_indices2]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/sequence_test.py::test_reflow_sequence_respace_filter[SELECT \\n 4, 5,  6   ,    7 \\n 6  -newline-delete_indices3-edit_indices3]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/sequence_test.py::test_reflow_sequence_respace_filter[SELECT \\n 4, 5,  6   ,    7 \\n 6  -inline-delete_indices4-edit_indices4]",
        "status": "PASSED"
    },
    {
        "name": "test/utils/reflow/sequence_test.py::test_reflow_sequence_respace_filter[SELECT \\n 4, 5,  6    ,    7 \\n 6  -all-delete_indices5-edit_indices5]",
        "status": "PASSED"
    },
    {
        "name": "0.02s call     test/dialects/snowflake_test.py::test_snowflake_queries[AlterSessionStatementSegment-ALTER SESSION UNSET",
        "status": "ERROR"
    },
    {
        "name": "0.00s setup    test/dialects/snowflake_test.py::test_snowflake_queries[AlterSessionStatementSegment-ALTER SESSION UNSET",
        "status": "ERROR"
    },
    {
        "name": "0.00s teardown test/dialects/snowflake_test.py::test_snowflake_queries[AlterSessionStatementSegment-ALTER SESSION UNSET",
        "status": "ERROR"
    }
]