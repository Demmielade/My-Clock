[
    {
        "name": "tests/_core/test_data.py::TestPlotData::test_named_vectors",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_data.py::TestPlotData::test_named_and_given_vectors",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_data.py::TestPlotData::test_index_as_variable",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_data.py::TestPlotData::test_multiindex_as_variables",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_data.py::TestPlotData::test_int_as_variable_key",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_data.py::TestPlotData::test_int_as_variable_value",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_data.py::TestPlotData::test_tuple_as_variable_key",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_data.py::TestPlotData::test_dict_as_data",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_data.py::TestPlotData::test_vectors_various_types[series]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_data.py::TestPlotData::test_vectors_various_types[numpy]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_data.py::TestPlotData::test_vectors_various_types[list]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_data.py::TestPlotData::test_none_as_variable_value",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_data.py::TestPlotData::test_frame_and_vector_mismatched_lengths",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_data.py::TestPlotData::test_empty_data_input[arg0]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_data.py::TestPlotData::test_empty_data_input[arg1]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_data.py::TestPlotData::test_empty_data_input[arg2]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_data.py::TestPlotData::test_index_alignment_series_to_dataframe",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_data.py::TestPlotData::test_index_alignment_between_series",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_data.py::TestPlotData::test_key_not_in_data_raises",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_data.py::TestPlotData::test_key_with_no_data_raises",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_data.py::TestPlotData::test_data_vector_different_lengths_raises",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_data.py::TestPlotData::test_undefined_variables_raise",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_data.py::TestPlotData::test_contains_operation",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_data.py::TestPlotData::test_join_add_variable",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_data.py::TestPlotData::test_join_replace_variable",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_data.py::TestPlotData::test_join_remove_variable",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_data.py::TestPlotData::test_join_all_operations",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_data.py::TestPlotData::test_join_all_operations_same_data",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_data.py::TestPlotData::test_join_add_variable_new_data",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_data.py::TestPlotData::test_join_replace_variable_new_data",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_data.py::TestPlotData::test_join_add_variable_different_index",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_data.py::TestPlotData::test_join_replace_variable_different_index",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_data.py::TestPlotData::test_join_subset_data_inherit_variables",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_data.py::TestPlotData::test_join_multiple_inherits_from_orig",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_groupby.py::test_init_from_list",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_groupby.py::test_init_from_dict",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_groupby.py::test_init_requires_order",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_groupby.py::test_at_least_one_grouping_variable_required",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_groupby.py::test_agg_one_grouper",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_groupby.py::test_agg_two_groupers",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_groupby.py::test_agg_two_groupers_ordered",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_groupby.py::test_apply_no_grouper",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_groupby.py::test_apply_one_grouper",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_groupby.py::test_apply_mutate_columns",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_groupby.py::test_apply_replace_columns",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_moves.py::TestJitter::test_width",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_moves.py::TestJitter::test_x",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_moves.py::TestJitter::test_y",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_moves.py::TestJitter::test_seed",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_moves.py::TestDodge::test_default",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_moves.py::TestDodge::test_fill",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_moves.py::TestDodge::test_drop",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_moves.py::TestDodge::test_gap",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_moves.py::TestDodge::test_widths_default",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_moves.py::TestDodge::test_widths_fill",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_moves.py::TestDodge::test_widths_drop",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_moves.py::TestDodge::test_faceted_default",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_moves.py::TestDodge::test_faceted_fill",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_moves.py::TestDodge::test_faceted_drop",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_moves.py::TestDodge::test_orient",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_moves.py::TestDodge::test_single_semantic[grp2]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_moves.py::TestDodge::test_single_semantic[grp3]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_moves.py::TestDodge::test_two_semantics",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_moves.py::TestStack::test_basic",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_moves.py::TestStack::test_faceted",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_moves.py::TestStack::test_misssing_data",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_moves.py::TestStack::test_baseline_homogeneity_check",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_moves.py::TestShift::test_default",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_moves.py::TestShift::test_moves[0.3-0]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_moves.py::TestShift::test_moves[0-0.2]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_moves.py::TestShift::test_moves[0.1-0.3]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_moves.py::TestNorm::test_default_no_groups[x]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_moves.py::TestNorm::test_default_no_groups[y]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_moves.py::TestNorm::test_default_groups[x]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_moves.py::TestNorm::test_default_groups[y]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_moves.py::TestNorm::test_sum",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_moves.py::TestNorm::test_where",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_moves.py::TestNorm::test_percent",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestInit::test_empty",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestInit::test_data_only",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestInit::test_df_and_named_variables",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestInit::test_df_and_mixed_variables",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestInit::test_vector_variables_only",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestInit::test_vector_variables_no_index",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestInit::test_data_only_named",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestInit::test_positional_and_named_data",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestInit::test_positional_and_named_xy[x]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestInit::test_positional_and_named_xy[y]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestInit::test_positional_data_x_y",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestInit::test_positional_x_y",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestInit::test_positional_data_x",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestInit::test_positional_x",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestInit::test_positional_too_many",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestInit::test_unknown_keywords",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestLayerAddition::test_without_data",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestLayerAddition::test_with_new_variable_by_name",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestLayerAddition::test_with_new_variable_by_vector",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestLayerAddition::test_with_late_data_definition",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestLayerAddition::test_with_new_data_definition",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestLayerAddition::test_drop_variable",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestLayerAddition::test_stat_default",
        "status": "SKIPPED"
    },
    {
        "name": "tests/_core/test_plot.py::TestLayerAddition::test_stat_nondefault",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestLayerAddition::test_orient[x-x]",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestLayerAddition::test_orient[y-y]",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestLayerAddition::test_orient[v-x]",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestLayerAddition::test_orient[h-y]",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestLayerAddition::test_variable_list",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestLayerAddition::test_type_checks",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestScaling::test_inference",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestScaling::test_inference_from_layer_data",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestScaling::test_inference_joins",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestScaling::test_inferred_categorical_converter",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestScaling::test_explicit_categorical_converter",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestScaling::test_categorical_as_datetime",
        "status": "SKIPPED"
    },
    {
        "name": "tests/_core/test_plot.py::TestScaling::test_faceted_log_scale",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestScaling::test_paired_single_log_scale",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestScaling::test_log_scale_name",
        "status": "SKIPPED"
    },
    {
        "name": "tests/_core/test_plot.py::TestScaling::test_mark_data_log_transform_is_inverted",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestScaling::test_mark_data_log_transfrom_with_stat",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestScaling::test_mark_data_from_categorical",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestScaling::test_mark_data_from_datetime",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestScaling::test_facet_categories",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestScaling::test_facet_categories_unshared",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestScaling::test_facet_categories_single_dim_shared",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestScaling::test_pair_categories",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestScaling::test_pair_categories_shared",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestScaling::test_identity_mapping_linewidth",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestScaling::test_pair_single_coordinate_stat_orient",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestScaling::test_inferred_nominal_passed_to_stat",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestScaling::test_identity_mapping_color_strings",
        "status": "SKIPPED"
    },
    {
        "name": "tests/_core/test_plot.py::TestScaling::test_identity_mapping_color_tuples",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestScaling::test_undefined_variable_raises",
        "status": "SKIPPED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPlotting::test_matplotlib_object_creation",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPlotting::test_empty",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPlotting::test_single_split_single_layer",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPlotting::test_single_split_multi_layer",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPlotting::test_one_grouping_variable[color]",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPlotting::test_one_grouping_variable[group]",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPlotting::test_two_grouping_variables",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPlotting::test_facets_no_subgroups",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPlotting::test_facets_one_subgroup",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPlotting::test_layer_specific_facet_disabling",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPlotting::test_paired_variables",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPlotting::test_paired_one_dimension",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPlotting::test_paired_variables_one_subset",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPlotting::test_paired_and_faceted",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPlotting::test_movement",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPlotting::test_movement_log_scale",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPlotting::test_multi_move",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPlotting::test_multi_move_with_pairing",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPlotting::test_methods_clone",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPlotting::test_default_is_no_pyplot",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPlotting::test_with_pyplot",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPlotting::test_show",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPlotting::test_png_representation",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPlotting::test_save",
        "status": "SKIPPED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPlotting::test_on_axes",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPlotting::test_on_figure[True]",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPlotting::test_on_figure[False]",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPlotting::test_on_subfigure[True]",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPlotting::test_on_subfigure[False]",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPlotting::test_on_type_check",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPlotting::test_on_axes_with_subplots_error",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPlotting::test_axis_labels_from_constructor",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPlotting::test_axis_labels_from_layer",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPlotting::test_axis_labels_are_first_name",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestFacetInterface::test_1d[row]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestFacetInterface::test_1d_as_vector[row]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestFacetInterface::test_1d_with_order[row-reverse]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestFacetInterface::test_1d_with_order[col-reverse]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestFacetInterface::test_1d[col]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestFacetInterface::test_1d_as_vector[col]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestFacetInterface::test_1d_with_order[col-subset]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestFacetInterface::test_1d_with_order[row-subset]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestFacetInterface::test_2d_with_order[subset]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestFacetInterface::test_1d_with_order[col-expand]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestFacetInterface::test_1d_with_order[row-expand]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestFacetInterface::test_2d_with_order[expand]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestFacetInterface::test_2d_with_order[reverse]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestFacetInterface::test_2d",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestFacetInterface::test_axis_sharing",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestFacetInterface::test_col_wrapping",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestFacetInterface::test_row_wrapping",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPairInterface::test_all_numeric[list]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPairInterface::test_all_numeric[array]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPairInterface::test_all_numeric[Series]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPairInterface::test_all_numeric[Index]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPairInterface::test_single_variable_key_raises",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPairInterface::test_single_dimension[x]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPairInterface::test_single_dimension[y]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPairInterface::test_non_cross",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPairInterface::test_with_no_variables",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPairInterface::test_with_facets",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPairInterface::test_error_on_facet_overlap[variables0]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPairInterface::test_error_on_facet_overlap[variables1]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPairInterface::test_error_on_wrap_overlap[variables0]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPairInterface::test_error_on_wrap_overlap[variables1]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPairInterface::test_axis_sharing",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPairInterface::test_axis_sharing_with_facets",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPairInterface::test_x_wrapping",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPairInterface::test_y_wrapping",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPairInterface::test_non_cross_wrapping",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPairInterface::test_orient_inference",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPairInterface::test_computed_coordinate_orient_inference",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestPairInterface::test_two_variables_single_order_error",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestLabelVisibility::test_single_subplot",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestLabelVisibility::test_1d_column[facet_kws0-pair_kws0]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestLabelVisibility::test_1d_column[facet_kws1-pair_kws1]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestLabelVisibility::test_1d_row[facet_kws0-pair_kws0]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestLabelVisibility::test_1d_row[facet_kws1-pair_kws1]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestLabelVisibility::test_1d_column_wrapped",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestLabelVisibility::test_1d_row_wrapped",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestLabelVisibility::test_1d_column_wrapped_non_cross",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestLabelVisibility::test_2d",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestLabelVisibility::test_2d_unshared",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_plot.py::TestLegend::test_single_layer_single_variable",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestLegend::test_single_layer_common_variable",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestLegend::test_single_layer_common_unnamed_variable",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestLegend::test_single_layer_multi_variable",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestLegend::test_multi_layer_single_variable",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestLegend::test_multi_layer_multi_variable",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestLegend::test_multi_layer_different_artists",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestLegend::test_identity_scale_ignored",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_plot.py::TestLegend::test_suppression_in_add_method",
        "status": "FAILED"
    },
    {
        "name": "tests/_core/test_properties.py::TestCoordinate::test_bad_scale_arg_str",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestCoordinate::test_bad_scale_arg_type",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestColor::test_nominal_default_palette",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestColor::test_nominal_default_palette_large",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestColor::test_nominal_named_palette",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestColor::test_nominal_list_palette",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestColor::test_nominal_dict_palette",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestColor::test_nominal_dict_with_missing_keys",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestColor::test_nominal_list_too_short",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestColor::test_nominal_list_too_long",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestColor::test_continuous_default_palette",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestColor::test_continuous_named_palette",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestColor::test_continuous_tuple_palette",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestColor::test_continuous_callable_palette",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestColor::test_continuous_missing",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestColor::test_bad_scale_values_continuous",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestColor::test_bad_scale_values_nominal",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestColor::test_bad_inference_arg",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestColor::test_default[cat-Nominal]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestColor::test_default[num-Continuous]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestColor::test_default_numeric_data_category_dtype",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestColor::test_default_binary_data",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestColor::test_inference[viridis-cat-Nominal]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestColor::test_inference[viridis-num-Continuous]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestColor::test_inference[muted-num-Nominal]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestColor::test_inference[values3-num-Nominal]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestColor::test_inference[values4-num-Nominal]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestColor::test_inference[values5-num-Continuous]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestColor::test_inference[values6-cat-Nominal]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestColor::test_inference[values7-num-Continuous]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestColor::test_inference_binary_data",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestColor::test_standardization",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestMarker::test_default[cat]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestMarker::test_default[num]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestMarker::test_inference_list[cat]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestMarker::test_inference_list[num]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestMarker::test_inference_dict[cat]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestMarker::test_inference_dict[num]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestMarker::test_dict_missing",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestMarker::test_mapping_default[cat]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestMarker::test_mapping_default[num]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestMarker::test_mapping_from_list[cat]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestMarker::test_mapping_from_list[num]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestMarker::test_mapping_from_dict[cat]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestMarker::test_mapping_from_dict[num]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestMarker::test_mapping_with_null_value",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestMarker::test_unique_default_large_n",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestMarker::test_bad_scale_values",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestLineStyle::test_default[cat]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestLineStyle::test_default[num]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestLineStyle::test_inference_list[cat]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestLineStyle::test_inference_list[num]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestLineStyle::test_inference_dict[cat]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestLineStyle::test_inference_dict[num]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestLineStyle::test_dict_missing",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestLineStyle::test_mapping_default[cat]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestLineStyle::test_mapping_default[num]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestLineStyle::test_mapping_from_list[cat]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestLineStyle::test_mapping_from_list[num]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestLineStyle::test_mapping_from_dict[cat]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestLineStyle::test_mapping_from_dict[num]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestLineStyle::test_mapping_with_null_value",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestLineStyle::test_unique_default_large_n",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestLineStyle::test_bad_scale_values",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestLineStyle::test_bad_type",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestLineStyle::test_bad_style",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestLineStyle::test_bad_dashes",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestFill::test_default[cat]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestFill::test_default[num]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestFill::test_default[bool]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestFill::test_inference_list[cat]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestFill::test_inference_list[num]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestFill::test_inference_list[bool]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestFill::test_inference_dict[cat]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestFill::test_inference_dict[num]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestFill::test_inference_dict[bool]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestFill::test_mapping_categorical_data",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestFill::test_mapping_numeric_data",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestFill::test_mapping_list",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestFill::test_mapping_truthy_list",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestFill::test_mapping_dict",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestFill::test_cycle_warning",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestFill::test_values_error",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestAlpha::test_default[cat-Nominal]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestAlpha::test_default[num-Continuous]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestAlpha::test_inference[arg0-cat-Nominal]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestAlpha::test_inference[arg1-num-Continuous]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestAlpha::test_inference[arg2-cat-Nominal]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestAlpha::test_inference[arg3-num-Nominal]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestAlpha::test_inference[arg4-cat-Nominal]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestAlpha::test_inference[arg5-num-Nominal]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestAlpha::test_mapped_interval_numeric",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestAlpha::test_mapped_interval_categorical",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestAlpha::test_bad_scale_values_numeric_data",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestAlpha::test_bad_scale_values_categorical_data",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestLineWidth::test_default[cat-Nominal]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestLineWidth::test_default[num-Continuous]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestLineWidth::test_inference[arg0-cat-Nominal]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestLineWidth::test_inference[arg1-num-Continuous]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestLineWidth::test_inference[arg2-cat-Nominal]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestLineWidth::test_inference[arg3-num-Nominal]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestLineWidth::test_inference[arg4-cat-Nominal]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestLineWidth::test_inference[arg5-num-Nominal]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestLineWidth::test_mapped_interval_numeric",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestLineWidth::test_mapped_interval_categorical",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestLineWidth::test_bad_scale_values_numeric_data",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestLineWidth::test_bad_scale_values_categorical_data",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestLineWidth::test_rcparam_default",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestEdgeWidth::test_default[cat-Nominal]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestEdgeWidth::test_default[num-Continuous]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestEdgeWidth::test_inference[arg0-cat-Nominal]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestEdgeWidth::test_inference[arg1-num-Continuous]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestEdgeWidth::test_inference[arg2-cat-Nominal]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestEdgeWidth::test_inference[arg3-num-Nominal]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestEdgeWidth::test_inference[arg4-cat-Nominal]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestEdgeWidth::test_inference[arg5-num-Nominal]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestEdgeWidth::test_mapped_interval_numeric",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestEdgeWidth::test_mapped_interval_categorical",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestEdgeWidth::test_bad_scale_values_numeric_data",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestEdgeWidth::test_bad_scale_values_categorical_data",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestEdgeWidth::test_rcparam_default",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestPointSize::test_default[cat-Nominal]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestPointSize::test_default[num-Continuous]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestPointSize::test_inference[arg0-cat-Nominal]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestPointSize::test_inference[arg1-num-Continuous]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestPointSize::test_inference[arg2-cat-Nominal]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestPointSize::test_inference[arg3-num-Nominal]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestPointSize::test_inference[arg4-cat-Nominal]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestPointSize::test_inference[arg5-num-Nominal]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestPointSize::test_mapped_interval_numeric",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestPointSize::test_mapped_interval_categorical",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestPointSize::test_bad_scale_values_numeric_data",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestPointSize::test_bad_scale_values_categorical_data",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestPointSize::test_areal_scaling_numeric",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_properties.py::TestPointSize::test_areal_scaling_categorical",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_rules.py::test_vartype_object",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_rules.py::test_variable_type",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_rules.py::test_categorical_order",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestContinuous::test_coordinate_defaults",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestContinuous::test_coordinate_transform",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestContinuous::test_coordinate_transform_with_parameter",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestContinuous::test_interval_defaults",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestContinuous::test_interval_with_range",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestContinuous::test_interval_with_norm",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestContinuous::test_interval_with_range_norm_and_transform",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestContinuous::test_color_defaults",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestContinuous::test_color_named_values",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestContinuous::test_color_tuple_values",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestContinuous::test_color_callable_values",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestContinuous::test_color_with_norm",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestContinuous::test_color_with_transform",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestContinuous::test_tick_locator",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestContinuous::test_tick_locator_input_check",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestContinuous::test_tick_upto",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestContinuous::test_tick_every",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestContinuous::test_tick_every_between",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestContinuous::test_tick_at",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestContinuous::test_tick_count",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestContinuous::test_tick_count_between",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestContinuous::test_tick_minor",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestContinuous::test_log_tick_default",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestContinuous::test_log_tick_upto",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestContinuous::test_log_tick_count",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestContinuous::test_log_tick_every",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestNominal::test_coordinate_defaults",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestNominal::test_coordinate_with_order",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestNominal::test_coordinate_with_subset_order",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestNominal::test_coordinate_axis",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestNominal::test_coordinate_axis_with_order",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestNominal::test_coordinate_axis_with_subset_order",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestNominal::test_coordinate_axis_with_category_dtype",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestNominal::test_coordinate_numeric_data",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestNominal::test_coordinate_numeric_data_with_order",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestNominal::test_color_defaults",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestNominal::test_color_named_palette",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestNominal::test_color_list_palette",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestNominal::test_color_dict_palette",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestNominal::test_color_numeric_data",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestNominal::test_color_numeric_with_order_subset",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestNominal::test_color_numeric_int_float_mix",
        "status": "SKIPPED"
    },
    {
        "name": "tests/_core/test_scales.py::TestNominal::test_color_alpha_in_palette",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestNominal::test_color_unknown_palette",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestNominal::test_object_defaults",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestNominal::test_object_list",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestNominal::test_object_dict",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestNominal::test_object_order",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestNominal::test_object_order_subset",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestNominal::test_objects_that_are_weird",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestNominal::test_alpha_default",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestNominal::test_fill",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestNominal::test_fill_dict",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestNominal::test_fill_nunique_warning",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestNominal::test_interval_defaults",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestNominal::test_interval_tuple",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestNominal::test_interval_tuple_numeric",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestNominal::test_interval_list",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestNominal::test_interval_dict",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestNominal::test_interval_with_transform",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestTemporal::test_coordinate_defaults",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestTemporal::test_interval_defaults",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestTemporal::test_interval_with_range",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestTemporal::test_interval_with_norm",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestTemporal::test_color_defaults",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestTemporal::test_color_named_values",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestTemporal::test_coordinate_axis",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestTemporal::test_concise_format",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_scales.py::TestTemporal::test_tick_upto",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_subplots.py::TestSpecificationChecks::test_both_facets_and_wrap",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_subplots.py::TestSpecificationChecks::test_cross_xy_pairing_and_wrap",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_subplots.py::TestSpecificationChecks::test_col_facets_and_x_pairing",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_subplots.py::TestSpecificationChecks::test_wrapped_columns_and_y_pairing",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_subplots.py::TestSpecificationChecks::test_wrapped_x_pairing_and_facetd_rows",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_subplots.py::TestSubplotSpec::test_single_subplot",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_subplots.py::TestSubplotSpec::test_single_facet",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_subplots.py::TestSubplotSpec::test_two_facets",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_subplots.py::TestSubplotSpec::test_col_facet_wrapped",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_subplots.py::TestSubplotSpec::test_row_facet_wrapped",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_subplots.py::TestSubplotSpec::test_col_facet_wrapped_single_row",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_subplots.py::TestSubplotSpec::test_x_and_y_paired",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_subplots.py::TestSubplotSpec::test_x_paired",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_subplots.py::TestSubplotSpec::test_y_paired",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_subplots.py::TestSubplotSpec::test_x_paired_and_wrapped",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_subplots.py::TestSubplotSpec::test_y_paired_and_wrapped",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_subplots.py::TestSubplotSpec::test_col_faceted_y_paired",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_subplots.py::TestSubplotSpec::test_row_faceted_x_paired",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_subplots.py::TestSubplotSpec::test_x_any_y_paired_non_cross",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_subplots.py::TestSubplotSpec::test_x_any_y_paired_non_cross_wrapped",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_subplots.py::TestSubplotSpec::test_forced_unshared_facets",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_subplots.py::TestSubplotElements::test_single_subplot",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_subplots.py::TestSubplotElements::test_single_facet_dim[col]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_subplots.py::TestSubplotElements::test_single_facet_dim[row]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_subplots.py::TestSubplotElements::test_single_facet_dim_wrapped[col]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_subplots.py::TestSubplotElements::test_single_facet_dim_wrapped[row]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_subplots.py::TestSubplotElements::test_both_facet_dims",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_subplots.py::TestSubplotElements::test_single_paired_var[x]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_subplots.py::TestSubplotElements::test_single_paired_var[y]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_subplots.py::TestSubplotElements::test_single_paired_var_wrapped[x]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_subplots.py::TestSubplotElements::test_single_paired_var_wrapped[y]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_subplots.py::TestSubplotElements::test_both_paired_variables",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_subplots.py::TestSubplotElements::test_both_paired_non_cross",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_subplots.py::TestSubplotElements::test_one_facet_one_paired[col-y]",
        "status": "PASSED"
    },
    {
        "name": "tests/_core/test_subplots.py::TestSubplotElements::test_one_facet_one_paired[row-x]",
        "status": "PASSED"
    },
    {
        "name": "tests/_marks/test_area.py::TestAreaMarks::test_single_defaults",
        "status": "FAILED"
    },
    {
        "name": "tests/_marks/test_area.py::TestAreaMarks::test_direct_parameters",
        "status": "FAILED"
    },
    {
        "name": "tests/_marks/test_area.py::TestAreaMarks::test_mapped",
        "status": "FAILED"
    },
    {
        "name": "tests/_marks/test_area.py::TestAreaMarks::test_ribbon",
        "status": "FAILED"
    },
    {
        "name": "tests/_marks/test_bars.py::TestBar::test_categorical_positions_vertical",
        "status": "FAILED"
    },
    {
        "name": "tests/_marks/test_bars.py::TestBar::test_categorical_positions_horizontal",
        "status": "FAILED"
    },
    {
        "name": "tests/_marks/test_bars.py::TestBar::test_numeric_positions_vertical",
        "status": "FAILED"
    },
    {
        "name": "tests/_marks/test_bars.py::TestBar::test_numeric_positions_horizontal",
        "status": "FAILED"
    },
    {
        "name": "tests/_marks/test_bars.py::TestBar::test_direct_properties",
        "status": "FAILED"
    },
    {
        "name": "tests/_marks/test_bars.py::TestBar::test_mapped_properties",
        "status": "FAILED"
    },
    {
        "name": "tests/_marks/test_base.py::TestMappable::test_repr",
        "status": "PASSED"
    },
    {
        "name": "tests/_marks/test_base.py::TestMappable::test_input_checks",
        "status": "PASSED"
    },
    {
        "name": "tests/_marks/test_base.py::TestMappable::test_value",
        "status": "PASSED"
    },
    {
        "name": "tests/_marks/test_base.py::TestMappable::test_default",
        "status": "PASSED"
    },
    {
        "name": "tests/_marks/test_base.py::TestMappable::test_rcparam",
        "status": "PASSED"
    },
    {
        "name": "tests/_marks/test_base.py::TestMappable::test_depends",
        "status": "PASSED"
    },
    {
        "name": "tests/_marks/test_base.py::TestMappable::test_mapped",
        "status": "PASSED"
    },
    {
        "name": "tests/_marks/test_base.py::TestMappable::test_color",
        "status": "PASSED"
    },
    {
        "name": "tests/_marks/test_base.py::TestMappable::test_color_mapped_alpha",
        "status": "PASSED"
    },
    {
        "name": "tests/_marks/test_base.py::TestMappable::test_color_scaled_as_strings",
        "status": "PASSED"
    },
    {
        "name": "tests/_marks/test_base.py::TestMappable::test_fillcolor",
        "status": "PASSED"
    },
    {
        "name": "tests/_marks/test_lines.py::TestPath::test_xy_data",
        "status": "FAILED"
    },
    {
        "name": "tests/_marks/test_lines.py::TestPath::test_shared_colors_direct",
        "status": "FAILED"
    },
    {
        "name": "tests/_marks/test_lines.py::TestPath::test_separate_colors_direct",
        "status": "FAILED"
    },
    {
        "name": "tests/_marks/test_lines.py::TestPath::test_shared_colors_mapped",
        "status": "FAILED"
    },
    {
        "name": "tests/_marks/test_lines.py::TestPath::test_separate_colors_mapped",
        "status": "FAILED"
    },
    {
        "name": "tests/_marks/test_lines.py::TestPath::test_color_with_alpha",
        "status": "FAILED"
    },
    {
        "name": "tests/_marks/test_lines.py::TestPath::test_color_and_alpha",
        "status": "FAILED"
    },
    {
        "name": "tests/_marks/test_lines.py::TestPath::test_other_props_direct",
        "status": "FAILED"
    },
    {
        "name": "tests/_marks/test_lines.py::TestPath::test_other_props_mapped",
        "status": "FAILED"
    },
    {
        "name": "tests/_marks/test_lines.py::TestLine::test_xy_data",
        "status": "FAILED"
    },
    {
        "name": "tests/_marks/test_lines.py::TestPaths::test_xy_data",
        "status": "FAILED"
    },
    {
        "name": "tests/_marks/test_lines.py::TestPaths::test_props_direct",
        "status": "FAILED"
    },
    {
        "name": "tests/_marks/test_lines.py::TestPaths::test_props_mapped",
        "status": "FAILED"
    },
    {
        "name": "tests/_marks/test_lines.py::TestPaths::test_color_with_alpha",
        "status": "FAILED"
    },
    {
        "name": "tests/_marks/test_lines.py::TestPaths::test_color_and_alpha",
        "status": "FAILED"
    },
    {
        "name": "tests/_marks/test_lines.py::TestLines::test_xy_data",
        "status": "FAILED"
    },
    {
        "name": "tests/_marks/test_scatter.py::TestScatter::test_simple",
        "status": "FAILED"
    },
    {
        "name": "tests/_marks/test_scatter.py::TestScatter::test_color_direct",
        "status": "FAILED"
    },
    {
        "name": "tests/_marks/test_scatter.py::TestScatter::test_color_mapped",
        "status": "FAILED"
    },
    {
        "name": "tests/_marks/test_scatter.py::TestScatter::test_fill",
        "status": "FAILED"
    },
    {
        "name": "tests/_marks/test_scatter.py::TestScatter::test_pointsize",
        "status": "FAILED"
    },
    {
        "name": "tests/_marks/test_scatter.py::TestScatter::test_stroke",
        "status": "FAILED"
    },
    {
        "name": "tests/_marks/test_scatter.py::TestScatter::test_filled_unfilled_mix",
        "status": "FAILED"
    },
    {
        "name": "tests/_marks/test_scatter.py::TestDot::test_simple",
        "status": "FAILED"
    },
    {
        "name": "tests/_marks/test_scatter.py::TestDot::test_filled_unfilled_mix",
        "status": "FAILED"
    },
    {
        "name": "tests/_marks/test_scatter.py::TestDot::test_missing_coordinate_data",
        "status": "FAILED"
    },
    {
        "name": "tests/_marks/test_scatter.py::TestDot::test_missing_semantic_data[color]",
        "status": "FAILED"
    },
    {
        "name": "tests/_marks/test_scatter.py::TestDot::test_missing_semantic_data[fill]",
        "status": "FAILED"
    },
    {
        "name": "tests/_marks/test_scatter.py::TestDot::test_missing_semantic_data[marker]",
        "status": "FAILED"
    },
    {
        "name": "tests/_marks/test_scatter.py::TestDot::test_missing_semantic_data[pointsize]",
        "status": "FAILED"
    },
    {
        "name": "tests/_stats/test_aggregation.py::TestAgg::test_default",
        "status": "PASSED"
    },
    {
        "name": "tests/_stats/test_aggregation.py::TestAgg::test_default_multi",
        "status": "PASSED"
    },
    {
        "name": "tests/_stats/test_aggregation.py::TestAgg::test_func[max]",
        "status": "PASSED"
    },
    {
        "name": "tests/_stats/test_aggregation.py::TestAgg::test_func[<lambda>]",
        "status": "PASSED"
    },
    {
        "name": "tests/_stats/test_histograms.py::TestHist::test_string_bins",
        "status": "PASSED"
    },
    {
        "name": "tests/_stats/test_histograms.py::TestHist::test_int_bins",
        "status": "PASSED"
    },
    {
        "name": "tests/_stats/test_histograms.py::TestHist::test_array_bins",
        "status": "PASSED"
    },
    {
        "name": "tests/_stats/test_histograms.py::TestHist::test_binwidth",
        "status": "PASSED"
    },
    {
        "name": "tests/_stats/test_histograms.py::TestHist::test_binrange",
        "status": "PASSED"
    },
    {
        "name": "tests/_stats/test_histograms.py::TestHist::test_discrete_bins",
        "status": "PASSED"
    },
    {
        "name": "tests/_stats/test_histograms.py::TestHist::test_discrete_bins_from_nominal_scale",
        "status": "PASSED"
    },
    {
        "name": "tests/_stats/test_histograms.py::TestHist::test_count_stat",
        "status": "PASSED"
    },
    {
        "name": "tests/_stats/test_histograms.py::TestHist::test_probability_stat",
        "status": "PASSED"
    },
    {
        "name": "tests/_stats/test_histograms.py::TestHist::test_proportion_stat",
        "status": "PASSED"
    },
    {
        "name": "tests/_stats/test_histograms.py::TestHist::test_percent_stat",
        "status": "PASSED"
    },
    {
        "name": "tests/_stats/test_histograms.py::TestHist::test_density_stat",
        "status": "PASSED"
    },
    {
        "name": "tests/_stats/test_histograms.py::TestHist::test_frequency_stat",
        "status": "PASSED"
    },
    {
        "name": "tests/_stats/test_histograms.py::TestHist::test_cumulative_count",
        "status": "PASSED"
    },
    {
        "name": "tests/_stats/test_histograms.py::TestHist::test_cumulative_proportion",
        "status": "PASSED"
    },
    {
        "name": "tests/_stats/test_histograms.py::TestHist::test_cumulative_density",
        "status": "PASSED"
    },
    {
        "name": "tests/_stats/test_histograms.py::TestHist::test_common_norm_default",
        "status": "PASSED"
    },
    {
        "name": "tests/_stats/test_histograms.py::TestHist::test_common_norm_false",
        "status": "PASSED"
    },
    {
        "name": "tests/_stats/test_histograms.py::TestHist::test_common_norm_subset",
        "status": "PASSED"
    },
    {
        "name": "tests/_stats/test_histograms.py::TestHist::test_common_bins_default",
        "status": "PASSED"
    },
    {
        "name": "tests/_stats/test_histograms.py::TestHist::test_common_bins_false",
        "status": "PASSED"
    },
    {
        "name": "tests/_stats/test_histograms.py::TestHist::test_common_bins_subset",
        "status": "PASSED"
    },
    {
        "name": "tests/_stats/test_histograms.py::TestHist::test_histogram_single",
        "status": "PASSED"
    },
    {
        "name": "tests/_stats/test_histograms.py::TestHist::test_histogram_multiple",
        "status": "PASSED"
    },
    {
        "name": "tests/_stats/test_regression.py::TestPolyFit::test_no_grouper",
        "status": "PASSED"
    },
    {
        "name": "tests/_stats/test_regression.py::TestPolyFit::test_one_grouper",
        "status": "PASSED"
    },
    {
        "name": "tests/test_algorithms.py::test_bootstrap",
        "status": "PASSED"
    },
    {
        "name": "tests/test_algorithms.py::test_bootstrap_length",
        "status": "PASSED"
    },
    {
        "name": "tests/test_algorithms.py::test_bootstrap_range",
        "status": "PASSED"
    },
    {
        "name": "tests/test_algorithms.py::test_bootstrap_multiarg",
        "status": "PASSED"
    },
    {
        "name": "tests/test_algorithms.py::test_bootstrap_axis",
        "status": "PASSED"
    },
    {
        "name": "tests/test_algorithms.py::test_bootstrap_seed",
        "status": "PASSED"
    },
    {
        "name": "tests/test_algorithms.py::test_bootstrap_ols",
        "status": "PASSED"
    },
    {
        "name": "tests/test_algorithms.py::test_bootstrap_units",
        "status": "PASSED"
    },
    {
        "name": "tests/test_algorithms.py::test_bootstrap_arglength",
        "status": "PASSED"
    },
    {
        "name": "tests/test_algorithms.py::test_bootstrap_string_func",
        "status": "PASSED"
    },
    {
        "name": "tests/test_algorithms.py::test_bootstrap_reproducibility",
        "status": "PASSED"
    },
    {
        "name": "tests/test_algorithms.py::test_seed_new",
        "status": "PASSED"
    },
    {
        "name": "tests/test_algorithms.py::test_seed_old[None-None-False]",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_algorithms.py::test_seed_old[seed11-seed21-True]",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_algorithms.py::test_seed_old[seed12-seed22-False]",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_algorithms.py::test_seed_old[100-100-True]",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_algorithms.py::test_seed_old[100-200-False]",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_algorithms.py::test_bad_seed_old",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_algorithms.py::test_nanaware_func_auto",
        "status": "PASSED"
    },
    {
        "name": "tests/test_algorithms.py::test_nanaware_func_warning",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestFacetGrid::test_self_data",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestFacetGrid::test_self_figure",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestFacetGrid::test_self_axes",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestFacetGrid::test_axes_array_size",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestFacetGrid::test_single_axes",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestFacetGrid::test_col_wrap",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestFacetGrid::test_normal_axes",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestFacetGrid::test_wrapped_axes",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestFacetGrid::test_axes_dict",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestFacetGrid::test_figure_size",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestFacetGrid::test_figure_size_with_legend",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestFacetGrid::test_legend_data",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestFacetGrid::test_legend_data_missing_level",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestFacetGrid::test_get_boolean_legend_data",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestFacetGrid::test_legend_tuples",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestFacetGrid::test_legend_options",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestFacetGrid::test_legendout_with_colwrap",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestFacetGrid::test_legend_tight_layout",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestFacetGrid::test_subplot_kws",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestFacetGrid::test_gridspec_kws",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestFacetGrid::test_gridspec_kws_col_wrap",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestFacetGrid::test_data_generator",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestFacetGrid::test_map",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestFacetGrid::test_map_dataframe",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestFacetGrid::test_set",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestFacetGrid::test_set_titles",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestFacetGrid::test_set_titles_margin_titles",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestFacetGrid::test_set_ticklabels",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestFacetGrid::test_set_axis_labels",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestFacetGrid::test_axis_lims",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestFacetGrid::test_data_orders",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestFacetGrid::test_palette",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestFacetGrid::test_hue_kws",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestFacetGrid::test_dropna",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestFacetGrid::test_categorical_column_missing_categories",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestFacetGrid::test_categorical_warning",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestFacetGrid::test_refline",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestPairGrid::test_self_data",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestPairGrid::test_ignore_datelike_data",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestPairGrid::test_self_figure",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestPairGrid::test_self_axes",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestPairGrid::test_default_axes",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestPairGrid::test_specific_square_axes[vars0]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestPairGrid::test_specific_square_axes[vars1]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestPairGrid::test_remove_hue_from_default",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestPairGrid::test_specific_nonsquare_axes[x_vars0-y_vars0]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestPairGrid::test_specific_nonsquare_axes[x_vars1-z]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestPairGrid::test_specific_nonsquare_axes[x_vars2-y_vars2]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestPairGrid::test_corner",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestPairGrid::test_size",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestPairGrid::test_empty_grid",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestPairGrid::test_map",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestPairGrid::test_map_nonsquare",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestPairGrid::test_map_lower",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestPairGrid::test_map_upper",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestPairGrid::test_map_mixed_funcsig",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestPairGrid::test_map_diag",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestPairGrid::test_map_diag_rectangular",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestPairGrid::test_map_diag_color",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestPairGrid::test_map_diag_palette",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestPairGrid::test_map_diag_and_offdiag",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestPairGrid::test_diag_sharey",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestPairGrid::test_map_diag_matplotlib",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestPairGrid::test_palette",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestPairGrid::test_hue_kws",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestPairGrid::test_hue_order",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestPairGrid::test_hue_order_missing_level",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestPairGrid::test_hue_in_map",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestPairGrid::test_nondefault_index",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestPairGrid::test_dropna[scatterplot]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestPairGrid::test_dropna[scatter]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestPairGrid::test_histplot_legend",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestPairGrid::test_pairplot",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestPairGrid::test_pairplot_reg",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestPairGrid::test_pairplot_reg_hue",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestPairGrid::test_pairplot_diag_kde",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestPairGrid::test_pairplot_kde",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestPairGrid::test_pairplot_hist",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestPairGrid::test_pairplot_markers",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestPairGrid::test_corner_despine",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestPairGrid::test_corner_set",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestPairGrid::test_legend",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestJointGrid::test_margin_grid_from_lists",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestJointGrid::test_margin_grid_from_arrays",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestJointGrid::test_margin_grid_from_series",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestJointGrid::test_margin_grid_from_dataframe",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestJointGrid::test_margin_grid_from_dataframe_bad_variable",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestJointGrid::test_margin_grid_axis_labels",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestJointGrid::test_dropna",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestJointGrid::test_axlims",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestJointGrid::test_marginal_ticks",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestJointGrid::test_bivariate_plot",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestJointGrid::test_univariate_plot",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestJointGrid::test_univariate_plot_distplot",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestJointGrid::test_univariate_plot_matplotlib",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestJointGrid::test_plot",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestJointGrid::test_space",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestJointGrid::test_hue[True]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestJointGrid::test_hue[False]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestJointGrid::test_refline",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestJointPlot::test_scatter",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestJointPlot::test_scatter_hue",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestJointPlot::test_reg",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestJointPlot::test_resid",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestJointPlot::test_hist",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestJointPlot::test_hex",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestJointPlot::test_kde",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestJointPlot::test_kde_hue",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestJointPlot::test_color",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestJointPlot::test_palette",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestJointPlot::test_hex_customise",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestJointPlot::test_bad_kind",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestJointPlot::test_unsupported_hue_kind",
        "status": "PASSED"
    },
    {
        "name": "tests/test_axisgrid.py::TestJointPlot::test_leaky_dict",
        "status": "FAILED"
    },
    {
        "name": "tests/test_axisgrid.py::TestJointPlot::test_distplot_kwarg_warning",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestCategoricalPlotterNew::test_axis_labels[catplot-kwargs0]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestCategoricalPlotterNew::test_axis_labels[catplot-kwargs1]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestCategoricalPlotterNew::test_axis_labels[catplot-kwargs2]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestCategoricalPlotterNew::test_axis_labels[catplot-kwargs3]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestCategoricalPlotterNew::test_axis_labels[stripplot-kwargs4]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestCategoricalPlotterNew::test_axis_labels[stripplot-kwargs5]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestCategoricalPlotterNew::test_axis_labels[stripplot-kwargs6]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestCategoricalPlotterNew::test_axis_labels[stripplot-kwargs7]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestCategoricalPlotterNew::test_axis_labels[swarmplot-kwargs8]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestCategoricalPlotterNew::test_axis_labels[swarmplot-kwargs9]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestCategoricalPlotterNew::test_axis_labels[swarmplot-kwargs10]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestCategoricalPlotterNew::test_axis_labels[swarmplot-kwargs11]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestCategoricalPlotterNew::test_empty[catplot]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestCategoricalPlotterNew::test_empty[stripplot]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestCategoricalPlotterNew::test_empty[swarmplot]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestCategoricalPlotterNew::test_redundant_hue_backcompat",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestCategoricalPlotter::test_wide_df_data",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestCategoricalPlotter::test_1d_input_data",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestCategoricalPlotter::test_2d_input_data",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestCategoricalPlotter::test_3d_input_data",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestCategoricalPlotter::test_list_of_array_input_data",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestCategoricalPlotter::test_wide_array_input_data",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestCategoricalPlotter::test_single_long_direct_inputs",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestCategoricalPlotter::test_single_long_indirect_inputs",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestCategoricalPlotter::test_longform_groupby",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestCategoricalPlotter::test_input_validation",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestCategoricalPlotter::test_order",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestCategoricalPlotter::test_hue_order",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestCategoricalPlotter::test_plot_units",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestCategoricalPlotter::test_default_palettes",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestCategoricalPlotter::test_default_palette_with_many_levels",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestCategoricalPlotter::test_specific_color",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestCategoricalPlotter::test_specific_palette",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestCategoricalPlotter::test_dict_as_palette",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestCategoricalPlotter::test_palette_desaturation",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestCategoricalStatPlotter::test_no_bootstrappig",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestCategoricalStatPlotter::test_single_layer_stats",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestCategoricalStatPlotter::test_single_layer_stats_with_units",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestCategoricalStatPlotter::test_single_layer_stats_with_missing_data",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestCategoricalStatPlotter::test_nested_stats",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestCategoricalStatPlotter::test_bootstrap_seed",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestCategoricalStatPlotter::test_nested_stats_with_units",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestCategoricalStatPlotter::test_nested_stats_with_missing_data",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestCategoricalStatPlotter::test_sd_error_bars",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestCategoricalStatPlotter::test_nested_sd_error_bars",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestCategoricalStatPlotter::test_draw_cis",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestBoxPlotter::test_nested_width",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestBoxPlotter::test_hue_offsets",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestBoxPlotter::test_axes_data",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestBoxPlotter::test_box_colors",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestBoxPlotter::test_draw_missing_boxes",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestBoxPlotter::test_missing_data",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestBoxPlotter::test_unaligned_index",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestBoxPlotter::test_boxplots",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestBoxPlotter::test_axes_annotation",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestViolinPlotter::test_split_error",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestViolinPlotter::test_no_observations",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestViolinPlotter::test_single_observation",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestViolinPlotter::test_dwidth",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestViolinPlotter::test_scale_area",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestViolinPlotter::test_scale_width",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestViolinPlotter::test_scale_count",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestViolinPlotter::test_bad_scale",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestViolinPlotter::test_kde_fit",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestViolinPlotter::test_draw_to_density",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestViolinPlotter::test_draw_single_observations",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestViolinPlotter::test_draw_box_lines",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestViolinPlotter::test_draw_quartiles",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestViolinPlotter::test_draw_points",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestViolinPlotter::test_draw_sticks",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestViolinPlotter::test_validate_inner",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestViolinPlotter::test_draw_violinplots",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestViolinPlotter::test_draw_violinplots_no_observations",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestViolinPlotter::test_draw_violinplots_single_observations",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestViolinPlotter::test_violinplots",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestViolinPlotter::test_split_one_each",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_two_calls",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_color",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_supplied_color_array",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_wide[h-dataframe]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_wide[h-dict]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_wide[v-dataframe]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_wide[v-dict]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_flat[h]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_flat[v]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_positions[variables0-None]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_positions[variables1-None]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_positions[variables2-None]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_positions[variables3-None]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_positions[variables4-None]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_positions[variables5-None]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_positions[variables6-None]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_positions[variables7-h]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_positions[variables8-None]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_positions[variables9-h]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_positions[variables10-None]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_positions[variables11-None]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_positions[variables12-None]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_positions[variables13-None]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_positions[variables14-None]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_positions[variables15-None]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_positions_dodged[variables0]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_positions_dodged[variables1]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_positions_dodged[variables2]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_positions_unfixed[a]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_positions_unfixed[s]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_positions_unfixed[d]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_order[str-None]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_order[str-order1]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_order[str-order2]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_order[str-order3]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_order[int-None]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_order[int-order5]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_order[int-order6]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_order[int-order7]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_order[int-order8]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_hue_categorical[a]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_hue_categorical[b]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_hue_dodged[a]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_hue_dodged[b]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_single[x-b-None]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_single[x-b-a]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_single[x-y-None]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_single[x-y-a]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_single[x-t-None]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_single[x-t-a]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_single[y-b-None]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_single[y-b-a]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_single[y-y-None]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_single[y-y-a]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_single[y-t-None]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_single[y-t-a]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_attributes",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_three_points",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_legend_categorical",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_legend_numeric",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_legend_disabled",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_palette_from_color_deprecation",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_palette_with_hue_deprecation",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_log_scale",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_vs_catplot[kwargs0]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_vs_catplot[kwargs1]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_vs_catplot[kwargs2]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_vs_catplot[kwargs3]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_vs_catplot[kwargs4]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_vs_catplot[kwargs5]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_vs_catplot[kwargs6]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_vs_catplot[kwargs7]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_jitter_unfixed",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_jitter[v-True]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_jitter[v-0.1]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_jitter[h-True]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestStripPlot::test_jitter[h-0.1]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_two_calls",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_color",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_supplied_color_array",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_wide[orient0-data_type0]",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_flat[h]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_flat[v]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_positions[variables0-None]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_positions[variables1-None]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_positions[variables2-None]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_positions[variables3-None]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_positions[variables4-None]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_positions[variables5-None]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_positions[variables6-None]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_positions[variables7-h]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_positions[variables8-None]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_positions[variables9-h]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_positions[variables10-None]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_positions[variables11-None]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_positions[variables12-None]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_positions[variables13-None]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_positions[variables14-None]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_positions[variables15-None]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_positions_dodged[variables0]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_positions_dodged[variables1]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_positions_dodged[variables2]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_positions_unfixed[a]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_positions_unfixed[s]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_positions_unfixed[d]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_order[str-None]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_order[str-order1]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_order[str-order2]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_order[str-order3]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_order[int-None]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_order[int-order5]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_order[int-order6]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_order[int-order7]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_order[int-order8]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_hue_categorical[a]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_hue_categorical[b]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_hue_dodged[a]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_hue_dodged[b]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_single[val_var0-val_col0-hue_col0]",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_attributes",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_three_points",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_legend_categorical",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_legend_numeric",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_legend_disabled",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_palette_from_color_deprecation",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_palette_with_hue_deprecation",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_log_scale",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_vs_catplot[kwargs0]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_vs_catplot[kwargs1]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_vs_catplot[kwargs2]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_vs_catplot[kwargs3]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_vs_catplot[kwargs4]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_vs_catplot[kwargs5]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_vs_catplot[kwargs6]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestSwarmPlot::test_vs_catplot[kwargs7]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestBarPlotter::test_nested_width",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestBarPlotter::test_draw_vertical_bars",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestBarPlotter::test_draw_horizontal_bars",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestBarPlotter::test_draw_nested_vertical_bars",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestBarPlotter::test_draw_nested_horizontal_bars",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestBarPlotter::test_draw_missing_bars",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestBarPlotter::test_unaligned_index",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestBarPlotter::test_barplot_colors",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestBarPlotter::test_simple_barplots",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestPointPlotter::test_different_defualt_colors",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestPointPlotter::test_hue_offsets",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestPointPlotter::test_draw_vertical_points",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestPointPlotter::test_draw_horizontal_points",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestPointPlotter::test_draw_vertical_nested_points",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestPointPlotter::test_draw_horizontal_nested_points",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestPointPlotter::test_draw_missing_points",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestPointPlotter::test_unaligned_index",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestPointPlotter::test_pointplot_colors",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestPointPlotter::test_simple_pointplots",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestCountPlot::test_plot_elements",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestCountPlot::test_input_error",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestCatPlot::test_facet_organization",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestCatPlot::test_plot_elements",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestCatPlot::test_bad_plot_kind_error",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestCatPlot::test_count_x_and_y",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestCatPlot::test_plot_colors",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestCatPlot::test_ax_kwarg_removal",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestCatPlot::test_share_xy",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestCatPlot::test_array_faceter[col]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestCatPlot::test_array_faceter[row]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestBoxenPlotter::test_box_ends_finite",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestBoxenPlotter::test_box_ends_correct_tukey",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestBoxenPlotter::test_box_ends_correct_proportion",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestBoxenPlotter::test_box_ends_correct_trustworthy[491-6]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestBoxenPlotter::test_box_ends_correct_trustworthy[492-7]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestBoxenPlotter::test_box_ends_correct_trustworthy[983-7]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestBoxenPlotter::test_box_ends_correct_trustworthy[984-8]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestBoxenPlotter::test_box_ends_correct_trustworthy[1966-8]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestBoxenPlotter::test_box_ends_correct_trustworthy[1967-9]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestBoxenPlotter::test_outliers",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestBoxenPlotter::test_showfliers",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestBoxenPlotter::test_invalid_depths",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestBoxenPlotter::test_valid_depths[1]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestBoxenPlotter::test_valid_depths[3]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestBoxenPlotter::test_valid_depths[7]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestBoxenPlotter::test_valid_depths[11]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestBoxenPlotter::test_valid_depths[13]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestBoxenPlotter::test_valid_depths[17]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestBoxenPlotter::test_valid_scales",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestBoxenPlotter::test_hue_offsets",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestBoxenPlotter::test_axes_data",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestBoxenPlotter::test_box_colors",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestBoxenPlotter::test_draw_missing_boxes",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestBoxenPlotter::test_unaligned_index",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestBoxenPlotter::test_missing_data",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestBoxenPlotter::test_boxenplots",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestBoxenPlotter::test_axes_annotation",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestBoxenPlotter::test_legend_titlesize[large]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestBoxenPlotter::test_legend_titlesize[medium]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestBoxenPlotter::test_legend_titlesize[small]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestBoxenPlotter::test_legend_titlesize[22]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestBoxenPlotter::test_legend_titlesize[12]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestBoxenPlotter::test_Float64_input",
        "status": "FAILED"
    },
    {
        "name": "tests/test_categorical.py::TestBeeswarm::test_could_overlap",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestBeeswarm::test_position_candidates",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestBeeswarm::test_find_first_non_overlapping_candidate",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestBeeswarm::test_beeswarm",
        "status": "PASSED"
    },
    {
        "name": "tests/test_categorical.py::TestBeeswarm::test_add_gutters",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestSemanticMapping::test_call_lookup",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestHueMapping::test_init_from_map",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestHueMapping::test_plotter_default_init",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestHueMapping::test_plotter_reinit",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestHueMapping::test_hue_map_null",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestHueMapping::test_hue_map_categorical",
        "status": "FAILED"
    },
    {
        "name": "tests/test_core.py::TestHueMapping::test_hue_map_numeric",
        "status": "FAILED"
    },
    {
        "name": "tests/test_core.py::TestHueMapping::test_hue_map_without_hue_dataa",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestSizeMapping::test_init_from_map",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestSizeMapping::test_plotter_default_init",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestSizeMapping::test_plotter_reinit",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestSizeMapping::test_size_map_null",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestSizeMapping::test_map_size_numeric",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestSizeMapping::test_map_size_categorical",
        "status": "FAILED"
    },
    {
        "name": "tests/test_core.py::TestStyleMapping::test_init_from_map",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestStyleMapping::test_plotter_default_init",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestStyleMapping::test_plotter_reinit",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestStyleMapping::test_style_map_null",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestStyleMapping::test_map_style",
        "status": "FAILED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_flat_variables[series]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_flat_variables[array]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_flat_variables[list]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_df[long_variables0]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_df[long_variables1]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_df[long_variables2]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_df[long_variables3]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_df[long_variables4]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_df[long_variables5]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_df[long_variables6]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_df[long_variables7]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_df[long_variables8]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_df[long_variables9]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_df[long_variables10]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_df[long_variables11]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_df_with_index[long_variables0]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_df_with_index[long_variables1]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_df_with_index[long_variables2]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_df_with_index[long_variables3]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_df_with_index[long_variables4]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_df_with_index[long_variables5]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_df_with_index[long_variables6]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_df_with_index[long_variables7]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_df_with_index[long_variables8]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_df_with_index[long_variables9]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_df_with_index[long_variables10]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_df_with_index[long_variables11]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_df_with_multiindex[long_variables0]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_df_with_multiindex[long_variables1]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_df_with_multiindex[long_variables2]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_df_with_multiindex[long_variables3]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_df_with_multiindex[long_variables4]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_df_with_multiindex[long_variables5]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_df_with_multiindex[long_variables6]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_df_with_multiindex[long_variables7]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_df_with_multiindex[long_variables8]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_df_with_multiindex[long_variables9]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_df_with_multiindex[long_variables10]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_df_with_multiindex[long_variables11]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_dict[long_variables0]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_dict[long_variables1]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_dict[long_variables2]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_dict[long_variables3]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_dict[long_variables4]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_dict[long_variables5]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_dict[long_variables6]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_dict[long_variables7]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_dict[long_variables8]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_dict[long_variables9]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_dict[long_variables10]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_dict[long_variables11]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables0-series]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables0-numpy]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables0-list]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables1-series]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables1-numpy]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables1-list]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables2-series]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables2-numpy]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables2-list]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables3-series]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables3-numpy]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables3-list]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables4-series]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables4-numpy]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables4-list]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables5-series]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables5-numpy]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables5-list]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables6-series]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables6-numpy]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables6-list]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables7-series]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables7-numpy]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables7-list]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables8-series]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables8-numpy]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables8-list]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables9-series]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables9-numpy]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables9-list]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables10-series]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables10-numpy]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables10-list]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables11-series]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables11-numpy]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_vectors[long_variables11-list]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_undefined_variables",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_empty_data_input[arg0]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_empty_data_input[arg1]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_empty_data_input[arg2]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_units",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_numeric_name[3]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_numeric_name[4.5]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_hierarchical_index",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_scalar_and_data",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_wide_semantic_error",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_unknown_error",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_long_unmatched_size_error",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_wide_categorical_columns",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_iter_data_quantitites",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_iter_data_keys",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_iter_data_values",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_iter_data_reverse",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_iter_data_dropna",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_axis_labels",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_attach_basics[variables0]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_attach_basics[variables1]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_attach_basics[variables2]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_attach_basics[variables3]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_attach_basics[variables4]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_attach_disallowed",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_attach_log_scale",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_attach_converters",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_attach_facets",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_attach_shared_axes",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_get_axes_single",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_get_axes_facets",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_comp_data",
        "status": "FAILED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_comp_data_log",
        "status": "FAILED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_comp_data_category_order",
        "status": "FAILED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_comp_data_missing[comp_data_missing_fixture0]",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_comp_data_missing[comp_data_missing_fixture1]",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_comp_data_missing[comp_data_missing_fixture2]",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_comp_data_missing[comp_data_missing_fixture3]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_comp_data_missing[comp_data_missing_fixture4]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_comp_data_missing[comp_data_missing_fixture5]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_comp_data_missing[comp_data_missing_fixture6]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_comp_data_missing[comp_data_missing_fixture7]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_comp_data_missing[comp_data_missing_fixture8]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_comp_data_duplicate_index",
        "status": "FAILED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_var_order",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_scale_native",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_scale_numeric",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_scale_datetime",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestVectorPlotter::test_scale_categorical",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestCoreFunc::test_unique_dashes",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestCoreFunc::test_unique_markers",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestCoreFunc::test_variable_type",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestCoreFunc::test_infer_orient",
        "status": "PASSED"
    },
    {
        "name": "tests/test_core.py::TestCoreFunc::test_categorical_order",
        "status": "PASSED"
    },
    {
        "name": "tests/test_decorators.py::test_share_init_params_with_map",
        "status": "PASSED"
    },
    {
        "name": "tests/test_distributions.py::TestDistPlot::test_hist_bins",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDistPlot::test_elements",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDistPlot::test_distplot_with_nans",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestRugPlot::test_color",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestRugPlot::test_long_data[x]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestRugPlot::test_long_data[y]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestRugPlot::test_bivariate_data",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestRugPlot::test_wide_vs_long_data",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestRugPlot::test_flat_vector",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestRugPlot::test_datetime_data",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestRugPlot::test_empty_data",
        "status": "PASSED"
    },
    {
        "name": "tests/test_distributions.py::TestRugPlot::test_a_deprecation",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestRugPlot::test_axis_deprecation[x]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestRugPlot::test_axis_deprecation[y]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestRugPlot::test_vertical_deprecation",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestRugPlot::test_rug_data",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestRugPlot::test_rug_colors",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestRugPlot::test_expand_margins",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestRugPlot::test_matplotlib_kwargs",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestRugPlot::test_axis_labels",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestRugPlot::test_log_scale",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotUnivariate::test_color[True]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotUnivariate::test_color[False]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotUnivariate::test_long_vectors[x]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotUnivariate::test_long_vectors[y]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotUnivariate::test_wide_vs_long_data",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotUnivariate::test_flat_vector",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotUnivariate::test_empty_data",
        "status": "PASSED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotUnivariate::test_singular_data",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotUnivariate::test_variable_assignment",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotUnivariate::test_vertical_deprecation",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotUnivariate::test_bw_deprecation",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotUnivariate::test_kernel_deprecation",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotUnivariate::test_shade_deprecation",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotUnivariate::test_hue_colors[layer]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotUnivariate::test_hue_colors[stack]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotUnivariate::test_hue_colors[fill]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotUnivariate::test_hue_stacking",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotUnivariate::test_hue_filling",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotUnivariate::test_fill_default[stack]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotUnivariate::test_fill_default[fill]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotUnivariate::test_fill_nondefault[layer]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotUnivariate::test_fill_nondefault[stack]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotUnivariate::test_fill_nondefault[fill]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotUnivariate::test_color_cycle_interaction",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotUnivariate::test_artist_color[True]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotUnivariate::test_artist_color[False]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotUnivariate::test_datetime_scale",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotUnivariate::test_multiple_argument_check",
        "status": "PASSED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotUnivariate::test_cut",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotUnivariate::test_clip",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotUnivariate::test_line_is_density",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotUnivariate::test_cumulative",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotUnivariate::test_cumulative_requires_scipy",
        "status": "PASSED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotUnivariate::test_common_norm",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotUnivariate::test_common_grid",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotUnivariate::test_bw_method",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotUnivariate::test_bw_adjust",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotUnivariate::test_log_scale_implicit",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotUnivariate::test_log_scale_explicit",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotUnivariate::test_log_scale_with_hue",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotUnivariate::test_log_scale_normalization",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotUnivariate::test_weights",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotUnivariate::test_weight_norm",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotUnivariate::test_sticky_edges",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotUnivariate::test_line_kws",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotUnivariate::test_input_checking",
        "status": "PASSED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotUnivariate::test_axis_labels",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotUnivariate::test_legend",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotBivariate::test_long_vectors",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotBivariate::test_singular_data",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotBivariate::test_fill_artists",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotBivariate::test_common_norm",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotBivariate::test_log_scale",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotBivariate::test_bandwidth",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotBivariate::test_weights",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotBivariate::test_hue_ignores_cmap",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotBivariate::test_contour_line_colors",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotBivariate::test_contour_fill_colors",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotBivariate::test_colorbar",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotBivariate::test_levels_and_thresh",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotBivariate::test_quantile_to_level",
        "status": "PASSED"
    },
    {
        "name": "tests/test_distributions.py::TestKDEPlotBivariate::test_input_checking",
        "status": "PASSED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_color[bars-True]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_color[bars-False]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_color[step-True]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_color[step-False]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_color[poly-True]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_color[poly-False]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_long_vectors[x]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_long_vectors[y]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_wide_vs_long_data",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_flat_vector",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_empty_data",
        "status": "PASSED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_variable_assignment",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_hue_fill_colors[layer-bars]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_hue_fill_colors[layer-step]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_hue_fill_colors[layer-poly]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_hue_fill_colors[dodge-bars]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_hue_fill_colors[dodge-step]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_hue_fill_colors[dodge-poly]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_hue_fill_colors[stack-bars]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_hue_fill_colors[stack-step]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_hue_fill_colors[stack-poly]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_hue_fill_colors[fill-bars]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_hue_fill_colors[fill-step]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_hue_fill_colors[fill-poly]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_hue_stack",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_hue_fill",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_hue_dodge",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_hue_as_numpy_dodged",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_multiple_input_check",
        "status": "PASSED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_element_input_check",
        "status": "PASSED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_count_stat",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_density_stat",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_density_stat_common_norm",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_density_stat_unique_norm",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_probability_stat[probability]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_probability_stat[proportion]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_probability_stat_common_norm[probability]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_probability_stat_common_norm[proportion]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_probability_stat_unique_norm[probability]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_probability_stat_unique_norm[proportion]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_percent_stat",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_common_bins",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_unique_bins",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_weights_with_missing",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_weight_norm",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_discrete",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_discrete_categorical_default",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_categorical_yaxis_inversion",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_discrete_requires_bars",
        "status": "PASSED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_datetime_scale",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_kde[count]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_kde[density]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_kde[probability]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_kde_with_hue[count-layer]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_kde_with_hue[count-dodge]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_kde_with_hue[density-layer]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_kde_with_hue[density-dodge]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_kde_with_hue[probability-layer]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_kde_with_hue[probability-dodge]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_kde_default_cut",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_kde_hue",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_kde_yaxis",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_kde_line_kws",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_kde_singular_data",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_element_default",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_bars_no_fill",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_step_fill",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_poly_fill",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_poly_no_fill",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_step_no_fill",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_step_fill_xy",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_step_no_fill_xy",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_weighted_histogram",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_weights_with_auto_bins",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_shrink",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_log_scale_explicit",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_log_scale_implicit",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_log_scale_dodge",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_auto_linewidth[True]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_auto_linewidth[False]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_bar_kwargs",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_step_fill_kwargs",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotUnivariate::test_step_line_kwargs",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotBivariate::test_mesh",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotBivariate::test_mesh_with_hue",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotBivariate::test_mesh_with_hue_unique_bins",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotBivariate::test_mesh_with_col_unique_bins",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotBivariate::test_mesh_log_scale",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotBivariate::test_mesh_thresh",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotBivariate::test_mesh_sticky_edges",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotBivariate::test_mesh_common_norm",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotBivariate::test_mesh_unique_norm",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotBivariate::test_mesh_normalization[probability]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotBivariate::test_mesh_normalization[proportion]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotBivariate::test_mesh_normalization[percent]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotBivariate::test_mesh_colors",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotBivariate::test_color_limits",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotBivariate::test_hue_color_limits",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestHistPlotBivariate::test_colorbar",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestECDFPlotUnivariate::test_color",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestECDFPlotUnivariate::test_long_vectors[x]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestECDFPlotUnivariate::test_long_vectors[y]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestECDFPlotUnivariate::test_hue",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestECDFPlotUnivariate::test_line_kwargs",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestECDFPlotUnivariate::test_drawstyle[x]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestECDFPlotUnivariate::test_drawstyle[y]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestECDFPlotUnivariate::test_proportion_limits[x-y]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestECDFPlotUnivariate::test_proportion_limits[y-x]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestECDFPlotUnivariate::test_proportion_limits_complementary[x-y]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestECDFPlotUnivariate::test_proportion_limits_complementary[y-x]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestECDFPlotUnivariate::test_proportion_count[x-y]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestECDFPlotUnivariate::test_proportion_count[y-x]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestECDFPlotUnivariate::test_weights",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestECDFPlotUnivariate::test_bivariate_error",
        "status": "PASSED"
    },
    {
        "name": "tests/test_distributions.py::TestECDFPlotUnivariate::test_log_scale",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_versus_single_histplot[kwargs0]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_versus_single_histplot[kwargs1]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_versus_single_histplot[kwargs2]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_versus_single_histplot[kwargs3]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_versus_single_histplot[kwargs4]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_versus_single_histplot[kwargs5]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_versus_single_histplot[kwargs6]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_versus_single_histplot[kwargs7]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_versus_single_histplot[kwargs8]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_versus_single_histplot[kwargs9]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_versus_single_histplot[kwargs10]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_versus_single_histplot[kwargs11]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_versus_single_histplot[kwargs12]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_versus_single_histplot[kwargs13]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_versus_single_histplot[kwargs14]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_versus_single_histplot[kwargs15]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_versus_single_kdeplot[kwargs0]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_versus_single_kdeplot[kwargs1]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_versus_single_kdeplot[kwargs2]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_versus_single_kdeplot[kwargs3]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_versus_single_kdeplot[kwargs4]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_versus_single_kdeplot[kwargs5]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_versus_single_kdeplot[kwargs6]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_versus_single_kdeplot[kwargs7]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_versus_single_kdeplot[kwargs8]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_versus_single_kdeplot[kwargs9]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_versus_single_kdeplot[kwargs10]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_versus_single_kdeplot[kwargs11]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_versus_single_ecdfplot[kwargs0]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_versus_single_ecdfplot[kwargs1]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_versus_single_ecdfplot[kwargs2]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_versus_single_ecdfplot[kwargs3]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_versus_single_ecdfplot[kwargs4]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_versus_single_ecdfplot[kwargs5]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_versus_single_ecdfplot[kwargs6]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_versus_single_ecdfplot[kwargs7]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_versus_single_ecdfplot[kwargs8]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_versus_single_ecdfplot[kwargs9]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_with_rug[kwargs0]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_with_rug[kwargs1]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_with_rug[kwargs2]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_facets[col]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_facets[row]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_facet_multiple[dodge]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_facet_multiple[stack]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_facet_multiple[fill]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_ax_warning",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_array_faceting[col]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_array_faceting[row]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_legend",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_empty",
        "status": "PASSED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_bivariate_ecdf_error",
        "status": "PASSED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_bivariate_kde_norm",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_bivariate_hist_norm",
        "status": "FAILED"
    },
    {
        "name": "tests/test_distributions.py::TestDisPlot::test_facetgrid_data",
        "status": "FAILED"
    },
    {
        "name": "tests/test_docstrings.py::TestDocstringComponents::test_from_dict",
        "status": "PASSED"
    },
    {
        "name": "tests/test_docstrings.py::TestDocstringComponents::test_from_nested_components",
        "status": "PASSED"
    },
    {
        "name": "tests/test_docstrings.py::TestDocstringComponents::test_from_function",
        "status": "PASSED"
    },
    {
        "name": "tests/test_docstrings.py::TestDocstringComponents::test_from_method",
        "status": "PASSED"
    },
    {
        "name": "tests/test_matrix.py::TestHeatmap::test_ndarray_input",
        "status": "PASSED"
    },
    {
        "name": "tests/test_matrix.py::TestHeatmap::test_df_input",
        "status": "PASSED"
    },
    {
        "name": "tests/test_matrix.py::TestHeatmap::test_df_multindex_input",
        "status": "PASSED"
    },
    {
        "name": "tests/test_matrix.py::TestHeatmap::test_mask_input[float]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_matrix.py::TestHeatmap::test_mask_input[int64]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_matrix.py::TestHeatmap::test_mask_input[object]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_matrix.py::TestHeatmap::test_mask_limits",
        "status": "PASSED"
    },
    {
        "name": "tests/test_matrix.py::TestHeatmap::test_default_vlims",
        "status": "PASSED"
    },
    {
        "name": "tests/test_matrix.py::TestHeatmap::test_robust_vlims",
        "status": "PASSED"
    },
    {
        "name": "tests/test_matrix.py::TestHeatmap::test_custom_sequential_vlims",
        "status": "PASSED"
    },
    {
        "name": "tests/test_matrix.py::TestHeatmap::test_custom_diverging_vlims",
        "status": "PASSED"
    },
    {
        "name": "tests/test_matrix.py::TestHeatmap::test_array_with_nans",
        "status": "PASSED"
    },
    {
        "name": "tests/test_matrix.py::TestHeatmap::test_mask",
        "status": "PASSED"
    },
    {
        "name": "tests/test_matrix.py::TestHeatmap::test_custom_cmap",
        "status": "PASSED"
    },
    {
        "name": "tests/test_matrix.py::TestHeatmap::test_centered_vlims",
        "status": "PASSED"
    },
    {
        "name": "tests/test_matrix.py::TestHeatmap::test_default_colors",
        "status": "PASSED"
    },
    {
        "name": "tests/test_matrix.py::TestHeatmap::test_custom_vlim_colors",
        "status": "PASSED"
    },
    {
        "name": "tests/test_matrix.py::TestHeatmap::test_custom_center_colors",
        "status": "PASSED"
    },
    {
        "name": "tests/test_matrix.py::TestHeatmap::test_cmap_with_properties",
        "status": "PASSED"
    },
    {
        "name": "tests/test_matrix.py::TestHeatmap::test_tickabels_off",
        "status": "PASSED"
    },
    {
        "name": "tests/test_matrix.py::TestHeatmap::test_custom_ticklabels",
        "status": "PASSED"
    },
    {
        "name": "tests/test_matrix.py::TestHeatmap::test_custom_ticklabel_interval",
        "status": "PASSED"
    },
    {
        "name": "tests/test_matrix.py::TestHeatmap::test_heatmap_annotation",
        "status": "PASSED"
    },
    {
        "name": "tests/test_matrix.py::TestHeatmap::test_heatmap_annotation_overwrite_kws",
        "status": "PASSED"
    },
    {
        "name": "tests/test_matrix.py::TestHeatmap::test_heatmap_annotation_with_mask",
        "status": "PASSED"
    },
    {
        "name": "tests/test_matrix.py::TestHeatmap::test_heatmap_annotation_mesh_colors",
        "status": "PASSED"
    },
    {
        "name": "tests/test_matrix.py::TestHeatmap::test_heatmap_annotation_other_data",
        "status": "PASSED"
    },
    {
        "name": "tests/test_matrix.py::TestHeatmap::test_heatmap_annotation_with_limited_ticklabels",
        "status": "PASSED"
    },
    {
        "name": "tests/test_matrix.py::TestHeatmap::test_heatmap_cbar",
        "status": "PASSED"
    },
    {
        "name": "tests/test_matrix.py::TestHeatmap::test_heatmap_axes",
        "status": "PASSED"
    },
    {
        "name": "tests/test_matrix.py::TestHeatmap::test_heatmap_ticklabel_rotation",
        "status": "PASSED"
    },
    {
        "name": "tests/test_matrix.py::TestHeatmap::test_heatmap_inner_lines",
        "status": "PASSED"
    },
    {
        "name": "tests/test_matrix.py::TestHeatmap::test_square_aspect",
        "status": "PASSED"
    },
    {
        "name": "tests/test_matrix.py::TestHeatmap::test_mask_validation",
        "status": "PASSED"
    },
    {
        "name": "tests/test_matrix.py::TestHeatmap::test_missing_data_mask",
        "status": "PASSED"
    },
    {
        "name": "tests/test_matrix.py::TestHeatmap::test_cbar_ticks",
        "status": "PASSED"
    },
    {
        "name": "tests/test_matrix.py::TestDendrogram::test_ndarray_input",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestDendrogram::test_df_input",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestDendrogram::test_df_multindex_input",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestDendrogram::test_axis0_input",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestDendrogram::test_rotate_input",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestDendrogram::test_rotate_axis0_input",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestDendrogram::test_custom_linkage",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestDendrogram::test_label_false",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestDendrogram::test_linkage_scipy",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestDendrogram::test_fastcluster_other_method",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestDendrogram::test_fastcluster_non_euclidean",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestDendrogram::test_dendrogram_plot",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestDendrogram::test_dendrogram_rotate",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestDendrogram::test_dendrogram_ticklabel_rotation",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestClustermap::test_ndarray_input",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestClustermap::test_df_input",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestClustermap::test_corr_df_input",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestClustermap::test_pivot_input",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestClustermap::test_colors_input",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestClustermap::test_categorical_colors_input",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestClustermap::test_nested_colors_input",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestClustermap::test_colors_input_custom_cmap",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestClustermap::test_z_score",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestClustermap::test_z_score_axis0",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestClustermap::test_standard_scale",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestClustermap::test_standard_scale_axis0",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestClustermap::test_z_score_standard_scale",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestClustermap::test_color_list_to_matrix_and_cmap",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestClustermap::test_nested_color_list_to_matrix_and_cmap",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestClustermap::test_color_list_to_matrix_and_cmap_axis1",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestClustermap::test_color_list_to_matrix_and_cmap_different_sizes",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestClustermap::test_savefig",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestClustermap::test_plot_dendrograms",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestClustermap::test_cluster_false",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestClustermap::test_row_col_colors",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestClustermap::test_cluster_false_row_col_colors",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestClustermap::test_row_col_colors_df",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestClustermap::test_row_col_colors_df_shuffled",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestClustermap::test_row_col_colors_df_missing",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestClustermap::test_row_col_colors_df_one_axis",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestClustermap::test_row_col_colors_series",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestClustermap::test_row_col_colors_series_shuffled",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestClustermap::test_row_col_colors_series_missing",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestClustermap::test_row_col_colors_ignore_heatmap_kwargs",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestClustermap::test_row_col_colors_raise_on_mixed_index_types",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestClustermap::test_mask_reorganization",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestClustermap::test_ticklabel_reorganization",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestClustermap::test_noticklabels",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestClustermap::test_size_ratios",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestClustermap::test_cbar_pos",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestClustermap::test_square_warning",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestClustermap::test_clustermap_annotation",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::TestClustermap::test_tree_kws",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_matrix.py::test_required_scipy_errors",
        "status": "PASSED"
    },
    {
        "name": "tests/test_miscplot.py::TestPalPlot::test_palplot_size",
        "status": "PASSED"
    },
    {
        "name": "tests/test_miscplot.py::TestDogPlot::test_dogplot",
        "status": "PASSED"
    },
    {
        "name": "tests/test_palettes.py::TestColorPalettes::test_current_palette",
        "status": "PASSED"
    },
    {
        "name": "tests/test_palettes.py::TestColorPalettes::test_palette_context",
        "status": "PASSED"
    },
    {
        "name": "tests/test_palettes.py::TestColorPalettes::test_big_palette_context",
        "status": "PASSED"
    },
    {
        "name": "tests/test_palettes.py::TestColorPalettes::test_palette_size",
        "status": "PASSED"
    },
    {
        "name": "tests/test_palettes.py::TestColorPalettes::test_seaborn_palettes",
        "status": "PASSED"
    },
    {
        "name": "tests/test_palettes.py::TestColorPalettes::test_hls_palette",
        "status": "PASSED"
    },
    {
        "name": "tests/test_palettes.py::TestColorPalettes::test_husl_palette",
        "status": "PASSED"
    },
    {
        "name": "tests/test_palettes.py::TestColorPalettes::test_mpl_palette",
        "status": "PASSED"
    },
    {
        "name": "tests/test_palettes.py::TestColorPalettes::test_mpl_dark_palette",
        "status": "PASSED"
    },
    {
        "name": "tests/test_palettes.py::TestColorPalettes::test_bad_palette_name",
        "status": "PASSED"
    },
    {
        "name": "tests/test_palettes.py::TestColorPalettes::test_terrible_palette_name",
        "status": "PASSED"
    },
    {
        "name": "tests/test_palettes.py::TestColorPalettes::test_bad_palette_colors",
        "status": "PASSED"
    },
    {
        "name": "tests/test_palettes.py::TestColorPalettes::test_palette_desat",
        "status": "PASSED"
    },
    {
        "name": "tests/test_palettes.py::TestColorPalettes::test_palette_is_list_of_tuples",
        "status": "PASSED"
    },
    {
        "name": "tests/test_palettes.py::TestColorPalettes::test_palette_cycles",
        "status": "PASSED"
    },
    {
        "name": "tests/test_palettes.py::TestColorPalettes::test_hls_values",
        "status": "PASSED"
    },
    {
        "name": "tests/test_palettes.py::TestColorPalettes::test_husl_values",
        "status": "PASSED"
    },
    {
        "name": "tests/test_palettes.py::TestColorPalettes::test_cbrewer_qual",
        "status": "PASSED"
    },
    {
        "name": "tests/test_palettes.py::TestColorPalettes::test_mpl_reversal",
        "status": "PASSED"
    },
    {
        "name": "tests/test_palettes.py::TestColorPalettes::test_rgb_from_hls",
        "status": "PASSED"
    },
    {
        "name": "tests/test_palettes.py::TestColorPalettes::test_rgb_from_husl",
        "status": "PASSED"
    },
    {
        "name": "tests/test_palettes.py::TestColorPalettes::test_rgb_from_xkcd",
        "status": "PASSED"
    },
    {
        "name": "tests/test_palettes.py::TestColorPalettes::test_light_palette",
        "status": "PASSED"
    },
    {
        "name": "tests/test_palettes.py::TestColorPalettes::test_dark_palette",
        "status": "PASSED"
    },
    {
        "name": "tests/test_palettes.py::TestColorPalettes::test_diverging_palette",
        "status": "PASSED"
    },
    {
        "name": "tests/test_palettes.py::TestColorPalettes::test_blend_palette",
        "status": "PASSED"
    },
    {
        "name": "tests/test_palettes.py::TestColorPalettes::test_cubehelix_against_matplotlib",
        "status": "PASSED"
    },
    {
        "name": "tests/test_palettes.py::TestColorPalettes::test_cubehelix_n_colors",
        "status": "PASSED"
    },
    {
        "name": "tests/test_palettes.py::TestColorPalettes::test_cubehelix_reverse",
        "status": "PASSED"
    },
    {
        "name": "tests/test_palettes.py::TestColorPalettes::test_cubehelix_cmap",
        "status": "PASSED"
    },
    {
        "name": "tests/test_palettes.py::TestColorPalettes::test_cubehelix_code",
        "status": "PASSED"
    },
    {
        "name": "tests/test_palettes.py::TestColorPalettes::test_xkcd_palette",
        "status": "PASSED"
    },
    {
        "name": "tests/test_palettes.py::TestColorPalettes::test_crayon_palette",
        "status": "PASSED"
    },
    {
        "name": "tests/test_palettes.py::TestColorPalettes::test_color_codes",
        "status": "PASSED"
    },
    {
        "name": "tests/test_palettes.py::TestColorPalettes::test_as_hex",
        "status": "PASSED"
    },
    {
        "name": "tests/test_palettes.py::TestColorPalettes::test_preserved_palette_length",
        "status": "PASSED"
    },
    {
        "name": "tests/test_palettes.py::TestColorPalettes::test_html_rep",
        "status": "PASSED"
    },
    {
        "name": "tests/test_rcmod.py::TestAxesStyle::test_default_return",
        "status": "PASSED"
    },
    {
        "name": "tests/test_rcmod.py::TestAxesStyle::test_key_usage",
        "status": "PASSED"
    },
    {
        "name": "tests/test_rcmod.py::TestAxesStyle::test_bad_style",
        "status": "PASSED"
    },
    {
        "name": "tests/test_rcmod.py::TestAxesStyle::test_rc_override",
        "status": "PASSED"
    },
    {
        "name": "tests/test_rcmod.py::TestAxesStyle::test_set_style",
        "status": "PASSED"
    },
    {
        "name": "tests/test_rcmod.py::TestAxesStyle::test_style_context_manager",
        "status": "PASSED"
    },
    {
        "name": "tests/test_rcmod.py::TestAxesStyle::test_style_context_independence",
        "status": "PASSED"
    },
    {
        "name": "tests/test_rcmod.py::TestAxesStyle::test_set_rc",
        "status": "PASSED"
    },
    {
        "name": "tests/test_rcmod.py::TestAxesStyle::test_set_with_palette",
        "status": "PASSED"
    },
    {
        "name": "tests/test_rcmod.py::TestAxesStyle::test_reset_defaults",
        "status": "PASSED"
    },
    {
        "name": "tests/test_rcmod.py::TestAxesStyle::test_reset_orig",
        "status": "PASSED"
    },
    {
        "name": "tests/test_rcmod.py::TestAxesStyle::test_set_is_alias",
        "status": "PASSED"
    },
    {
        "name": "tests/test_rcmod.py::TestPlottingContext::test_default_return",
        "status": "PASSED"
    },
    {
        "name": "tests/test_rcmod.py::TestPlottingContext::test_key_usage",
        "status": "PASSED"
    },
    {
        "name": "tests/test_rcmod.py::TestPlottingContext::test_bad_context",
        "status": "PASSED"
    },
    {
        "name": "tests/test_rcmod.py::TestPlottingContext::test_font_scale",
        "status": "PASSED"
    },
    {
        "name": "tests/test_rcmod.py::TestPlottingContext::test_rc_override",
        "status": "PASSED"
    },
    {
        "name": "tests/test_rcmod.py::TestPlottingContext::test_set_context",
        "status": "PASSED"
    },
    {
        "name": "tests/test_rcmod.py::TestPlottingContext::test_context_context_manager",
        "status": "PASSED"
    },
    {
        "name": "tests/test_rcmod.py::TestPalette::test_set_palette",
        "status": "PASSED"
    },
    {
        "name": "tests/test_rcmod.py::TestFonts::test_set_font",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_rcmod.py::TestFonts::test_set_serif_font",
        "status": "PASSED"
    },
    {
        "name": "tests/test_rcmod.py::TestFonts::test_different_sans_serif",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_regression.py::TestLinearPlotter::test_establish_variables_from_frame",
        "status": "PASSED"
    },
    {
        "name": "tests/test_regression.py::TestLinearPlotter::test_establish_variables_from_series",
        "status": "PASSED"
    },
    {
        "name": "tests/test_regression.py::TestLinearPlotter::test_establish_variables_from_array",
        "status": "PASSED"
    },
    {
        "name": "tests/test_regression.py::TestLinearPlotter::test_establish_variables_from_lists",
        "status": "PASSED"
    },
    {
        "name": "tests/test_regression.py::TestLinearPlotter::test_establish_variables_from_mix",
        "status": "PASSED"
    },
    {
        "name": "tests/test_regression.py::TestLinearPlotter::test_establish_variables_from_bad",
        "status": "PASSED"
    },
    {
        "name": "tests/test_regression.py::TestLinearPlotter::test_dropna",
        "status": "PASSED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlotter::test_variables_from_frame",
        "status": "PASSED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlotter::test_variables_from_series",
        "status": "PASSED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlotter::test_variables_from_mix",
        "status": "PASSED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlotter::test_variables_must_be_1d",
        "status": "PASSED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlotter::test_dropna",
        "status": "PASSED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlotter::test_singleton[x0-y0]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlotter::test_singleton[x1-y1]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlotter::test_singleton[x2-y2]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlotter::test_ci",
        "status": "PASSED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlotter::test_fast_regression",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlotter::test_regress_poly",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlotter::test_regress_logx",
        "status": "PASSED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlotter::test_regress_n_boot",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlotter::test_regress_without_bootstrap",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlotter::test_regress_bootstrap_seed",
        "status": "PASSED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlotter::test_numeric_bins",
        "status": "PASSED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlotter::test_provided_bins",
        "status": "PASSED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlotter::test_bin_results",
        "status": "PASSED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlotter::test_scatter_data",
        "status": "PASSED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlotter::test_estimate_data",
        "status": "PASSED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlotter::test_estimate_cis",
        "status": "PASSED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlotter::test_estimate_units",
        "status": "PASSED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlotter::test_partial",
        "status": "PASSED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlotter::test_logistic_regression",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlotter::test_logistic_perfect_separation",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlotter::test_robust_regression",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlotter::test_lowess_regression",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlotter::test_regression_options",
        "status": "PASSED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlotter::test_regression_limits",
        "status": "PASSED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlots::test_regplot_basic",
        "status": "PASSED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlots::test_regplot_selective",
        "status": "PASSED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlots::test_regplot_scatter_kws_alpha",
        "status": "PASSED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlots::test_regplot_binned",
        "status": "PASSED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlots::test_lmplot_no_data",
        "status": "PASSED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlots::test_lmplot_basic",
        "status": "PASSED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlots::test_lmplot_hue",
        "status": "PASSED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlots::test_lmplot_markers",
        "status": "PASSED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlots::test_lmplot_marker_linewidths",
        "status": "PASSED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlots::test_lmplot_facets",
        "status": "PASSED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlots::test_lmplot_hue_col_nolegend",
        "status": "PASSED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlots::test_lmplot_scatter_kws",
        "status": "PASSED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlots::test_lmplot_facet_truncate[True]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlots::test_lmplot_facet_truncate[False]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlots::test_lmplot_sharey",
        "status": "PASSED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlots::test_lmplot_facet_kws",
        "status": "PASSED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlots::test_residplot",
        "status": "PASSED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlots::test_residplot_lowess",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlots::test_three_point_colors",
        "status": "PASSED"
    },
    {
        "name": "tests/test_regression.py::TestRegressionPlots::test_regplot_xlim",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestRelationalPlotter::test_wide_df_variables",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestRelationalPlotter::test_wide_df_with_nonnumeric_variables",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestRelationalPlotter::test_wide_array_variables",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestRelationalPlotter::test_flat_array_variables",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestRelationalPlotter::test_flat_list_variables",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestRelationalPlotter::test_flat_series_variables",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestRelationalPlotter::test_wide_list_of_series_variables",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestRelationalPlotter::test_wide_list_of_arrays_variables",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestRelationalPlotter::test_wide_list_of_list_variables",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestRelationalPlotter::test_wide_dict_of_series_variables",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestRelationalPlotter::test_wide_dict_of_arrays_variables",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestRelationalPlotter::test_wide_dict_of_lists_variables",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestRelationalPlotter::test_relplot_simple",
        "status": "FAILED"
    },
    {
        "name": "tests/test_relational.py::TestRelationalPlotter::test_relplot_complex",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestRelationalPlotter::test_relplot_vectors[series]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestRelationalPlotter::test_relplot_vectors[numpy]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestRelationalPlotter::test_relplot_vectors[list]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestRelationalPlotter::test_relplot_wide",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestRelationalPlotter::test_relplot_hues",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestRelationalPlotter::test_relplot_sizes",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestRelationalPlotter::test_relplot_styles",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestRelationalPlotter::test_relplot_stringy_numerics",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestRelationalPlotter::test_relplot_legend",
        "status": "FAILED"
    },
    {
        "name": "tests/test_relational.py::TestRelationalPlotter::test_relplot_data",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestRelationalPlotter::test_facet_variable_collision",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestRelationalPlotter::test_ax_kwarg_removal",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestLinePlotter::test_color",
        "status": "FAILED"
    },
    {
        "name": "tests/test_relational.py::TestLinePlotter::test_legend_data",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestLinePlotter::test_plot",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestLinePlotter::test_orient",
        "status": "FAILED"
    },
    {
        "name": "tests/test_relational.py::TestLinePlotter::test_log_scale",
        "status": "FAILED"
    },
    {
        "name": "tests/test_relational.py::TestLinePlotter::test_axis_labels",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestLinePlotter::test_matplotlib_kwargs",
        "status": "FAILED"
    },
    {
        "name": "tests/test_relational.py::TestLinePlotter::test_nonmapped_dashes",
        "status": "FAILED"
    },
    {
        "name": "tests/test_relational.py::TestLinePlotter::test_lineplot_axes",
        "status": "FAILED"
    },
    {
        "name": "tests/test_relational.py::TestLinePlotter::test_lineplot_vs_relplot[long_semantics0]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_relational.py::TestLinePlotter::test_lineplot_vs_relplot[long_semantics1]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_relational.py::TestLinePlotter::test_lineplot_vs_relplot[long_semantics2]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_relational.py::TestLinePlotter::test_lineplot_vs_relplot[long_semantics3]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_relational.py::TestLinePlotter::test_lineplot_vs_relplot[long_semantics4]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_relational.py::TestLinePlotter::test_lineplot_vs_relplot[long_semantics5]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_relational.py::TestLinePlotter::test_lineplot_vs_relplot[long_semantics6]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_relational.py::TestLinePlotter::test_lineplot_vs_relplot[long_semantics7]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_relational.py::TestLinePlotter::test_lineplot_vs_relplot[long_semantics8]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_relational.py::TestLinePlotter::test_lineplot_vs_relplot[long_semantics9]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_relational.py::TestLinePlotter::test_lineplot_vs_relplot[long_semantics10]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_relational.py::TestLinePlotter::test_lineplot_vs_relplot[long_semantics11]",
        "status": "FAILED"
    },
    {
        "name": "tests/test_relational.py::TestLinePlotter::test_lineplot_smoke",
        "status": "FAILED"
    },
    {
        "name": "tests/test_relational.py::TestLinePlotter::test_ci_deprecation",
        "status": "FAILED"
    },
    {
        "name": "tests/test_relational.py::TestScatterPlotter::test_color",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestScatterPlotter::test_legend_data",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestScatterPlotter::test_plot",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestScatterPlotter::test_axis_labels",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestScatterPlotter::test_scatterplot_axes",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestScatterPlotter::test_literal_attribute_vectors",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestScatterPlotter::test_supplied_color_array",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestScatterPlotter::test_hue_order",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestScatterPlotter::test_linewidths",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestScatterPlotter::test_size_norm_extrapolation",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestScatterPlotter::test_datetime_scale",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestScatterPlotter::test_unfilled_marker_edgecolor_warning",
        "status": "FAILED"
    },
    {
        "name": "tests/test_relational.py::TestScatterPlotter::test_scatterplot_vs_relplot[long_semantics0]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestScatterPlotter::test_scatterplot_vs_relplot[long_semantics1]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestScatterPlotter::test_scatterplot_vs_relplot[long_semantics2]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestScatterPlotter::test_scatterplot_vs_relplot[long_semantics3]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestScatterPlotter::test_scatterplot_vs_relplot[long_semantics4]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestScatterPlotter::test_scatterplot_vs_relplot[long_semantics5]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestScatterPlotter::test_scatterplot_vs_relplot[long_semantics6]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestScatterPlotter::test_scatterplot_vs_relplot[long_semantics7]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestScatterPlotter::test_scatterplot_vs_relplot[long_semantics8]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestScatterPlotter::test_scatterplot_vs_relplot[long_semantics9]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestScatterPlotter::test_scatterplot_vs_relplot[long_semantics10]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestScatterPlotter::test_scatterplot_vs_relplot[long_semantics11]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_relational.py::TestScatterPlotter::test_scatterplot_smoke",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestKDE::test_gridsize",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestKDE::test_cut",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestKDE::test_clip",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestKDE::test_density_normalization",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestKDE::test_cumulative",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_statistics.py::TestKDE::test_cached_support",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestKDE::test_bw_method",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestKDE::test_bw_adjust",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestKDE::test_bivariate_grid",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestKDE::test_bivariate_normalization",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestKDE::test_bivariate_cumulative",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_statistics.py::TestHistogram::test_string_bins",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestHistogram::test_int_bins",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestHistogram::test_array_bins",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestHistogram::test_bivariate_string_bins",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestHistogram::test_bivariate_int_bins",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestHistogram::test_bivariate_array_bins",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestHistogram::test_binwidth",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestHistogram::test_bivariate_binwidth",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestHistogram::test_binrange",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestHistogram::test_bivariate_binrange",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestHistogram::test_discrete_bins",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestHistogram::test_odd_single_observation",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestHistogram::test_binwidth_roundoff",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestHistogram::test_histogram",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestHistogram::test_count_stat",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestHistogram::test_density_stat",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestHistogram::test_probability_stat",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestHistogram::test_frequency_stat",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestHistogram::test_cumulative_count",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestHistogram::test_cumulative_density",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestHistogram::test_cumulative_probability",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestHistogram::test_cumulative_frequency",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestHistogram::test_bivariate_histogram",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestHistogram::test_bivariate_count_stat",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestHistogram::test_bivariate_density_stat",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestHistogram::test_bivariate_probability_stat",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestHistogram::test_bivariate_frequency_stat",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestHistogram::test_bivariate_cumulative_count",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestHistogram::test_bivariate_cumulative_density",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestHistogram::test_bivariate_cumulative_frequency",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestHistogram::test_bivariate_cumulative_probability",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestHistogram::test_bad_stat",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestECDF::test_univariate_proportion",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestECDF::test_univariate_count",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestECDF::test_univariate_proportion_weights",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestECDF::test_univariate_count_weights",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestECDF::test_against_statsmodels",
        "status": "SKIPPED"
    },
    {
        "name": "tests/test_statistics.py::TestECDF::test_invalid_stat",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestECDF::test_bivariate_error",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestEstimateAggregator::test_func_estimator",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestEstimateAggregator::test_name_estimator",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestEstimateAggregator::test_se_errorbars",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestEstimateAggregator::test_sd_errorbars",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestEstimateAggregator::test_pi_errorbars",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestEstimateAggregator::test_ci_errorbars",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestEstimateAggregator::test_custom_errorbars",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestEstimateAggregator::test_singleton_errorbars",
        "status": "PASSED"
    },
    {
        "name": "tests/test_statistics.py::TestEstimateAggregator::test_errorbar_validation",
        "status": "PASSED"
    },
    {
        "name": "tests/test_utils.py::test_ci_to_errsize",
        "status": "PASSED"
    },
    {
        "name": "tests/test_utils.py::test_desaturate",
        "status": "PASSED"
    },
    {
        "name": "tests/test_utils.py::test_desaturation_prop",
        "status": "PASSED"
    },
    {
        "name": "tests/test_utils.py::test_saturate",
        "status": "PASSED"
    },
    {
        "name": "tests/test_utils.py::test_to_utf8[a-a0]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_utils.py::test_to_utf8[abc-abc0]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_utils.py::test_to_utf8[a-a1]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_utils.py::test_to_utf8[abc-abc1]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_utils.py::test_to_utf8[s4-abc]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_utils.py::test_to_utf8[s5-]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_utils.py::test_to_utf8[1-1]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_utils.py::test_to_utf8[0-0]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_utils.py::test_to_utf8[s8-[]]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_utils.py::TestSpineUtils::test_despine",
        "status": "PASSED"
    },
    {
        "name": "tests/test_utils.py::TestSpineUtils::test_despine_specific_axes",
        "status": "PASSED"
    },
    {
        "name": "tests/test_utils.py::TestSpineUtils::test_despine_with_offset",
        "status": "PASSED"
    },
    {
        "name": "tests/test_utils.py::TestSpineUtils::test_despine_side_specific_offset",
        "status": "PASSED"
    },
    {
        "name": "tests/test_utils.py::TestSpineUtils::test_despine_with_offset_specific_axes",
        "status": "PASSED"
    },
    {
        "name": "tests/test_utils.py::TestSpineUtils::test_despine_trim_spines",
        "status": "PASSED"
    },
    {
        "name": "tests/test_utils.py::TestSpineUtils::test_despine_trim_inverted",
        "status": "PASSED"
    },
    {
        "name": "tests/test_utils.py::TestSpineUtils::test_despine_trim_noticks",
        "status": "PASSED"
    },
    {
        "name": "tests/test_utils.py::TestSpineUtils::test_despine_trim_categorical",
        "status": "PASSED"
    },
    {
        "name": "tests/test_utils.py::TestSpineUtils::test_despine_moved_ticks",
        "status": "PASSED"
    },
    {
        "name": "tests/test_utils.py::test_ticklabels_overlap",
        "status": "PASSED"
    },
    {
        "name": "tests/test_utils.py::test_locator_to_legend_entries",
        "status": "FAILED"
    },
    {
        "name": "tests/test_utils.py::test_move_legend_matplotlib_objects",
        "status": "PASSED"
    },
    {
        "name": "tests/test_utils.py::test_move_legend_grid_object",
        "status": "FAILED"
    },
    {
        "name": "tests/test_utils.py::test_move_legend_input_checks",
        "status": "PASSED"
    },
    {
        "name": "tests/test_utils.py::test_get_dataset_names",
        "status": "PASSED"
    },
    {
        "name": "tests/test_utils.py::test_load_datasets",
        "status": "PASSED"
    },
    {
        "name": "tests/test_utils.py::test_load_dataset_string_error",
        "status": "PASSED"
    },
    {
        "name": "tests/test_utils.py::test_load_dataset_passed_data_error",
        "status": "PASSED"
    },
    {
        "name": "tests/test_utils.py::test_load_cached_datasets",
        "status": "PASSED"
    },
    {
        "name": "tests/test_utils.py::test_relative_luminance",
        "status": "PASSED"
    },
    {
        "name": "tests/test_utils.py::test_get_color_cycle[cycler0-result0]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_utils.py::test_get_color_cycle[cycler1-result1]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_utils.py::test_get_color_cycle[cycler2-result2]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_utils.py::test_get_color_cycle[cycler3-result3]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_utils.py::test_get_color_cycle[cycler4-result4]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_utils.py::test_get_color_cycle[cycler5-result5]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_utils.py::test_get_color_cycle[cycler6-result6]",
        "status": "PASSED"
    },
    {
        "name": "tests/test_utils.py::test_remove_na",
        "status": "PASSED"
    },
    {
        "name": "tests/test_utils.py::test_assign_default_kwargs",
        "status": "PASSED"
    },
    {
        "name": "tests/test_utils.py::test_draw_figure",
        "status": "PASSED"
    },
    {
        "name": "tests/test_utils.py::test_deprecate_ci",
        "status": "PASSED"
    }
]